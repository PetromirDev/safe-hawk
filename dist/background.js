/*! For license information please see background.js.LICENSE.txt */
(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};function n(t,e,n){const r=e.split("|").map((t=>t.trim()));for(let n=0;n<r.length;n++)switch(e){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof t===e)return}const s=new Error(`invalid value for type ${e}`);throw s.code="INVALID_ARGUMENT",s.argument=`value.${n}`,s.value=t,s}async function r(t){const e=Object.keys(t);return(await Promise.all(e.map((e=>Promise.resolve(t[e]))))).reduce(((t,n,r)=>(t[e[r]]=n,t)),{})}function s(t,e,r){for(let s in e){let i=e[s];const a=r?r[s]:null;a&&n(i,a,s),Object.defineProperty(t,s,{enumerable:!0,value:i,writable:!1})}}function i(t){if(null==t)return"null";if(Array.isArray(t))return"[ "+t.map(i).join(", ")+" ]";if(t instanceof Uint8Array){const e="0123456789abcdef";let n="0x";for(let r=0;r<t.length;r++)n+=e[t[r]>>4],n+=e[15&t[r]];return n}if("object"==typeof t&&"function"==typeof t.toJSON)return i(t.toJSON());switch(typeof t){case"boolean":case"symbol":case"number":return t.toString();case"bigint":return BigInt(t).toString();case"string":return JSON.stringify(t);case"object":{const e=Object.keys(t);return e.sort(),"{ "+e.map((e=>`${i(e)}: ${i(t[e])}`)).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function a(t,e){return t&&t.code===e}function o(t){return a(t,"CALL_EXCEPTION")}function l(t,e,n){let r,a=t;{const r=[];if(n){if("message"in n||"code"in n||"name"in n)throw new Error(`value will overwrite populated values: ${i(n)}`);for(const t in n){if("shortMessage"===t)continue;const e=n[t];r.push(t+"="+i(e))}}r.push(`code=${e}`),r.push("version=6.13.4"),r.length&&(t+=" ("+r.join(", ")+")")}switch(e){case"INVALID_ARGUMENT":r=new TypeError(t);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":r=new RangeError(t);break;default:r=new Error(t)}return s(r,{code:e}),n&&Object.assign(r,n),null==r.shortMessage&&s(r,{shortMessage:a}),r}function c(t,e,n,r){if(!t)throw l(e,n,r)}function u(t,e,n,r){c(t,e,"INVALID_ARGUMENT",{argument:n,value:r})}function h(t,e,n){null==n&&(n=""),n&&(n=": "+n),c(t>=e,"missing arguemnt"+n,"MISSING_ARGUMENT",{count:t,expectedCount:e}),c(t<=e,"too many arguments"+n,"UNEXPECTED_ARGUMENT",{count:t,expectedCount:e})}t.r(e),t.d(e,{OG:()=>zi,My:()=>Ui,Ph:()=>Mi,lX:()=>Gi,Id:()=>ji,fg:()=>qi,qj:()=>Vi,aT:()=>Li,lq:()=>Hi,z:()=>Qi,Q5:()=>Yi});const f=["NFD","NFC","NFKD","NFKC"].reduce(((t,e)=>{try{if("test"!=="test".normalize(e))throw new Error("bad");if("NFD"===e){if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken")}t.push(e)}catch(t){}return t}),[]);function d(t,e,n){if(null==n&&(n=""),t!==e){let t=n,e="new";n&&(t+=".",e+=" "+n),c(!1,`private constructor; use ${t}from* methods`,"UNSUPPORTED_OPERATION",{operation:e})}}function p(t,e,n){if(t instanceof Uint8Array)return n?new Uint8Array(t):t;if("string"==typeof t&&t.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)){const e=new Uint8Array((t.length-2)/2);let n=2;for(let r=0;r<e.length;r++)e[r]=parseInt(t.substring(n,n+2),16),n+=2;return e}u(!1,"invalid BytesLike value",e||"value",t)}function g(t,e){return p(t,e,!1)}function m(t,e){return p(t,e,!0)}function y(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||"number"==typeof e&&t.length!==2+2*e||!0===e&&t.length%2!=0)}function w(t){return y(t,!0)||t instanceof Uint8Array}const b="0123456789abcdef";function A(t){const e=g(t);let n="0x";for(let t=0;t<e.length;t++){const r=e[t];n+=b[(240&r)>>4]+b[15&r]}return n}function v(t){return"0x"+t.map((t=>A(t).substring(2))).join("")}function E(t){return y(t,!0)?(t.length-2)/2:g(t).length}function k(t,e,n){const r=g(t);return null!=n&&n>r.length&&c(!1,"cannot slice beyond data bounds","BUFFER_OVERRUN",{buffer:r,length:r.length,offset:n}),A(r.slice(null==e?0:e,null==n?r.length:n))}function x(t,e,n){const r=g(t);c(e>=r.length,"padding exceeds data length","BUFFER_OVERRUN",{buffer:new Uint8Array(r),length:e,offset:e+1});const s=new Uint8Array(e);return s.fill(0),n?s.set(r,e-r.length):s.set(r,0),A(s)}function P(t,e){return x(t,e,!0)}const N=BigInt(0),B=BigInt(1),I=9007199254740991;function C(t,e){const n=S(t,"value"),r=BigInt(D(e,"width"));return c(n>>r===N,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:t}),n>>r-B?-((~n&(B<<r)-B)+B):n}function O(t,e){let n=T(t,"value");const r=BigInt(D(e,"width")),s=B<<r-B;return n<N?(n=-n,c(n<=s,"too low","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:t}),(~n&(B<<r)-B)+B):(c(n<s,"too high","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:t}),n)}function R(t,e){const n=S(t,"value"),r=BigInt(D(e,"bits"));return n&(B<<r)-B}function T(t,e){switch(typeof t){case"bigint":return t;case"number":return u(Number.isInteger(t),"underflow",e||"value",t),u(t>=-I&&t<=I,"overflow",e||"value",t),BigInt(t);case"string":try{if(""===t)throw new Error("empty string");return"-"===t[0]&&"-"!==t[1]?-BigInt(t.substring(1)):BigInt(t)}catch(n){u(!1,`invalid BigNumberish string: ${n.message}`,e||"value",t)}}u(!1,"invalid BigNumberish value",e||"value",t)}function S(t,e){const n=T(t,e);return c(n>=N,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:t}),n}const F="0123456789abcdef";function U(t){if(t instanceof Uint8Array){let e="0x0";for(const n of t)e+=F[n>>4],e+=F[15&n];return BigInt(e)}return T(t)}function D(t,e){switch(typeof t){case"bigint":return u(t>=-I&&t<=I,"overflow",e||"value",t),Number(t);case"number":return u(Number.isInteger(t),"underflow",e||"value",t),u(t>=-I&&t<=I,"overflow",e||"value",t),t;case"string":try{if(""===t)throw new Error("empty string");return D(BigInt(t),e)}catch(n){u(!1,`invalid numeric string: ${n.message}`,e||"value",t)}}u(!1,"invalid numeric value",e||"value",t)}function L(t,e){let n=S(t,"value").toString(16);if(null==e)n.length%2&&(n="0"+n);else{const r=D(e,"width");for(c(2*r>=n.length,`value exceeds width (${r} bytes)`,"NUMERIC_FAULT",{operation:"toBeHex",fault:"overflow",value:t});n.length<2*r;)n="0"+n}return"0x"+n}function M(t){const e=S(t,"value");if(e===N)return new Uint8Array([]);let n=e.toString(16);n.length%2&&(n="0"+n);const r=new Uint8Array(n.length/2);for(let t=0;t<r.length;t++){const e=2*t;r[t]=parseInt(n.substring(e,e+2),16)}return r}function G(t){let e=A(w(t)?t:M(t)).substring(2);for(;e.startsWith("0");)e=e.substring(1);return""===e&&(e="0"),"0x"+e}const H=32,Q=new Uint8Array(H),V=["then"],j={},z=new WeakMap;function J(t){return z.get(t)}function K(t,e){z.set(t,e)}function q(t,e){const n=new Error(`deferred error during ABI decoding triggered accessing ${t}`);throw n.error=e,n}function Z(t,e,n){return t.indexOf(null)>=0?e.map(((t,e)=>t instanceof Y?Z(J(t),t,n):t)):t.reduce(((t,r,s)=>{let i=e.getValue(r);return r in t||(n&&i instanceof Y&&(i=Z(J(i),i,n)),t[r]=i),t}),{})}class Y extends Array{#t;constructor(...t){const e=t[0];let n=t[1],r=(t[2]||[]).slice(),s=!0;e!==j&&(n=t,r=[],s=!1),super(n.length),n.forEach(((t,e)=>{this[e]=t}));const i=r.reduce(((t,e)=>("string"==typeof e&&t.set(e,(t.get(e)||0)+1),t)),new Map);if(K(this,Object.freeze(n.map(((t,e)=>{const n=r[e];return null!=n&&1===i.get(n)?n:null})))),this.#t=[],null==this.#t&&this.#t,!s)return;Object.freeze(this);const a=new Proxy(this,{get:(t,e,n)=>{if("string"==typeof e){if(e.match(/^[0-9]+$/)){const n=D(e,"%index");if(n<0||n>=this.length)throw new RangeError("out of result range");const r=t[n];return r instanceof Error&&q(`index ${n}`,r),r}if(V.indexOf(e)>=0)return Reflect.get(t,e,n);const r=t[e];if(r instanceof Function)return function(...e){return r.apply(this===n?t:this,e)};if(!(e in t))return t.getValue.apply(this===n?t:this,[e])}return Reflect.get(t,e,n)}});return K(a,J(this)),a}toArray(t){const e=[];return this.forEach(((n,r)=>{n instanceof Error&&q(`index ${r}`,n),t&&n instanceof Y&&(n=n.toArray(t)),e.push(n)})),e}toObject(t){const e=J(this);return e.reduce(((n,r,s)=>(c(null!=r,`value at index ${s} unnamed`,"UNSUPPORTED_OPERATION",{operation:"toObject()"}),Z(e,this,t))),{})}slice(t,e){null==t&&(t=0),t<0&&(t+=this.length)<0&&(t=0),null==e&&(e=this.length),e<0&&(e+=this.length)<0&&(e=0),e>this.length&&(e=this.length);const n=J(this),r=[],s=[];for(let i=t;i<e;i++)r.push(this[i]),s.push(n[i]);return new Y(j,r,s)}filter(t,e){const n=J(this),r=[],s=[];for(let i=0;i<this.length;i++){const a=this[i];a instanceof Error&&q(`index ${i}`,a),t.call(e,a,i,this)&&(r.push(a),s.push(n[i]))}return new Y(j,r,s)}map(t,e){const n=[];for(let r=0;r<this.length;r++){const s=this[r];s instanceof Error&&q(`index ${r}`,s),n.push(t.call(e,s,r,this))}return n}getValue(t){const e=J(this).indexOf(t);if(-1===e)return;const n=this[e];return n instanceof Error&&q(`property ${JSON.stringify(t)}`,n.error),n}static fromItems(t,e){return new Y(j,t,e)}}function _(t){let e=M(t);return c(e.length<=H,"value out-of-bounds","BUFFER_OVERRUN",{buffer:e,length:H,offset:e.length}),e.length!==H&&(e=m(v([Q.slice(e.length%H),e]))),e}class W{name;type;localName;dynamic;constructor(t,e,n,r){s(this,{name:t,type:e,localName:n,dynamic:r},{name:"string",type:"string",localName:"string",dynamic:"boolean"})}_throwError(t,e){u(!1,t,this.localName,e)}}class X{#e;#n;constructor(){this.#e=[],this.#n=0}get data(){return v(this.#e)}get length(){return this.#n}#r(t){return this.#e.push(t),this.#n+=t.length,t.length}appendWriter(t){return this.#r(m(t.data))}writeBytes(t){let e=m(t);const n=e.length%H;return n&&(e=m(v([e,Q.slice(n)]))),this.#r(e)}writeValue(t){return this.#r(_(t))}writeUpdatableValue(){const t=this.#e.length;return this.#e.push(Q),this.#n+=H,e=>{this.#e[t]=_(e)}}}class ${allowLoose;#e;#s;#i;#a;#o;constructor(t,e,n){s(this,{allowLoose:!!e}),this.#e=m(t),this.#i=0,this.#a=null,this.#o=null!=n?n:1024,this.#s=0}get data(){return A(this.#e)}get dataLength(){return this.#e.length}get consumed(){return this.#s}get bytes(){return new Uint8Array(this.#e)}#l(t){if(this.#a)return this.#a.#l(t);this.#i+=t,c(this.#o<1||this.#i<=this.#o*this.dataLength,`compressed ABI data exceeds inflation ratio of ${this.#o} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`,"BUFFER_OVERRUN",{buffer:m(this.#e),offset:this.#s,length:t,info:{bytesRead:this.#i,dataLength:this.dataLength}})}#c(t,e,n){let r=Math.ceil(e/H)*H;return this.#s+r>this.#e.length&&(this.allowLoose&&n&&this.#s+e<=this.#e.length?r=e:c(!1,"data out-of-bounds","BUFFER_OVERRUN",{buffer:m(this.#e),length:this.#e.length,offset:this.#s+r})),this.#e.slice(this.#s,this.#s+r)}subReader(t){const e=new $(this.#e.slice(this.#s+t),this.allowLoose,this.#o);return e.#a=this,e}readBytes(t,e){let n=this.#c(0,t,!!e);return this.#l(t),this.#s+=n.length,n.slice(0,t)}readValue(){return U(this.readBytes(H))}readIndex(){return D(U(this.readBytes(H)))}}function tt(t){if(!Number.isSafeInteger(t)||t<0)throw new Error(`Wrong positive integer: ${t}`)}function et(t,...e){if(!(t instanceof Uint8Array))throw new Error("Expected Uint8Array");if(e.length>0&&!e.includes(t.length))throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`)}function nt(t,e=!0){if(t.destroyed)throw new Error("Hash instance has been destroyed");if(e&&t.finished)throw new Error("Hash#digest() has already been called")}function rt(t,e){et(t);const n=e.outputLen;if(t.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}const st=BigInt(2**32-1),it=BigInt(32);function at(t,e=!1){return e?{h:Number(t&st),l:Number(t>>it&st)}:{h:0|Number(t>>it&st),l:0|Number(t&st)}}function ot(t,e=!1){let n=new Uint32Array(t.length),r=new Uint32Array(t.length);for(let s=0;s<t.length;s++){const{h:i,l:a}=at(t[s],e);[n[s],r[s]]=[i,a]}return[n,r]}const lt=(t,e,n)=>t<<n|e>>>32-n,ct=(t,e,n)=>e<<n|t>>>32-n,ut=(t,e,n)=>e<<n-32|t>>>64-n,ht=(t,e,n)=>t<<n-32|e>>>64-n,ft={fromBig:at,split:ot,toBig:(t,e)=>BigInt(t>>>0)<<it|BigInt(e>>>0),shrSH:(t,e,n)=>t>>>n,shrSL:(t,e,n)=>t<<32-n|e>>>n,rotrSH:(t,e,n)=>t>>>n|e<<32-n,rotrSL:(t,e,n)=>t<<32-n|e>>>n,rotrBH:(t,e,n)=>t<<64-n|e>>>n-32,rotrBL:(t,e,n)=>t>>>n-32|e<<64-n,rotr32H:(t,e)=>e,rotr32L:(t,e)=>t,rotlSH:lt,rotlSL:ct,rotlBH:ut,rotlBL:ht,add:function(t,e,n,r){const s=(e>>>0)+(r>>>0);return{h:t+n+(s/2**32|0)|0,l:0|s}},add3L:(t,e,n)=>(t>>>0)+(e>>>0)+(n>>>0),add3H:(t,e,n,r)=>e+n+r+(t/2**32|0)|0,add4L:(t,e,n,r)=>(t>>>0)+(e>>>0)+(n>>>0)+(r>>>0),add4H:(t,e,n,r,s)=>e+n+r+s+(t/2**32|0)|0,add5H:(t,e,n,r,s,i)=>e+n+r+s+i+(t/2**32|0)|0,add5L:(t,e,n,r,s)=>(t>>>0)+(e>>>0)+(n>>>0)+(r>>>0)+(s>>>0)},dt="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,pt=t=>t instanceof Uint8Array,gt=t=>new DataView(t.buffer,t.byteOffset,t.byteLength),mt=(t,e)=>t<<32-e|t>>>e;if(68!==new Uint8Array(new Uint32Array([287454020]).buffer)[0])throw new Error("Non little-endian hardware is not supported");function yt(t){if("string"==typeof t&&(t=function(t){if("string"!=typeof t)throw new Error("utf8ToBytes expected string, got "+typeof t);return new Uint8Array((new TextEncoder).encode(t))}(t)),!pt(t))throw new Error("expected Uint8Array, got "+typeof t);return t}class wt{clone(){return this._cloneInto()}}function bt(t){const e=e=>t().update(yt(e)).digest(),n=t();return e.outputLen=n.outputLen,e.blockLen=n.blockLen,e.create=()=>t(),e}function At(t=32){if(dt&&"function"==typeof dt.getRandomValues)return dt.getRandomValues(new Uint8Array(t));throw new Error("crypto.getRandomValues must be defined")}const[vt,Et,kt]=[[],[],[]],xt=BigInt(0),Pt=BigInt(1),Nt=BigInt(2),Bt=BigInt(7),It=BigInt(256),Ct=BigInt(113);for(let t=0,e=Pt,n=1,r=0;t<24;t++){[n,r]=[r,(2*n+3*r)%5],vt.push(2*(5*r+n)),Et.push((t+1)*(t+2)/2%64);let s=xt;for(let t=0;t<7;t++)e=(e<<Pt^(e>>Bt)*Ct)%It,e&Nt&&(s^=Pt<<(Pt<<BigInt(t))-Pt);kt.push(s)}const[Ot,Rt]=ot(kt,!0),Tt=(t,e,n)=>n>32?ut(t,e,n):lt(t,e,n),St=(t,e,n)=>n>32?ht(t,e,n):ct(t,e,n);class Ft extends wt{constructor(t,e,n,r=!1,s=24){if(super(),this.blockLen=t,this.suffix=e,this.outputLen=n,this.enableXOF=r,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,tt(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");var i;this.state=new Uint8Array(200),this.state32=(i=this.state,new Uint32Array(i.buffer,i.byteOffset,Math.floor(i.byteLength/4)))}keccak(){!function(t,e=24){const n=new Uint32Array(10);for(let r=24-e;r<24;r++){for(let e=0;e<10;e++)n[e]=t[e]^t[e+10]^t[e+20]^t[e+30]^t[e+40];for(let e=0;e<10;e+=2){const r=(e+8)%10,s=(e+2)%10,i=n[s],a=n[s+1],o=Tt(i,a,1)^n[r],l=St(i,a,1)^n[r+1];for(let n=0;n<50;n+=10)t[e+n]^=o,t[e+n+1]^=l}let e=t[2],s=t[3];for(let n=0;n<24;n++){const r=Et[n],i=Tt(e,s,r),a=St(e,s,r),o=vt[n];e=t[o],s=t[o+1],t[o]=i,t[o+1]=a}for(let e=0;e<50;e+=10){for(let r=0;r<10;r++)n[r]=t[e+r];for(let r=0;r<10;r++)t[e+r]^=~n[(r+2)%10]&n[(r+4)%10]}t[0]^=Ot[r],t[1]^=Rt[r]}n.fill(0)}(this.state32,this.rounds),this.posOut=0,this.pos=0}update(t){nt(this);const{blockLen:e,state:n}=this,r=(t=yt(t)).length;for(let s=0;s<r;){const i=Math.min(e-this.pos,r-s);for(let e=0;e<i;e++)n[this.pos++]^=t[s++];this.pos===e&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:t,suffix:e,pos:n,blockLen:r}=this;t[n]^=e,128&e&&n===r-1&&this.keccak(),t[r-1]^=128,this.keccak()}writeInto(t){nt(this,!1),et(t),this.finish();const e=this.state,{blockLen:n}=this;for(let r=0,s=t.length;r<s;){this.posOut>=n&&this.keccak();const i=Math.min(n-this.posOut,s-r);t.set(e.subarray(this.posOut,this.posOut+i),r),this.posOut+=i,r+=i}return t}xofInto(t){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(t)}xof(t){return tt(t),this.xofInto(new Uint8Array(t))}digestInto(t){if(rt(t,this),this.finished)throw new Error("digest() was already called");return this.writeInto(t),this.destroy(),t}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(t){const{blockLen:e,suffix:n,outputLen:r,rounds:s,enableXOF:i}=this;return t||(t=new Ft(e,n,r,i,s)),t.state32.set(this.state32),t.pos=this.pos,t.posOut=this.posOut,t.finished=this.finished,t.rounds=s,t.suffix=n,t.outputLen=r,t.enableXOF=i,t.destroyed=this.destroyed,t}}const Ut=((t,e,n)=>bt((()=>new Ft(e,t,n))))(1,136,32);let Dt=!1;const Lt=function(t){return Ut(t)};let Mt=Lt;function Gt(t){const e=g(t,"data");return A(Mt(e))}Gt._=Lt,Gt.lock=function(){Dt=!0},Gt.register=function(t){if(Dt)throw new TypeError("keccak256 is locked");Mt=t},Object.freeze(Gt);const Ht=BigInt(0),Qt=BigInt(36);function Vt(t){const e=(t=t.toLowerCase()).substring(2).split(""),n=new Uint8Array(40);for(let t=0;t<40;t++)n[t]=e[t].charCodeAt(0);const r=g(Gt(n));for(let t=0;t<40;t+=2)r[t>>1]>>4>=8&&(e[t]=e[t].toUpperCase()),(15&r[t>>1])>=8&&(e[t+1]=e[t+1].toUpperCase());return"0x"+e.join("")}const jt={};for(let t=0;t<10;t++)jt[String(t)]=String(t);for(let t=0;t<26;t++)jt[String.fromCharCode(65+t)]=String(10+t);const zt=function(){const t={};for(let e=0;e<36;e++)t["0123456789abcdefghijklmnopqrstuvwxyz"[e]]=BigInt(e);return t}();function Jt(t){if(u("string"==typeof t,"invalid address","address",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/)){t.startsWith("0x")||(t="0x"+t);const e=Vt(t);return u(!t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||e===t,"bad address checksum","address",t),e}if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){u(t.substring(2,4)===function(t){let e=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+"00").split("").map((t=>jt[t])).join("");for(;e.length>=15;){let t=e.substring(0,15);e=parseInt(t,10)%97+e.substring(t.length)}let n=String(98-parseInt(e,10)%97);for(;n.length<2;)n="0"+n;return n}(t),"bad icap checksum","address",t);let e=function(t){t=t.toLowerCase();let e=Ht;for(let n=0;n<t.length;n++)e=e*Qt+zt[t[n]];return e}(t.substring(4)).toString(16);for(;e.length<40;)e="0"+e;return Vt("0x"+e)}u(!1,"invalid address","address",t)}const Kt={};function qt(t,e){let n=!1;return e<0&&(n=!0,e*=-1),new _t(Kt,`${n?"":"u"}int${e}`,t,{signed:n,width:e})}function Zt(t,e){return new _t(Kt,`bytes${e||""}`,t,{size:e})}const Yt=Symbol.for("_ethers_typed");class _t{type;value;#u;_typedSymbol;constructor(t,e,n,r){null==r&&(r=null),d(Kt,t,"Typed"),s(this,{_typedSymbol:Yt,type:e,value:n}),this.#u=r,this.format()}format(){if("array"===this.type)throw new Error("");if("dynamicArray"===this.type)throw new Error("");return"tuple"===this.type?`tuple(${this.value.map((t=>t.format())).join(",")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith("bytes")}isString(){return"string"===this.type}get tupleName(){if("tuple"!==this.type)throw TypeError("not a tuple");return this.#u}get arrayLength(){if("array"!==this.type)throw TypeError("not an array");return!0===this.#u?-1:!1===this.#u?this.value.length:null}static from(t,e){return new _t(Kt,t,e)}static uint8(t){return qt(t,8)}static uint16(t){return qt(t,16)}static uint24(t){return qt(t,24)}static uint32(t){return qt(t,32)}static uint40(t){return qt(t,40)}static uint48(t){return qt(t,48)}static uint56(t){return qt(t,56)}static uint64(t){return qt(t,64)}static uint72(t){return qt(t,72)}static uint80(t){return qt(t,80)}static uint88(t){return qt(t,88)}static uint96(t){return qt(t,96)}static uint104(t){return qt(t,104)}static uint112(t){return qt(t,112)}static uint120(t){return qt(t,120)}static uint128(t){return qt(t,128)}static uint136(t){return qt(t,136)}static uint144(t){return qt(t,144)}static uint152(t){return qt(t,152)}static uint160(t){return qt(t,160)}static uint168(t){return qt(t,168)}static uint176(t){return qt(t,176)}static uint184(t){return qt(t,184)}static uint192(t){return qt(t,192)}static uint200(t){return qt(t,200)}static uint208(t){return qt(t,208)}static uint216(t){return qt(t,216)}static uint224(t){return qt(t,224)}static uint232(t){return qt(t,232)}static uint240(t){return qt(t,240)}static uint248(t){return qt(t,248)}static uint256(t){return qt(t,256)}static uint(t){return qt(t,256)}static int8(t){return qt(t,-8)}static int16(t){return qt(t,-16)}static int24(t){return qt(t,-24)}static int32(t){return qt(t,-32)}static int40(t){return qt(t,-40)}static int48(t){return qt(t,-48)}static int56(t){return qt(t,-56)}static int64(t){return qt(t,-64)}static int72(t){return qt(t,-72)}static int80(t){return qt(t,-80)}static int88(t){return qt(t,-88)}static int96(t){return qt(t,-96)}static int104(t){return qt(t,-104)}static int112(t){return qt(t,-112)}static int120(t){return qt(t,-120)}static int128(t){return qt(t,-128)}static int136(t){return qt(t,-136)}static int144(t){return qt(t,-144)}static int152(t){return qt(t,-152)}static int160(t){return qt(t,-160)}static int168(t){return qt(t,-168)}static int176(t){return qt(t,-176)}static int184(t){return qt(t,-184)}static int192(t){return qt(t,-192)}static int200(t){return qt(t,-200)}static int208(t){return qt(t,-208)}static int216(t){return qt(t,-216)}static int224(t){return qt(t,-224)}static int232(t){return qt(t,-232)}static int240(t){return qt(t,-240)}static int248(t){return qt(t,-248)}static int256(t){return qt(t,-256)}static int(t){return qt(t,-256)}static bytes1(t){return Zt(t,1)}static bytes2(t){return Zt(t,2)}static bytes3(t){return Zt(t,3)}static bytes4(t){return Zt(t,4)}static bytes5(t){return Zt(t,5)}static bytes6(t){return Zt(t,6)}static bytes7(t){return Zt(t,7)}static bytes8(t){return Zt(t,8)}static bytes9(t){return Zt(t,9)}static bytes10(t){return Zt(t,10)}static bytes11(t){return Zt(t,11)}static bytes12(t){return Zt(t,12)}static bytes13(t){return Zt(t,13)}static bytes14(t){return Zt(t,14)}static bytes15(t){return Zt(t,15)}static bytes16(t){return Zt(t,16)}static bytes17(t){return Zt(t,17)}static bytes18(t){return Zt(t,18)}static bytes19(t){return Zt(t,19)}static bytes20(t){return Zt(t,20)}static bytes21(t){return Zt(t,21)}static bytes22(t){return Zt(t,22)}static bytes23(t){return Zt(t,23)}static bytes24(t){return Zt(t,24)}static bytes25(t){return Zt(t,25)}static bytes26(t){return Zt(t,26)}static bytes27(t){return Zt(t,27)}static bytes28(t){return Zt(t,28)}static bytes29(t){return Zt(t,29)}static bytes30(t){return Zt(t,30)}static bytes31(t){return Zt(t,31)}static bytes32(t){return Zt(t,32)}static address(t){return new _t(Kt,"address",t)}static bool(t){return new _t(Kt,"bool",!!t)}static bytes(t){return new _t(Kt,"bytes",t)}static string(t){return new _t(Kt,"string",t)}static array(t,e){throw new Error("not implemented yet")}static tuple(t,e){throw new Error("not implemented yet")}static overrides(t){return new _t(Kt,"overrides",Object.assign({},t))}static isTyped(t){return t&&"object"==typeof t&&"_typedSymbol"in t&&t._typedSymbol===Yt}static dereference(t,e){if(_t.isTyped(t)){if(t.type!==e)throw new Error(`invalid type: expecetd ${e}, got ${t.type}`);return t.value}return t}}class Wt extends W{constructor(t){super("address","address",t,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(t,e){let n=_t.dereference(e,"string");try{n=Jt(n)}catch(t){return this._throwError(t.message,e)}return t.writeValue(n)}decode(t){return Jt(L(t.readValue(),20))}}class Xt extends W{coder;constructor(t){super(t.name,t.type,"_",t.dynamic),this.coder=t}defaultValue(){return this.coder.defaultValue()}encode(t,e){return this.coder.encode(t,e)}decode(t){return this.coder.decode(t)}}function $t(t,e,n){let r=[];if(Array.isArray(n))r=n;else if(n&&"object"==typeof n){let t={};r=e.map((e=>{const r=e.localName;return c(r,"cannot encode object for signature with missing names","INVALID_ARGUMENT",{argument:"values",info:{coder:e},value:n}),c(!t[r],"cannot encode object for signature with duplicate names","INVALID_ARGUMENT",{argument:"values",info:{coder:e},value:n}),t[r]=!0,n[r]}))}else u(!1,"invalid tuple value","tuple",n);u(e.length===r.length,"types/value length mismatch","tuple",n);let s=new X,i=new X,a=[];e.forEach(((t,e)=>{let n=r[e];if(t.dynamic){let e=i.length;t.encode(i,n);let r=s.writeUpdatableValue();a.push((t=>{r(t+e)}))}else t.encode(s,n)})),a.forEach((t=>{t(s.length)}));let o=t.appendWriter(s);return o+=t.appendWriter(i),o}function te(t,e){let n=[],r=[],s=t.subReader(0);return e.forEach((e=>{let i=null;if(e.dynamic){let n=t.readIndex(),r=s.subReader(n);try{i=e.decode(r)}catch(t){if(a(t,"BUFFER_OVERRUN"))throw t;i=t,i.baseType=e.name,i.name=e.localName,i.type=e.type}}else try{i=e.decode(t)}catch(t){if(a(t,"BUFFER_OVERRUN"))throw t;i=t,i.baseType=e.name,i.name=e.localName,i.type=e.type}if(null==i)throw new Error("investigate");n.push(i),r.push(e.localName||null)})),Y.fromItems(n,r)}class ee extends W{coder;length;constructor(t,e,n){super("array",t.type+"["+(e>=0?e:"")+"]",n,-1===e||t.dynamic),s(this,{coder:t,length:e})}defaultValue(){const t=this.coder.defaultValue(),e=[];for(let n=0;n<this.length;n++)e.push(t);return e}encode(t,e){const n=_t.dereference(e,"array");Array.isArray(n)||this._throwError("expected array value",n);let r=this.length;-1===r&&(r=n.length,t.writeValue(n.length)),h(n.length,r,"coder array"+(this.localName?" "+this.localName:""));let s=[];for(let t=0;t<n.length;t++)s.push(this.coder);return $t(t,s,n)}decode(t){let e=this.length;-1===e&&(e=t.readIndex(),c(e*H<=t.dataLength,"insufficient data length","BUFFER_OVERRUN",{buffer:t.bytes,offset:e*H,length:t.dataLength}));let n=[];for(let t=0;t<e;t++)n.push(new Xt(this.coder));return te(t,n)}}class ne extends W{constructor(t){super("bool","bool",t,!1)}defaultValue(){return!1}encode(t,e){const n=_t.dereference(e,"bool");return t.writeValue(n?1:0)}decode(t){return!!t.readValue()}}class re extends W{constructor(t,e){super(t,t,e,!0)}defaultValue(){return"0x"}encode(t,e){e=m(e);let n=t.writeValue(e.length);return n+=t.writeBytes(e),n}decode(t){return t.readBytes(t.readIndex(),!0)}}class se extends re{constructor(t){super("bytes",t)}decode(t){return A(super.decode(t))}}class ie extends W{size;constructor(t,e){let n="bytes"+String(t);super(n,n,e,!1),s(this,{size:t},{size:"number"})}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(t,e){let n=m(_t.dereference(e,this.type));return n.length!==this.size&&this._throwError("incorrect data length",e),t.writeBytes(n)}decode(t){return A(t.readBytes(this.size))}}const ae=new Uint8Array([]);class oe extends W{constructor(t){super("null","",t,!1)}defaultValue(){return null}encode(t,e){return null!=e&&this._throwError("not null",e),t.writeBytes(ae)}decode(t){return t.readBytes(0),null}}const le=BigInt(0),ce=BigInt(1),ue=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class he extends W{size;signed;constructor(t,e,n){const r=(e?"int":"uint")+8*t;super(r,r,n,!1),s(this,{size:t,signed:e},{size:"number",signed:"boolean"})}defaultValue(){return 0}encode(t,e){let n=T(_t.dereference(e,this.type)),r=R(ue,256);if(this.signed){let t=R(r,8*this.size-1);(n>t||n<-(t+ce))&&this._throwError("value out-of-bounds",e),n=O(n,256)}else(n<le||n>R(r,8*this.size))&&this._throwError("value out-of-bounds",e);return t.writeValue(n)}decode(t){let e=R(t.readValue(),8*this.size);return this.signed&&(e=C(e,8*this.size)),e}}function fe(t,e,n,r,s){if("BAD_PREFIX"===t||"UNEXPECTED_CONTINUE"===t){let t=0;for(let r=e+1;r<n.length&&n[r]>>6==2;r++)t++;return t}return"OVERRUN"===t?n.length-e-1:0}const de=Object.freeze({error:function(t,e,n,r,s){u(!1,`invalid codepoint at offset ${e}; ${t}`,"bytes",n)},ignore:fe,replace:function(t,e,n,r,s){return"OVERLONG"===t?(u("number"==typeof s,"invalid bad code point for replacement","badCodepoint",s),r.push(s),0):(r.push(65533),fe(t,e,n))}});function pe(t,e){u("string"==typeof t,"invalid string value","str",t),null!=e&&(function(t){c(f.indexOf(t)>=0,"platform missing String.prototype.normalize","UNSUPPORTED_OPERATION",{operation:"String.prototype.normalize",info:{form:t}})}(e),t=t.normalize(e));let n=[];for(let e=0;e<t.length;e++){const r=t.charCodeAt(e);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){e++;const s=t.charCodeAt(e);u(e<t.length&&56320==(64512&s),"invalid surrogate pair","str",t);const i=65536+((1023&r)<<10)+(1023&s);n.push(i>>18|240),n.push(i>>12&63|128),n.push(i>>6&63|128),n.push(63&i|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return new Uint8Array(n)}function ge(t,e){return function(t,e){null==e&&(e=de.error);const n=g(t,"bytes"),r=[];let s=0;for(;s<n.length;){const t=n[s++];if(!(t>>7)){r.push(t);continue}let i=null,a=null;if(192==(224&t))i=1,a=127;else if(224==(240&t))i=2,a=2047;else{if(240!=(248&t)){s+=e(128==(192&t)?"UNEXPECTED_CONTINUE":"BAD_PREFIX",s-1,n,r);continue}i=3,a=65535}if(s-1+i>=n.length){s+=e("OVERRUN",s-1,n,r);continue}let o=t&(1<<8-i-1)-1;for(let t=0;t<i;t++){let t=n[s];if(128!=(192&t)){s+=e("MISSING_CONTINUE",s,n,r),o=null;break}o=o<<6|63&t,s++}null!==o&&(o>1114111?s+=e("OUT_OF_RANGE",s-1-i,n,r,o):o>=55296&&o<=57343?s+=e("UTF16_SURROGATE",s-1-i,n,r,o):o<=a?s+=e("OVERLONG",s-1-i,n,r,o):r.push(o))}return r}(t,e).map((t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10&1023),56320+(1023&t))))).join("")}class me extends re{constructor(t){super("string",t)}defaultValue(){return""}encode(t,e){return super.encode(t,pe(_t.dereference(e,"string")))}decode(t){return ge(super.decode(t))}}class ye extends W{coders;constructor(t,e){let n=!1;const r=[];t.forEach((t=>{t.dynamic&&(n=!0),r.push(t.type)})),super("tuple","tuple("+r.join(",")+")",e,n),s(this,{coders:Object.freeze(t.slice())})}defaultValue(){const t=[];this.coders.forEach((e=>{t.push(e.defaultValue())}));const e=this.coders.reduce(((t,e)=>{const n=e.localName;return n&&(t[n]||(t[n]=0),t[n]++),t}),{});return this.coders.forEach(((n,r)=>{let s=n.localName;s&&1===e[s]&&("length"===s&&(s="_length"),null==t[s]&&(t[s]=t[r]))})),Object.freeze(t)}encode(t,e){const n=_t.dereference(e,"tuple");return $t(t,this.coders,n)}decode(t){return te(t,this.coders)}}function we(t){return Gt(pe(t))}function be(t){const e=new Set;return t.forEach((t=>e.add(t))),Object.freeze(e)}const Ae=be("external public payable override".split(" ")),ve="constant external internal payable private public pure view override",Ee=be(ve.split(" ")),ke="constructor error event fallback function receive struct",xe=be(ke.split(" ")),Pe="calldata memory storage payable indexed",Ne=be(Pe.split(" ")),Be=be([ke,Pe,"tuple returns",ve].join(" ").split(" ")),Ie={"(":"OPEN_PAREN",")":"CLOSE_PAREN","[":"OPEN_BRACKET","]":"CLOSE_BRACKET",",":"COMMA","@":"AT"},Ce=new RegExp("^(\\s*)"),Oe=new RegExp("^([0-9]+)"),Re=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"),Te=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"),Se=new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");class Fe{#s;#h;get offset(){return this.#s}get length(){return this.#h.length-this.#s}constructor(t){this.#s=0,this.#h=t.slice()}clone(){return new Fe(this.#h)}reset(){this.#s=0}#f(t=0,e=0){return new Fe(this.#h.slice(t,e).map((e=>Object.freeze(Object.assign({},e,{match:e.match-t,linkBack:e.linkBack-t,linkNext:e.linkNext-t})))))}popKeyword(t){const e=this.peek();if("KEYWORD"!==e.type||!t.has(e.text))throw new Error(`expected keyword ${e.text}`);return this.pop().text}popType(t){if(this.peek().type!==t){const e=this.peek();throw new Error(`expected ${t}; got ${e.type} ${JSON.stringify(e.text)}`)}return this.pop().text}popParen(){const t=this.peek();if("OPEN_PAREN"!==t.type)throw new Error("bad start");const e=this.#f(this.#s+1,t.match+1);return this.#s=t.match+1,e}popParams(){const t=this.peek();if("OPEN_PAREN"!==t.type)throw new Error("bad start");const e=[];for(;this.#s<t.match-1;){const t=this.peek().linkNext;e.push(this.#f(this.#s+1,t)),this.#s=t}return this.#s=t.match+1,e}peek(){if(this.#s>=this.#h.length)throw new Error("out-of-bounds");return this.#h[this.#s]}peekKeyword(t){const e=this.peekType("KEYWORD");return null!=e&&t.has(e)?e:null}peekType(t){if(0===this.length)return null;const e=this.peek();return e.type===t?e.text:null}pop(){const t=this.peek();return this.#s++,t}toString(){const t=[];for(let e=this.#s;e<this.#h.length;e++){const n=this.#h[e];t.push(`${n.type}:${n.text}`)}return`<TokenString ${t.join(" ")}>`}}function Ue(t){const e=[],n=e=>{const n=i<t.length?JSON.stringify(t[i]):"$EOI";throw new Error(`invalid token ${n} at ${i}: ${e}`)};let r=[],s=[],i=0;for(;i<t.length;){let a=t.substring(i),o=a.match(Ce);o&&(i+=o[1].length,a=t.substring(i));const l={depth:r.length,linkBack:-1,linkNext:-1,match:-1,type:"",text:"",offset:i,value:-1};e.push(l);let c=Ie[a[0]]||"";if(c){if(l.type=c,l.text=a[0],i++,"OPEN_PAREN"===c)r.push(e.length-1),s.push(e.length-1);else if("CLOSE_PAREN"==c)0===r.length&&n("no matching open bracket"),l.match=r.pop(),e[l.match].match=e.length-1,l.depth--,l.linkBack=s.pop(),e[l.linkBack].linkNext=e.length-1;else if("COMMA"===c)l.linkBack=s.pop(),e[l.linkBack].linkNext=e.length-1,s.push(e.length-1);else if("OPEN_BRACKET"===c)l.type="BRACKET";else if("CLOSE_BRACKET"===c){let t=e.pop().text;if(e.length>0&&"NUMBER"===e[e.length-1].type){const n=e.pop().text;t=n+t,e[e.length-1].value=D(n)}if(0===e.length||"BRACKET"!==e[e.length-1].type)throw new Error("missing opening bracket");e[e.length-1].text+=t}}else if(o=a.match(Re),o){if(l.text=o[1],i+=l.text.length,Be.has(l.text)){l.type="KEYWORD";continue}if(l.text.match(Se)){l.type="TYPE";continue}l.type="ID"}else{if(o=a.match(Oe),!o)throw new Error(`unexpected token ${JSON.stringify(a[0])} at position ${i}`);l.text=o[1],l.type="NUMBER",i+=l.text.length}}return new Fe(e.map((t=>Object.freeze(t))))}function De(t,e){let n=[];for(const r in e.keys())t.has(r)&&n.push(r);if(n.length>1)throw new Error(`conflicting types: ${n.join(", ")}`)}function Le(t,e){if(e.peekKeyword(xe)){const n=e.pop().text;if(n!==t)throw new Error(`expected ${t}, got ${n}`)}return e.popType("ID")}function Me(t,e){const n=new Set;for(;;){const r=t.peekType("KEYWORD");if(null==r||e&&!e.has(r))break;if(t.pop(),n.has(r))throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);n.add(r)}return Object.freeze(n)}function Ge(t){let e=Me(t,Ee);return De(e,be("constant payable nonpayable".split(" "))),De(e,be("pure view payable nonpayable".split(" "))),e.has("view")?"view":e.has("pure")?"pure":e.has("payable")?"payable":e.has("nonpayable")?"nonpayable":e.has("constant")?"view":"nonpayable"}function He(t,e){return t.popParams().map((t=>tn.from(t,e)))}function Qe(t){if(t.peekType("AT")){if(t.pop(),t.peekType("NUMBER"))return T(t.pop().text);throw new Error("invalid gas")}return null}function Ve(t){if(t.length)throw new Error(`unexpected tokens at offset ${t.offset}: ${t.toString()}`)}const je=new RegExp(/^(.*)\[([0-9]*)\]$/);function ze(t){const e=t.match(Se);if(u(e,"invalid type","type",t),"uint"===t)return"uint256";if("int"===t)return"int256";if(e[2]){const n=parseInt(e[2]);u(0!==n&&n<=32,"invalid bytes length","type",t)}else if(e[3]){const n=parseInt(e[3]);u(0!==n&&n<=256&&n%8==0,"invalid numeric width","type",t)}return t}const Je={},Ke=Symbol.for("_ethers_internal"),qe="_ParamTypeInternal",Ze="_ErrorInternal",Ye="_EventInternal",_e="_ConstructorInternal",We="_FallbackInternal",Xe="_FunctionInternal",$e="_StructInternal";class tn{name;type;baseType;indexed;components;arrayLength;arrayChildren;constructor(t,e,n,r,i,a,o,l){if(d(t,Je,"ParamType"),Object.defineProperty(this,Ke,{value:qe}),a&&(a=Object.freeze(a.slice())),"array"===r){if(null==o||null==l)throw new Error("")}else if(null!=o||null!=l)throw new Error("");if("tuple"===r){if(null==a)throw new Error("")}else if(null!=a)throw new Error("");s(this,{name:e,type:n,baseType:r,indexed:i,components:a,arrayLength:o,arrayChildren:l})}format(t){if(null==t&&(t="sighash"),"json"===t){const e=this.name||"";if(this.isArray()){const t=JSON.parse(this.arrayChildren.format("json"));return t.name=e,t.type+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`,JSON.stringify(t)}const n={type:"tuple"===this.baseType?"tuple":this.type,name:e};return"boolean"==typeof this.indexed&&(n.indexed=this.indexed),this.isTuple()&&(n.components=this.components.map((e=>JSON.parse(e.format(t))))),JSON.stringify(n)}let e="";return this.isArray()?(e+=this.arrayChildren.format(t),e+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`):this.isTuple()?e+="("+this.components.map((e=>e.format(t))).join("full"===t?", ":",")+")":e+=this.type,"sighash"!==t&&(!0===this.indexed&&(e+=" indexed"),"full"===t&&this.name&&(e+=" "+this.name)),e}isArray(){return"array"===this.baseType}isTuple(){return"tuple"===this.baseType}isIndexable(){return null!=this.indexed}walk(t,e){if(this.isArray()){if(!Array.isArray(t))throw new Error("invalid array value");if(-1!==this.arrayLength&&t.length!==this.arrayLength)throw new Error("array is wrong length");const n=this;return t.map((t=>n.arrayChildren.walk(t,e)))}if(this.isTuple()){if(!Array.isArray(t))throw new Error("invalid tuple value");if(t.length!==this.components.length)throw new Error("array is wrong length");const n=this;return t.map(((t,r)=>n.components[r].walk(t,e)))}return e(this.type,t)}#d(t,e,n,r){if(this.isArray()){if(!Array.isArray(e))throw new Error("invalid array value");if(-1!==this.arrayLength&&e.length!==this.arrayLength)throw new Error("array is wrong length");const s=this.arrayChildren,i=e.slice();return i.forEach(((e,r)=>{s.#d(t,e,n,(t=>{i[r]=t}))})),void r(i)}if(this.isTuple()){const s=this.components;let i;if(Array.isArray(e))i=e.slice();else{if(null==e||"object"!=typeof e)throw new Error("invalid tuple value");i=s.map((t=>{if(!t.name)throw new Error("cannot use object value with unnamed components");if(!(t.name in e))throw new Error(`missing value for component ${t.name}`);return e[t.name]}))}if(i.length!==this.components.length)throw new Error("array is wrong length");return i.forEach(((e,r)=>{s[r].#d(t,e,n,(t=>{i[r]=t}))})),void r(i)}const s=n(this.type,e);s.then?t.push(async function(){r(await s)}()):r(s)}async walkAsync(t,e){const n=[],r=[t];return this.#d(n,t,e,(t=>{r[0]=t})),n.length&&await Promise.all(n),r[0]}static from(t,e){if(tn.isParamType(t))return t;if("string"==typeof t)try{return tn.from(Ue(t),e)}catch(e){u(!1,"invalid param type","obj",t)}else if(t instanceof Fe){let n="",r="",s=null;Me(t,be(["tuple"])).has("tuple")||t.peekType("OPEN_PAREN")?(r="tuple",s=t.popParams().map((t=>tn.from(t))),n=`tuple(${s.map((t=>t.format())).join(",")})`):(n=ze(t.popType("TYPE")),r=n);let i=null,a=null;for(;t.length&&t.peekType("BRACKET");){const e=t.pop();i=new tn(Je,"",n,r,null,s,a,i),a=e.value,n+=e.text,r="array",s=null}let o=null;if(Me(t,Ne).has("indexed")){if(!e)throw new Error("");o=!0}const l=t.peekType("ID")?t.pop().text:"";if(t.length)throw new Error("leftover tokens");return new tn(Je,l,n,r,o,s,a,i)}const n=t.name;u(!n||"string"==typeof n&&n.match(Te),"invalid name","obj.name",n);let r=t.indexed;null!=r&&(u(e,"parameter cannot be indexed","obj.indexed",t.indexed),r=!!r);let s=t.type,i=s.match(je);if(i){const e=parseInt(i[2]||"-1"),a=tn.from({type:i[1],components:t.components});return new tn(Je,n||"",s,"array",r,null,e,a)}if("tuple"===s||s.startsWith("tuple(")||s.startsWith("(")){const e=null!=t.components?t.components.map((t=>tn.from(t))):null;return new tn(Je,n||"",s,"tuple",r,e,null,null)}return s=ze(t.type),new tn(Je,n||"",s,s,r,null,null,null)}static isParamType(t){return t&&t[Ke]===qe}}class en{type;inputs;constructor(t,e,n){d(t,Je,"Fragment"),s(this,{type:e,inputs:n=Object.freeze(n.slice())})}static from(t){if("string"==typeof t){try{en.from(JSON.parse(t))}catch(t){}return en.from(Ue(t))}if(t instanceof Fe)switch(t.peekKeyword(xe)){case"constructor":return on.from(t);case"error":return sn.from(t);case"event":return an.from(t);case"fallback":case"receive":return ln.from(t);case"function":return cn.from(t);case"struct":return un.from(t)}else if("object"==typeof t){switch(t.type){case"constructor":return on.from(t);case"error":return sn.from(t);case"event":return an.from(t);case"fallback":case"receive":return ln.from(t);case"function":return cn.from(t);case"struct":return un.from(t)}c(!1,`unsupported type: ${t.type}`,"UNSUPPORTED_OPERATION",{operation:"Fragment.from"})}u(!1,"unsupported frgament object","obj",t)}static isConstructor(t){return on.isFragment(t)}static isError(t){return sn.isFragment(t)}static isEvent(t){return an.isFragment(t)}static isFunction(t){return cn.isFragment(t)}static isStruct(t){return un.isFragment(t)}}class nn extends en{name;constructor(t,e,n,r){super(t,e,r),u("string"==typeof n&&n.match(Te),"invalid identifier","name",n),r=Object.freeze(r.slice()),s(this,{name:n})}}function rn(t,e){return"("+e.map((e=>e.format(t))).join("full"===t?", ":",")+")"}class sn extends nn{constructor(t,e,n){super(t,"error",e,n),Object.defineProperty(this,Ke,{value:Ze})}get selector(){return we(this.format("sighash")).substring(0,10)}format(t){if(null==t&&(t="sighash"),"json"===t)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});const e=[];return"sighash"!==t&&e.push("error"),e.push(this.name+rn(t,this.inputs)),e.join(" ")}static from(t){if(sn.isFragment(t))return t;if("string"==typeof t)return sn.from(Ue(t));if(t instanceof Fe){const e=Le("error",t),n=He(t);return Ve(t),new sn(Je,e,n)}return new sn(Je,t.name,t.inputs?t.inputs.map(tn.from):[])}static isFragment(t){return t&&t[Ke]===Ze}}class an extends nn{anonymous;constructor(t,e,n,r){super(t,"event",e,n),Object.defineProperty(this,Ke,{value:Ye}),s(this,{anonymous:r})}get topicHash(){return we(this.format("sighash"))}format(t){if(null==t&&(t="sighash"),"json"===t)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});const e=[];return"sighash"!==t&&e.push("event"),e.push(this.name+rn(t,this.inputs)),"sighash"!==t&&this.anonymous&&e.push("anonymous"),e.join(" ")}static getTopicHash(t,e){return e=(e||[]).map((t=>tn.from(t))),new an(Je,t,e,!1).topicHash}static from(t){if(an.isFragment(t))return t;if("string"==typeof t)try{return an.from(Ue(t))}catch(e){u(!1,"invalid event fragment","obj",t)}else if(t instanceof Fe){const e=Le("event",t),n=He(t,!0),r=!!Me(t,be(["anonymous"])).has("anonymous");return Ve(t),new an(Je,e,n,r)}return new an(Je,t.name,t.inputs?t.inputs.map((t=>tn.from(t,!0))):[],!!t.anonymous)}static isFragment(t){return t&&t[Ke]===Ye}}class on extends en{payable;gas;constructor(t,e,n,r,i){super(t,e,n),Object.defineProperty(this,Ke,{value:_e}),s(this,{payable:r,gas:i})}format(t){if(c(null!=t&&"sighash"!==t,"cannot format a constructor for sighash","UNSUPPORTED_OPERATION",{operation:"format(sighash)"}),"json"===t)return JSON.stringify({type:"constructor",stateMutability:this.payable?"payable":"undefined",payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});const e=[`constructor${rn(t,this.inputs)}`];return this.payable&&e.push("payable"),null!=this.gas&&e.push(`@${this.gas.toString()}`),e.join(" ")}static from(t){if(on.isFragment(t))return t;if("string"==typeof t)try{return on.from(Ue(t))}catch(e){u(!1,"invalid constuctor fragment","obj",t)}else if(t instanceof Fe){Me(t,be(["constructor"]));const e=He(t),n=!!Me(t,Ae).has("payable"),r=Qe(t);return Ve(t),new on(Je,"constructor",e,n,r)}return new on(Je,"constructor",t.inputs?t.inputs.map(tn.from):[],!!t.payable,null!=t.gas?t.gas:null)}static isFragment(t){return t&&t[Ke]===_e}}class ln extends en{payable;constructor(t,e,n){super(t,"fallback",e),Object.defineProperty(this,Ke,{value:We}),s(this,{payable:n})}format(t){const e=0===this.inputs.length?"receive":"fallback";if("json"===t){const t=this.payable?"payable":"nonpayable";return JSON.stringify({type:e,stateMutability:t})}return`${e}()${this.payable?" payable":""}`}static from(t){if(ln.isFragment(t))return t;if("string"==typeof t)try{return ln.from(Ue(t))}catch(e){u(!1,"invalid fallback fragment","obj",t)}else if(t instanceof Fe){const e=t.toString();if(u(t.peekKeyword(be(["fallback","receive"])),"type must be fallback or receive","obj",e),"receive"===t.popKeyword(be(["fallback","receive"]))){const e=He(t);return u(0===e.length,"receive cannot have arguments","obj.inputs",e),Me(t,be(["payable"])),Ve(t),new ln(Je,[],!0)}let n=He(t);n.length?u(1===n.length&&"bytes"===n[0].type,"invalid fallback inputs","obj.inputs",n.map((t=>t.format("minimal"))).join(", ")):n=[tn.from("bytes")];const r=Ge(t);if(u("nonpayable"===r||"payable"===r,"fallback cannot be constants","obj.stateMutability",r),Me(t,be(["returns"])).has("returns")){const e=He(t);u(1===e.length&&"bytes"===e[0].type,"invalid fallback outputs","obj.outputs",e.map((t=>t.format("minimal"))).join(", "))}return Ve(t),new ln(Je,n,"payable"===r)}if("receive"===t.type)return new ln(Je,[],!0);if("fallback"===t.type){const e=[tn.from("bytes")],n="payable"===t.stateMutability;return new ln(Je,e,n)}u(!1,"invalid fallback description","obj",t)}static isFragment(t){return t&&t[Ke]===We}}class cn extends nn{constant;outputs;stateMutability;payable;gas;constructor(t,e,n,r,i,a){super(t,"function",e,r),Object.defineProperty(this,Ke,{value:Xe}),s(this,{constant:"view"===n||"pure"===n,gas:a,outputs:i=Object.freeze(i.slice()),payable:"payable"===n,stateMutability:n})}get selector(){return we(this.format("sighash")).substring(0,10)}format(t){if(null==t&&(t="sighash"),"json"===t)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(t)))),outputs:this.outputs.map((e=>JSON.parse(e.format(t))))});const e=[];return"sighash"!==t&&e.push("function"),e.push(this.name+rn(t,this.inputs)),"sighash"!==t&&("nonpayable"!==this.stateMutability&&e.push(this.stateMutability),this.outputs&&this.outputs.length&&(e.push("returns"),e.push(rn(t,this.outputs))),null!=this.gas&&e.push(`@${this.gas.toString()}`)),e.join(" ")}static getSelector(t,e){return e=(e||[]).map((t=>tn.from(t))),new cn(Je,t,"view",e,[],null).selector}static from(t){if(cn.isFragment(t))return t;if("string"==typeof t)try{return cn.from(Ue(t))}catch(e){u(!1,"invalid function fragment","obj",t)}else if(t instanceof Fe){const e=Le("function",t),n=He(t),r=Ge(t);let s=[];Me(t,be(["returns"])).has("returns")&&(s=He(t));const i=Qe(t);return Ve(t),new cn(Je,e,r,n,s,i)}let e=t.stateMutability;return null==e&&(e="payable","boolean"==typeof t.constant?(e="view",t.constant||(e="payable","boolean"!=typeof t.payable||t.payable||(e="nonpayable"))):"boolean"!=typeof t.payable||t.payable||(e="nonpayable")),new cn(Je,t.name,e,t.inputs?t.inputs.map(tn.from):[],t.outputs?t.outputs.map(tn.from):[],null!=t.gas?t.gas:null)}static isFragment(t){return t&&t[Ke]===Xe}}class un extends nn{constructor(t,e,n){super(t,"struct",e,n),Object.defineProperty(this,Ke,{value:$e})}format(){throw new Error("@TODO")}static from(t){if("string"==typeof t)try{return un.from(Ue(t))}catch(e){u(!1,"invalid struct fragment","obj",t)}else if(t instanceof Fe){const e=Le("struct",t),n=He(t);return Ve(t),new un(Je,e,n)}return new un(Je,t.name,t.inputs?t.inputs.map(tn.from):[])}static isFragment(t){return t&&t[Ke]===$e}}const hn=new Map;hn.set(0,"GENERIC_PANIC"),hn.set(1,"ASSERT_FALSE"),hn.set(17,"OVERFLOW"),hn.set(18,"DIVIDE_BY_ZERO"),hn.set(33,"ENUM_RANGE_ERROR"),hn.set(34,"BAD_STORAGE_DATA"),hn.set(49,"STACK_UNDERFLOW"),hn.set(50,"ARRAY_RANGE_ERROR"),hn.set(65,"OUT_OF_MEMORY"),hn.set(81,"UNINITIALIZED_FUNCTION_CALL");const fn=new RegExp(/^bytes([0-9]*)$/),dn=new RegExp(/^(u?int)([0-9]*)$/);let pn=null,gn=1024;class mn{#p(t){if(t.isArray())return new ee(this.#p(t.arrayChildren),t.arrayLength,t.name);if(t.isTuple())return new ye(t.components.map((t=>this.#p(t))),t.name);switch(t.baseType){case"address":return new Wt(t.name);case"bool":return new ne(t.name);case"string":return new me(t.name);case"bytes":return new se(t.name);case"":return new oe(t.name)}let e=t.type.match(dn);if(e){let n=parseInt(e[2]||"256");return u(0!==n&&n<=256&&n%8==0,"invalid "+e[1]+" bit length","param",t),new he(n/8,"int"===e[1],t.name)}if(e=t.type.match(fn),e){let n=parseInt(e[1]);return u(0!==n&&n<=32,"invalid bytes length","param",t),new ie(n,t.name)}u(!1,"invalid type","type",t.type)}getDefaultValue(t){const e=t.map((t=>this.#p(tn.from(t))));return new ye(e,"_").defaultValue()}encode(t,e){h(e.length,t.length,"types/values length mismatch");const n=t.map((t=>this.#p(tn.from(t)))),r=new ye(n,"_"),s=new X;return r.encode(s,e),s.data}decode(t,e,n){const r=t.map((t=>this.#p(tn.from(t))));return new ye(r,"_").decode(new $(e,n,gn))}static _setDefaultMaxInflation(t){u("number"==typeof t&&Number.isInteger(t),"invalid defaultMaxInflation factor","value",t),gn=t}static defaultAbiCoder(){return null==pn&&(pn=new mn),pn}static getBuiltinCallException(t,e,n){return function(t,e,n,r){let s="missing revert data",i=null,a=null;if(n){s="execution reverted";const t=g(n);if(n=A(n),0===t.length)s+=" (no data present; likely require(false) occurred",i="require(false)";else if(t.length%32!=4)s+=" (could not decode reason; invalid data length)";else if("0x08c379a0"===A(t.slice(0,4)))try{i=r.decode(["string"],t.slice(4))[0],a={signature:"Error(string)",name:"Error",args:[i]},s+=`: ${JSON.stringify(i)}`}catch(t){s+=" (could not decode reason; invalid string data)"}else if("0x4e487b71"===A(t.slice(0,4)))try{const e=Number(r.decode(["uint256"],t.slice(4))[0]);a={signature:"Panic(uint256)",name:"Panic",args:[e]},i=`Panic due to ${hn.get(e)||"UNKNOWN"}(${e})`,s+=`: ${i}`}catch(t){s+=" (could not decode panic code)"}else s+=" (unknown custom error)"}const o={to:e.to?Jt(e.to):null,data:e.data||"0x"};return e.from&&(o.from=Jt(e.from)),l(s,"CALL_EXCEPTION",{action:t,data:n,reason:i,transaction:o,invocation:null,revert:a})}(t,e,n,mn.defaultAbiCoder())}}function yn(t){return t&&"function"==typeof t.getAddress}async function wn(t,e){const n=await e;return null!=n&&"0x0000000000000000000000000000000000000000"!==n||(c("string"!=typeof t,"unconfigured name","UNCONFIGURED_NAME",{value:t}),u(!1,"invalid AddressLike value; did not resolve to a value address","target",t)),Jt(n)}function bn(t,e){return"string"==typeof t?t.match(/^0x[0-9a-f]{40}$/i)?Jt(t):(c(null!=e,"ENS resolution requires a provider","UNSUPPORTED_OPERATION",{operation:"resolveName"}),wn(t,e.resolveName(t))):yn(t)?wn(t,t.getAddress()):t&&"function"==typeof t.then?wn(t,t):void u(!1,"unsupported addressable value","target",t)}const An=new Uint8Array(32);An.fill(0);const vn=BigInt(-1),En=BigInt(0),kn=BigInt(1),xn=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),Pn=L(kn,32),Nn=L(En,32),Bn={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},In=["name","version","chainId","verifyingContract","salt"];function Cn(t){return function(e){return u("string"==typeof e,`invalid domain value for ${JSON.stringify(t)}`,`domain.${t}`,e),e}}const On={name:Cn("name"),version:Cn("version"),chainId:function(t){const e=T(t,"domain.chainId");return u(e>=0,"invalid chain ID","domain.chainId",t),Number.isSafeInteger(e)?Number(e):G(e)},verifyingContract:function(t){try{return Jt(t).toLowerCase()}catch(t){}u(!1,'invalid domain value "verifyingContract"',"domain.verifyingContract",t)},salt:function(t){const e=g(t,"domain.salt");return u(32===e.length,'invalid domain value "salt"',"domain.salt",t),A(e)}};function Rn(t){{const e=t.match(/^(u?)int(\d+)$/);if(e){const n=""===e[1],r=parseInt(e[2]);u(r%8==0&&0!==r&&r<=256&&e[2]===String(r),"invalid numeric width","type",t);const s=R(xn,n?r-1:r),i=n?(s+kn)*vn:En;return function(e){const r=T(e,"value");return u(r>=i&&r<=s,`value out-of-bounds for ${t}`,"value",r),L(n?O(r,256):r,32)}}}{const e=t.match(/^bytes(\d+)$/);if(e){const n=parseInt(e[1]);return u(0!==n&&n<=32&&e[1]===String(n),"invalid bytes width","type",t),function(e){return u(g(e).length===n,`invalid length for ${t}`,"value",e),function(t){const e=g(t),n=e.length%32;return n?v([e,An.slice(n)]):A(e)}(e)}}}switch(t){case"address":return function(t){return P(Jt(t),32)};case"bool":return function(t){return t?Pn:Nn};case"bytes":return function(t){return Gt(t)};case"string":return function(t){return we(t)}}return null}function Tn(t,e){return`${t}(${e.map((({name:t,type:e})=>e+" "+t)).join(",")})`}function Sn(t){const e=t.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);return e?{base:e[1],index:e[2]+e[4],array:{base:e[1],prefix:e[1]+e[2],count:e[5]?parseInt(e[5]):-1}}:{base:t}}class Fn{primaryType;#g;get types(){return JSON.parse(this.#g)}#m;#y;constructor(t){this.#m=new Map,this.#y=new Map;const e=new Map,n=new Map,r=new Map,i={};Object.keys(t).forEach((s=>{i[s]=t[s].map((({name:e,type:n})=>{let{base:r,index:s}=Sn(n);return"int"!==r||t.int||(r="int256"),"uint"!==r||t.uint||(r="uint256"),{name:e,type:r+(s||"")}})),e.set(s,new Set),n.set(s,[]),r.set(s,new Set)})),this.#g=JSON.stringify(i);for(const r in i){const s=new Set;for(const a of i[r]){u(!s.has(a.name),`duplicate variable name ${JSON.stringify(a.name)} in ${JSON.stringify(r)}`,"types",t),s.add(a.name);const i=Sn(a.type).base;u(i!==r,`circular type reference to ${JSON.stringify(i)}`,"types",t),Rn(i)||(u(n.has(i),`unknown type ${JSON.stringify(i)}`,"types",t),n.get(i).push(r),e.get(r).add(i))}}const a=Array.from(n.keys()).filter((t=>0===n.get(t).length));u(0!==a.length,"missing primary type","types",t),u(1===a.length,`ambiguous primary types or unused types: ${a.map((t=>JSON.stringify(t))).join(", ")}`,"types",t),s(this,{primaryType:a[0]}),function s(i,a){u(!a.has(i),`circular type reference to ${JSON.stringify(i)}`,"types",t),a.add(i);for(const t of e.get(i))if(n.has(t)){s(t,a);for(const e of a)r.get(e).add(t)}a.delete(i)}(this.primaryType,new Set);for(const[t,e]of r){const n=Array.from(e);n.sort(),this.#m.set(t,Tn(t,i[t])+n.map((t=>Tn(t,i[t]))).join(""))}}getEncoder(t){let e=this.#y.get(t);return e||(e=this.#w(t),this.#y.set(t,e)),e}#w(t){{const e=Rn(t);if(e)return e}const e=Sn(t).array;if(e){const t=e.prefix,n=this.getEncoder(t);return r=>{u(-1===e.count||e.count===r.length,`array length mismatch; expected length ${e.count}`,"value",r);let s=r.map(n);return this.#m.has(t)&&(s=s.map(Gt)),Gt(v(s))}}const n=this.types[t];if(n){const e=we(this.#m.get(t));return t=>{const r=n.map((({name:e,type:n})=>{const r=this.getEncoder(n)(t[e]);return this.#m.has(n)?Gt(r):r}));return r.unshift(e),v(r)}}u(!1,`unknown type: ${t}`,"type",t)}encodeType(t){const e=this.#m.get(t);return u(e,`unknown type: ${JSON.stringify(t)}`,"name",t),e}encodeData(t,e){return this.getEncoder(t)(e)}hashStruct(t,e){return Gt(this.encodeData(t,e))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,e,n){if(Rn(t))return n(t,e);const r=Sn(t).array;if(r)return u(-1===r.count||r.count===e.length,`array length mismatch; expected length ${r.count}`,"value",e),e.map((t=>this._visit(r.prefix,t,n)));const s=this.types[t];if(s)return s.reduce(((t,{name:r,type:s})=>(t[r]=this._visit(s,e[r],n),t)),{});u(!1,`unknown type: ${t}`,"type",t)}visit(t,e){return this._visit(this.primaryType,t,e)}static from(t){return new Fn(t)}static getPrimaryType(t){return Fn.from(t).primaryType}static hashStruct(t,e,n){return Fn.from(e).hashStruct(t,n)}static hashDomain(t){const e=[];for(const n in t){if(null==t[n])continue;const r=Bn[n];u(r,`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",t),e.push({name:n,type:r})}return e.sort(((t,e)=>In.indexOf(t.name)-In.indexOf(e.name))),Fn.hashStruct("EIP712Domain",{EIP712Domain:e},t)}static encode(t,e,n){return v(["0x1901",Fn.hashDomain(t),Fn.from(e).hash(n)])}static hash(t,e,n){return Gt(Fn.encode(t,e,n))}static async resolveNames(t,e,n,r){t=Object.assign({},t);for(const e in t)null==t[e]&&delete t[e];const s={};t.verifyingContract&&!y(t.verifyingContract,20)&&(s[t.verifyingContract]="0x");const i=Fn.from(e);i.visit(n,((t,e)=>("address"!==t||y(e,20)||(s[e]="0x"),e)));for(const t in s)s[t]=await r(t);return t.verifyingContract&&s[t.verifyingContract]&&(t.verifyingContract=s[t.verifyingContract]),{domain:t,value:n=i.visit(n,((t,e)=>"address"===t&&s[e]?s[e]:e))}}static getPayload(t,e,n){Fn.hashDomain(t);const r={},s=[];In.forEach((e=>{const n=t[e];null!=n&&(r[e]=On[e](n),s.push({name:e,type:Bn[e]}))}));const i=Fn.from(e);e=i.types;const a=Object.assign({},e);return u(null==a.EIP712Domain,"types must not contain EIP712Domain type","types.EIP712Domain",e),a.EIP712Domain=s,i.encode(n),{types:a,domain:r,primaryType:i.primaryType,message:i.visit(n,((t,e)=>{if(t.match(/^bytes(\d*)/))return A(g(e));if(t.match(/^u?int/))return T(e).toString();switch(t){case"address":return e.toLowerCase();case"bool":return!!e;case"string":return u("string"==typeof e,"invalid string","value",e),e}u(!1,"unsupported type","type",t)}))}}}function Un(t,e){return{address:Jt(t),storageKeys:e.map(((t,e)=>(u(y(t,32),"invalid slot",`storageKeys[${e}]`,t),t.toLowerCase())))}}function Dn(t){if(Array.isArray(t))return t.map(((e,n)=>Array.isArray(e)?(u(2===e.length,"invalid slot set",`value[${n}]`,e),Un(e[0],e[1])):(u(null!=e&&"object"==typeof e,"invalid address-slot set","value",t),Un(e.address,e.storageKeys))));u(null!=t&&"object"==typeof t,"invalid access list","value",t);const e=Object.keys(t).map((e=>{const n=t[e].reduce(((t,e)=>(t[e]=!0,t)),{});return Un(e,Object.keys(n).sort())}));return e.sort(((t,e)=>t.address.localeCompare(e.address))),e}function Ln(t){return async function(t,e){c(null==e||!e.cancelled,"request cancelled before sending","CANCELLED");const n=t.url.split(":")[0].toLowerCase();c("http"===n||"https"===n,`unsupported protocol ${n}`,"UNSUPPORTED_OPERATION",{info:{protocol:n},operation:"request"}),c("https"===n||!t.credentials||t.allowInsecureAuthentication,"insecure authorized connections unsupported","UNSUPPORTED_OPERATION",{operation:"request"});let r=null;const s=new AbortController,i=setTimeout((()=>{r=l("request timeout","TIMEOUT"),s.abort()}),t.timeout);e&&e.addListener((()=>{r=l("request cancelled","CANCELLED"),s.abort()}));const a={method:t.method,headers:new Headers(Array.from(t)),body:t.body||void 0,signal:s.signal};let o;try{o=await fetch(t.url,a)}catch(t){if(clearTimeout(i),r)throw r;throw t}clearTimeout(i);const u={};o.headers.forEach(((t,e)=>{u[e.toLowerCase()]=t}));const h=await o.arrayBuffer(),f=null==h?null:new Uint8Array(h);return{statusCode:o.status,statusMessage:o.statusText,headers:u,body:f}}}Ln();let Mn=Ln();const Gn=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),Hn=new RegExp("^ipfs://(ipfs/)?(.*)$","i");let Qn=!1;async function Vn(t,e){try{const e=t.match(Gn);if(!e)throw new Error("invalid data");return new Yn(200,"OK",{"content-type":e[1]||"text/plain"},e[2]?function(t){t=atob(t);const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return g(e)}(e[3]):pe(e[3].replace(/%([0-9a-f][0-9a-f])/gi,((t,e)=>String.fromCharCode(parseInt(e,16))))))}catch(e){return new Yn(599,"BAD REQUEST (invalid data: URI)",{},null,new Zn(t))}}function jn(t){return async function(e,n){try{const n=e.match(Hn);if(!n)throw new Error("invalid link");return new Zn(`${t}${n[2]}`)}catch(t){return new Yn(599,"BAD REQUEST (invalid IPFS URI)",{},null,new Zn(e))}}}const zn={data:Vn,ipfs:jn("https://gateway.ipfs.io/ipfs/")},Jn=new WeakMap;class Kn{#b;#A;constructor(t){this.#b=[],this.#A=!1,Jn.set(t,(()=>{if(!this.#A){this.#A=!0;for(const t of this.#b)setTimeout((()=>{t()}),0);this.#b=[]}}))}addListener(t){c(!this.#A,"singal already cancelled","UNSUPPORTED_OPERATION",{operation:"fetchCancelSignal.addCancelListener"}),this.#b.push(t)}get cancelled(){return this.#A}checkSignal(){c(!this.cancelled,"cancelled","CANCELLED",{})}}function qn(t){if(null==t)throw new Error("missing signal; should not happen");return t.checkSignal(),t}class Zn{#v;#E;#k;#x;#P;#N;#B;#I;#C;#O;#R;#T;#S;#F;#U;get url(){return this.#N}set url(t){this.#N=String(t)}get body(){return null==this.#B?null:new Uint8Array(this.#B)}set body(t){if(null==t)this.#B=void 0,this.#I=void 0;else if("string"==typeof t)this.#B=pe(t),this.#I="text/plain";else if(t instanceof Uint8Array)this.#B=t,this.#I="application/octet-stream";else{if("object"!=typeof t)throw new Error("invalid body");this.#B=pe(JSON.stringify(t)),this.#I="application/json"}}hasBody(){return null!=this.#B}get method(){return this.#x?this.#x:this.hasBody()?"POST":"GET"}set method(t){null==t&&(t=""),this.#x=String(t).toUpperCase()}get headers(){const t=Object.assign({},this.#k);return this.#C&&(t.authorization=`Basic ${function(t){const e=g(t);let n="";for(let t=0;t<e.length;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(pe(this.#C))}`),this.allowGzip&&(t["accept-encoding"]="gzip"),null==t["content-type"]&&this.#I&&(t["content-type"]=this.#I),this.body&&(t["content-length"]=String(this.body.length)),t}getHeader(t){return this.headers[t.toLowerCase()]}setHeader(t,e){this.#k[String(t).toLowerCase()]=String(e)}clearHeaders(){this.#k={}}[Symbol.iterator](){const t=this.headers,e=Object.keys(t);let n=0;return{next:()=>{if(n<e.length){const r=e[n++];return{value:[r,t[r]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return this.#C||null}setCredentials(t,e){u(!t.match(/:/),"invalid basic authentication username","username","[REDACTED]"),this.#C=`${t}:${e}`}get allowGzip(){return this.#E}set allowGzip(t){this.#E=!!t}get allowInsecureAuthentication(){return!!this.#v}set allowInsecureAuthentication(t){this.#v=!!t}get timeout(){return this.#P}set timeout(t){u(t>=0,"timeout must be non-zero","timeout",t),this.#P=t}get preflightFunc(){return this.#O||null}set preflightFunc(t){this.#O=t}get processFunc(){return this.#R||null}set processFunc(t){this.#R=t}get retryFunc(){return this.#T||null}set retryFunc(t){this.#T=t}get getUrlFunc(){return this.#U||Mn}set getUrlFunc(t){this.#U=t}constructor(t){this.#N=String(t),this.#v=!1,this.#E=!0,this.#k={},this.#x="",this.#P=3e5,this.#F={slotInterval:250,maxAttempts:12},this.#U=null}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#B?A(this.#B):"null"}>`}setThrottleParams(t){null!=t.slotInterval&&(this.#F.slotInterval=t.slotInterval),null!=t.maxAttempts&&(this.#F.maxAttempts=t.maxAttempts)}async#D(t,e,n,r,s){if(t>=this.#F.maxAttempts)return s.makeServerError("exceeded maximum retry limit");c(_n()<=e,"timeout","TIMEOUT",{operation:"request.send",reason:"timeout",request:r}),n>0&&await function(t){return new Promise((e=>setTimeout(e,t)))}(n);let i=this.clone();const a=(i.url.split(":")[0]||"").toLowerCase();if(a in zn){const t=await zn[a](i.url,qn(r.#S));if(t instanceof Yn){let e=t;if(this.processFunc){qn(r.#S);try{e=await this.processFunc(i,e)}catch(t){null!=t.throttle&&"number"==typeof t.stall||e.makeServerError("error in post-processing function",t).assertOk()}}return e}i=t}this.preflightFunc&&(i=await this.preflightFunc(i));const o=await this.getUrlFunc(i,qn(r.#S));let l=new Yn(o.statusCode,o.statusMessage,o.headers,o.body,r);if(301===l.statusCode||302===l.statusCode){try{const n=l.headers.location||"";return i.redirect(n).#D(t+1,e,0,r,l)}catch(t){}return l}if(429===l.statusCode&&(null==this.retryFunc||await this.retryFunc(i,l,t))){const n=l.headers["retry-after"];let s=this.#F.slotInterval*Math.trunc(Math.random()*Math.pow(2,t));return"string"==typeof n&&n.match(/^[1-9][0-9]*$/)&&(s=parseInt(n)),i.clone().#D(t+1,e,s,r,l)}if(this.processFunc){qn(r.#S);try{l=await this.processFunc(i,l)}catch(n){null!=n.throttle&&"number"==typeof n.stall||l.makeServerError("error in post-processing function",n).assertOk();let s=this.#F.slotInterval*Math.trunc(Math.random()*Math.pow(2,t));return n.stall>=0&&(s=n.stall),i.clone().#D(t+1,e,s,r,l)}}return l}send(){return c(null==this.#S,"request already sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.send"}),this.#S=new Kn(this),this.#D(0,_n()+this.timeout,0,this,new Yn(0,"",{},null,this))}cancel(){c(null!=this.#S,"request has not been sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.cancel"});const t=Jn.get(this);if(!t)throw new Error("missing signal; should not happen");t()}redirect(t){const e=this.url.split(":")[0].toLowerCase(),n=t.split(":")[0].toLowerCase();c("GET"===this.method&&("https"!==e||"http"!==n)&&t.match(/^https?:/),"unsupported redirect","UNSUPPORTED_OPERATION",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(t)})`});const r=new Zn(t);return r.method="GET",r.allowGzip=this.allowGzip,r.timeout=this.timeout,r.#k=Object.assign({},this.#k),this.#B&&(r.#B=new Uint8Array(this.#B)),r.#I=this.#I,r}clone(){const t=new Zn(this.url);return t.#x=this.#x,this.#B&&(t.#B=this.#B),t.#I=this.#I,t.#k=Object.assign({},this.#k),t.#C=this.#C,this.allowGzip&&(t.allowGzip=!0),t.timeout=this.timeout,this.allowInsecureAuthentication&&(t.allowInsecureAuthentication=!0),t.#O=this.#O,t.#R=this.#R,t.#T=this.#T,t.#F=Object.assign({},this.#F),t.#U=this.#U,t}static lockConfig(){Qn=!0}static getGateway(t){return zn[t.toLowerCase()]||null}static registerGateway(t,e){if("http"===(t=t.toLowerCase())||"https"===t)throw new Error(`cannot intercept ${t}; use registerGetUrl`);if(Qn)throw new Error("gateways locked");zn[t]=e}static registerGetUrl(t){if(Qn)throw new Error("gateways locked");Mn=t}static createGetUrlFunc(t){return Ln()}static createDataGateway(){return Vn}static createIpfsGatewayFunc(t){return jn(t)}}class Yn{#L;#M;#k;#B;#G;#H;toString(){return`<FetchResponse status=${this.statusCode} body=${this.#B?A(this.#B):"null"}>`}get statusCode(){return this.#L}get statusMessage(){return this.#M}get headers(){return Object.assign({},this.#k)}get body(){return null==this.#B?null:new Uint8Array(this.#B)}get bodyText(){try{return null==this.#B?"":ge(this.#B)}catch(t){c(!1,"response body is not valid UTF-8 data","UNSUPPORTED_OPERATION",{operation:"bodyText",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch(t){c(!1,"response body is not valid JSON","UNSUPPORTED_OPERATION",{operation:"bodyJson",info:{response:this}})}}[Symbol.iterator](){const t=this.headers,e=Object.keys(t);let n=0;return{next:()=>{if(n<e.length){const r=e[n++];return{value:[r,t[r]],done:!1}}return{value:void 0,done:!0}}}}constructor(t,e,n,r,s){this.#L=t,this.#M=e,this.#k=Object.keys(n).reduce(((t,e)=>(t[e.toLowerCase()]=String(n[e]),t)),{}),this.#B=null==r?null:new Uint8Array(r),this.#G=s||null,this.#H={message:""}}makeServerError(t,e){let n;n=t?`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${t})`:`CLIENT ESCALATED SERVER ERROR (${t=`${this.statusCode} ${this.statusMessage}`})`;const r=new Yn(599,n,this.headers,this.body,this.#G||void 0);return r.#H={message:t,error:e},r}throwThrottleError(t,e){null==e?e=-1:u(Number.isInteger(e)&&e>=0,"invalid stall timeout","stall",e);const n=new Error(t||"throttling requests");throw s(n,{stall:e,throttle:!0}),n}getHeader(t){return this.headers[t.toLowerCase()]}hasBody(){return null!=this.#B}get request(){return this.#G}ok(){return""===this.#H.message&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:t,error:e}=this.#H;""===t&&(t=`server response ${this.statusCode} ${this.statusMessage}`);let n=null;this.request&&(n=this.request.url);let r=null;try{this.#B&&(r=ge(this.#B))}catch(t){}c(!1,t,"SERVER_ERROR",{request:this.request||"unknown request",response:this,error:e,info:{requestUrl:n,responseBody:r,responseStatus:`${this.statusCode} ${this.statusMessage}`}})}}function _n(){return(new Date).getTime()}const Wn="0x0000000000000000000000000000000000000000";class Xn{fragment;name;signature;topic;args;constructor(t,e,n){const r=t.name,i=t.format();s(this,{fragment:t,name:r,signature:i,topic:e,args:n})}}class $n{fragment;name;args;signature;selector;value;constructor(t,e,n,r){const i=t.name,a=t.format();s(this,{fragment:t,name:i,args:n,signature:a,selector:e,value:r})}}class tr{fragment;name;args;signature;selector;constructor(t,e,n){const r=t.name,i=t.format();s(this,{fragment:t,name:r,args:n,signature:i,selector:e})}}class er{hash;_isIndexed;static isIndexed(t){return!(!t||!t._isIndexed)}constructor(t){s(this,{hash:t,_isIndexed:!0})}}const nr={0:"generic panic",1:"assert(false)",17:"arithmetic overflow",18:"division or modulo by zero",33:"enum overflow",34:"invalid encoded storage byte array accessed",49:"out-of-bounds array access; popping on an empty array",50:"out-of-bounds access of an array or bytesN",65:"out of memory",81:"uninitialized function"},rr={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:t=>`reverted with reason string ${JSON.stringify(t)}`},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"],reason:t=>{let e="unknown panic code";return t>=0&&t<=255&&nr[t.toString()]&&(e=nr[t.toString()]),`reverted with panic code 0x${t.toString(16)} (${e})`}}};class sr{fragments;deploy;fallback;receive;#Q;#V;#j;#z;constructor(t){let e=[];e="string"==typeof t?JSON.parse(t):t,this.#j=new Map,this.#Q=new Map,this.#V=new Map;const n=[];for(const t of e)try{n.push(en.from(t))}catch(e){console.log(`[Warning] Invalid Fragment ${JSON.stringify(t)}:`,e.message)}s(this,{fragments:Object.freeze(n)});let r=null,i=!1;this.#z=this.getAbiCoder(),this.fragments.forEach(((t,e)=>{let n;switch(t.type){case"constructor":return this.deploy?void console.log("duplicate definition - constructor"):void s(this,{deploy:t});case"fallback":return void(0===t.inputs.length?i=!0:(u(!r||t.payable!==r.payable,"conflicting fallback fragments",`fragments[${e}]`,t),r=t,i=r.payable));case"function":n=this.#j;break;case"event":n=this.#V;break;case"error":n=this.#Q;break;default:return}const a=t.format();n.has(a)||n.set(a,t)})),this.deploy||s(this,{deploy:on.from("constructor()")}),s(this,{fallback:r,receive:i})}format(t){const e=t?"minimal":"full";return this.fragments.map((t=>t.format(e)))}formatJson(){const t=this.fragments.map((t=>t.format("json")));return JSON.stringify(t.map((t=>JSON.parse(t))))}getAbiCoder(){return mn.defaultAbiCoder()}#J(t,e,n){if(y(t)){const e=t.toLowerCase();for(const t of this.#j.values())if(e===t.selector)return t;return null}if(-1===t.indexOf("(")){const r=[];for(const[e,n]of this.#j)e.split("(")[0]===t&&r.push(n);if(e){const t=e.length>0?e[e.length-1]:null;let n=e.length,s=!0;_t.isTyped(t)&&"overrides"===t.type&&(s=!1,n--);for(let t=r.length-1;t>=0;t--){const e=r[t].inputs.length;e===n||s&&e===n-1||r.splice(t,1)}for(let t=r.length-1;t>=0;t--){const n=r[t].inputs;for(let s=0;s<e.length;s++)if(_t.isTyped(e[s])){if(s>=n.length){if("overrides"===e[s].type)continue;r.splice(t,1);break}if(e[s].type!==n[s].baseType){r.splice(t,1);break}}}}if(1===r.length&&e&&e.length!==r[0].inputs.length){const t=e[e.length-1];(null==t||Array.isArray(t)||"object"!=typeof t)&&r.splice(0,1)}return 0===r.length?null:(r.length>1&&n&&u(!1,`ambiguous function description (i.e. matches ${r.map((t=>JSON.stringify(t.format()))).join(", ")})`,"key",t),r[0])}return this.#j.get(cn.from(t).format())||null}getFunctionName(t){const e=this.#J(t,null,!1);return u(e,"no matching function","key",t),e.name}hasFunction(t){return!!this.#J(t,null,!1)}getFunction(t,e){return this.#J(t,e||null,!0)}forEachFunction(t){const e=Array.from(this.#j.keys());e.sort(((t,e)=>t.localeCompare(e)));for(let n=0;n<e.length;n++){const r=e[n];t(this.#j.get(r),n)}}#K(t,e,n){if(y(t)){const e=t.toLowerCase();for(const t of this.#V.values())if(e===t.topicHash)return t;return null}if(-1===t.indexOf("(")){const r=[];for(const[e,n]of this.#V)e.split("(")[0]===t&&r.push(n);if(e){for(let t=r.length-1;t>=0;t--)r[t].inputs.length<e.length&&r.splice(t,1);for(let t=r.length-1;t>=0;t--){const n=r[t].inputs;for(let s=0;s<e.length;s++)if(_t.isTyped(e[s])&&e[s].type!==n[s].baseType){r.splice(t,1);break}}}return 0===r.length?null:(r.length>1&&n&&u(!1,`ambiguous event description (i.e. matches ${r.map((t=>JSON.stringify(t.format()))).join(", ")})`,"key",t),r[0])}return this.#V.get(an.from(t).format())||null}getEventName(t){const e=this.#K(t,null,!1);return u(e,"no matching event","key",t),e.name}hasEvent(t){return!!this.#K(t,null,!1)}getEvent(t,e){return this.#K(t,e||null,!0)}forEachEvent(t){const e=Array.from(this.#V.keys());e.sort(((t,e)=>t.localeCompare(e)));for(let n=0;n<e.length;n++){const r=e[n];t(this.#V.get(r),n)}}getError(t,e){if(y(t)){const e=t.toLowerCase();if(rr[e])return sn.from(rr[e].signature);for(const t of this.#Q.values())if(e===t.selector)return t;return null}if(-1===t.indexOf("(")){const e=[];for(const[n,r]of this.#Q)n.split("(")[0]===t&&e.push(r);return 0===e.length?"Error"===t?sn.from("error Error(string)"):"Panic"===t?sn.from("error Panic(uint256)"):null:(e.length>1&&u(!1,`ambiguous error description (i.e. ${e.map((t=>JSON.stringify(t.format()))).join(", ")})`,"name",t),e[0])}if("Error(string)"===(t=sn.from(t).format()))return sn.from("error Error(string)");if("Panic(uint256)"===t)return sn.from("error Panic(uint256)");return this.#Q.get(t)||null}forEachError(t){const e=Array.from(this.#Q.keys());e.sort(((t,e)=>t.localeCompare(e)));for(let n=0;n<e.length;n++){const r=e[n];t(this.#Q.get(r),n)}}_decodeParams(t,e){return this.#z.decode(t,e)}_encodeParams(t,e){return this.#z.encode(t,e)}encodeDeploy(t){return this._encodeParams(this.deploy.inputs,t||[])}decodeErrorResult(t,e){if("string"==typeof t){const e=this.getError(t);u(e,"unknown error","fragment",t),t=e}return u(k(e,0,4)===t.selector,`data signature does not match error ${t.name}.`,"data",e),this._decodeParams(t.inputs,k(e,4))}encodeErrorResult(t,e){if("string"==typeof t){const e=this.getError(t);u(e,"unknown error","fragment",t),t=e}return v([t.selector,this._encodeParams(t.inputs,e||[])])}decodeFunctionData(t,e){if("string"==typeof t){const e=this.getFunction(t);u(e,"unknown function","fragment",t),t=e}return u(k(e,0,4)===t.selector,`data signature does not match function ${t.name}.`,"data",e),this._decodeParams(t.inputs,k(e,4))}encodeFunctionData(t,e){if("string"==typeof t){const e=this.getFunction(t);u(e,"unknown function","fragment",t),t=e}return v([t.selector,this._encodeParams(t.inputs,e||[])])}decodeFunctionResult(t,e){if("string"==typeof t){const e=this.getFunction(t);u(e,"unknown function","fragment",t),t=e}let n="invalid length for result data";const r=m(e);if(r.length%32==0)try{return this.#z.decode(t.outputs,r)}catch(t){n="could not decode result data"}c(!1,n,"BAD_DATA",{value:A(r),info:{method:t.name,signature:t.format()}})}makeError(t,e){const n=g(t,"data"),r=mn.getBuiltinCallException("call",e,n);if(r.message.startsWith("execution reverted (unknown custom error)")){const t=A(n.slice(0,4)),e=this.getError(t);if(e)try{const t=this.#z.decode(e.inputs,n.slice(4));r.revert={name:e.name,signature:e.format(),args:t},r.reason=r.revert.signature,r.message=`execution reverted: ${r.reason}`}catch(t){r.message="execution reverted (coult not decode custom error)"}}const s=this.parseTransaction(e);return s&&(r.invocation={method:s.name,signature:s.signature,args:s.args}),r}encodeFunctionResult(t,e){if("string"==typeof t){const e=this.getFunction(t);u(e,"unknown function","fragment",t),t=e}return A(this.#z.encode(t.outputs,e||[]))}encodeFilterTopics(t,e){if("string"==typeof t){const e=this.getEvent(t);u(e,"unknown event","eventFragment",t),t=e}c(e.length<=t.inputs.length,`too many arguments for ${t.format()}`,"UNEXPECTED_ARGUMENT",{count:e.length,expectedCount:t.inputs.length});const n=[];t.anonymous||n.push(t.topicHash);const r=(t,e)=>"string"===t.type?we(e):"bytes"===t.type?Gt(A(e)):("bool"===t.type&&"boolean"==typeof e?e=e?"0x01":"0x00":t.type.match(/^u?int/)?e=L(e):t.type.match(/^bytes/)?e=x(e,32,!1):"address"===t.type&&this.#z.encode(["address"],[e]),P(A(e),32));for(e.forEach(((e,s)=>{const i=t.inputs[s];i.indexed?null==e?n.push(null):"array"===i.baseType||"tuple"===i.baseType?u(!1,"filtering with tuples or arrays not supported","contract."+i.name,e):Array.isArray(e)?n.push(e.map((t=>r(i,t)))):n.push(r(i,e)):u(null==e,"cannot filter non-indexed parameters; must be null","contract."+i.name,e)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(t,e){if("string"==typeof t){const e=this.getEvent(t);u(e,"unknown event","eventFragment",t),t=e}const n=[],r=[],s=[];return t.anonymous||n.push(t.topicHash),u(e.length===t.inputs.length,"event arguments/values mismatch","values",e),t.inputs.forEach(((t,i)=>{const a=e[i];if(t.indexed)if("string"===t.type)n.push(we(a));else if("bytes"===t.type)n.push(Gt(a));else{if("tuple"===t.baseType||"array"===t.baseType)throw new Error("not implemented");n.push(this.#z.encode([t.type],[a]))}else r.push(t),s.push(a)})),{data:this.#z.encode(r,s),topics:n}}decodeEventLog(t,e,n){if("string"==typeof t){const e=this.getEvent(t);u(e,"unknown event","eventFragment",t),t=e}if(null!=n&&!t.anonymous){const e=t.topicHash;u(y(n[0],32)&&n[0].toLowerCase()===e,"fragment/topic mismatch","topics[0]",n[0]),n=n.slice(1)}const r=[],s=[],i=[];t.inputs.forEach(((t,e)=>{t.indexed?"string"===t.type||"bytes"===t.type||"tuple"===t.baseType||"array"===t.baseType?(r.push(tn.from({type:"bytes32",name:t.name})),i.push(!0)):(r.push(t),i.push(!1)):(s.push(t),i.push(!1))}));const a=null!=n?this.#z.decode(r,v(n)):null,o=this.#z.decode(s,e,!0),l=[],c=[];let h=0,f=0;return t.inputs.forEach(((t,e)=>{let n=null;if(t.indexed)if(null==a)n=new er(null);else if(i[e])n=new er(a[f++]);else try{n=a[f++]}catch(t){n=t}else try{n=o[h++]}catch(t){n=t}l.push(n),c.push(t.name||null)})),Y.fromItems(l,c)}parseTransaction(t){const e=g(t.data,"tx.data"),n=T(null!=t.value?t.value:0,"tx.value"),r=this.getFunction(A(e.slice(0,4)));if(!r)return null;const s=this.#z.decode(r.inputs,e.slice(4));return new $n(r,r.selector,s,n)}parseCallResult(t){throw new Error("@TODO")}parseLog(t){const e=this.getEvent(t.topics[0]);return!e||e.anonymous?null:new Xn(e,e.topicHash,this.decodeEventLog(e,t.data,t.topics))}parseError(t){const e=A(t),n=this.getError(k(e,0,4));if(!n)return null;const r=this.#z.decode(n.inputs,k(e,4));return new tr(n,n.selector,r)}static from(t){return t instanceof sr?t:"string"==typeof t?new sr(JSON.parse(t)):"function"==typeof t.formatJson?new sr(t.formatJson()):"function"==typeof t.format?new sr(t.format("json")):new sr(t)}}const ir=BigInt(0);function ar(t){return null==t?null:t}function or(t){return null==t?null:t.toString()}class lr{gasPrice;maxFeePerGas;maxPriorityFeePerGas;constructor(t,e,n){s(this,{gasPrice:ar(t),maxFeePerGas:ar(e),maxPriorityFeePerGas:ar(n)})}toJSON(){const{gasPrice:t,maxFeePerGas:e,maxPriorityFeePerGas:n}=this;return{_type:"FeeData",gasPrice:or(t),maxFeePerGas:or(e),maxPriorityFeePerGas:or(n)}}}function cr(t){const e={};t.to&&(e.to=t.to),t.from&&(e.from=t.from),t.data&&(e.data=A(t.data));const n="chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);for(const r of n)r in t&&null!=t[r]&&(e[r]=T(t[r],`request.${r}`));const r="type,nonce".split(/,/);for(const n of r)n in t&&null!=t[n]&&(e[n]=D(t[n],`request.${n}`));return t.accessList&&(e.accessList=Dn(t.accessList)),"blockTag"in t&&(e.blockTag=t.blockTag),"enableCcipRead"in t&&(e.enableCcipRead=!!t.enableCcipRead),"customData"in t&&(e.customData=t.customData),"blobVersionedHashes"in t&&t.blobVersionedHashes&&(e.blobVersionedHashes=t.blobVersionedHashes.slice()),"kzg"in t&&(e.kzg=t.kzg),"blobs"in t&&t.blobs&&(e.blobs=t.blobs.map((t=>w(t)?A(t):Object.assign({},t)))),e}class ur{provider;number;hash;timestamp;parentHash;parentBeaconBlockRoot;nonce;difficulty;gasLimit;gasUsed;stateRoot;receiptsRoot;blobGasUsed;excessBlobGas;miner;prevRandao;extraData;baseFeePerGas;#q;constructor(t,e){this.#q=t.transactions.map((t=>"string"!=typeof t?new dr(t,e):t)),s(this,{provider:e,hash:ar(t.hash),number:t.number,timestamp:t.timestamp,parentHash:t.parentHash,parentBeaconBlockRoot:t.parentBeaconBlockRoot,nonce:t.nonce,difficulty:t.difficulty,gasLimit:t.gasLimit,gasUsed:t.gasUsed,blobGasUsed:t.blobGasUsed,excessBlobGas:t.excessBlobGas,miner:t.miner,prevRandao:ar(t.prevRandao),extraData:t.extraData,baseFeePerGas:ar(t.baseFeePerGas),stateRoot:t.stateRoot,receiptsRoot:t.receiptsRoot})}get transactions(){return this.#q.map((t=>"string"==typeof t?t:t.hash))}get prefetchedTransactions(){const t=this.#q.slice();return 0===t.length?[]:(c("object"==typeof t[0],"transactions were not prefetched with block request","UNSUPPORTED_OPERATION",{operation:"transactionResponses()"}),t)}toJSON(){const{baseFeePerGas:t,difficulty:e,extraData:n,gasLimit:r,gasUsed:s,hash:i,miner:a,prevRandao:o,nonce:l,number:c,parentHash:u,parentBeaconBlockRoot:h,stateRoot:f,receiptsRoot:d,timestamp:p,transactions:g}=this;return{_type:"Block",baseFeePerGas:or(t),difficulty:or(e),extraData:n,gasLimit:or(r),gasUsed:or(s),blobGasUsed:or(this.blobGasUsed),excessBlobGas:or(this.excessBlobGas),hash:i,miner:a,prevRandao:o,nonce:l,number:c,parentHash:u,timestamp:p,parentBeaconBlockRoot:h,stateRoot:f,receiptsRoot:d,transactions:g}}[Symbol.iterator](){let t=0;const e=this.transactions;return{next:()=>t<this.length?{value:e[t++],done:!1}:{value:void 0,done:!0}}}get length(){return this.#q.length}get date(){return null==this.timestamp?null:new Date(1e3*this.timestamp)}async getTransaction(t){let e;if("number"==typeof t)e=this.#q[t];else{const n=t.toLowerCase();for(const t of this.#q){if("string"==typeof t){if(t!==n)continue;e=t;break}if(t.hash!==n){e=t;break}}}if(null==e)throw new Error("no such tx");return"string"==typeof e?await this.provider.getTransaction(e):e}getPrefetchedTransaction(t){const e=this.prefetchedTransactions;if("number"==typeof t)return e[t];t=t.toLowerCase();for(const n of e)if(n.hash===t)return n;u(!1,"no matching transaction","indexOrHash",t)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error("");return{orphan:"drop-block",hash:this.hash,number:this.number}}}class hr{provider;transactionHash;blockHash;blockNumber;removed;address;data;topics;index;transactionIndex;constructor(t,e){this.provider=e;const n=Object.freeze(t.topics.slice());s(this,{transactionHash:t.transactionHash,blockHash:t.blockHash,blockNumber:t.blockNumber,removed:t.removed,address:t.address,data:t.data,topics:n,index:t.index,transactionIndex:t.transactionIndex})}toJSON(){const{address:t,blockHash:e,blockNumber:n,data:r,index:s,removed:i,topics:a,transactionHash:o,transactionIndex:l}=this;return{_type:"log",address:t,blockHash:e,blockNumber:n,data:r,index:s,removed:i,topics:a,transactionHash:o,transactionIndex:l}}async getBlock(){const t=await this.provider.getBlock(this.blockHash);return c(!!t,"failed to find transaction","UNKNOWN_ERROR",{}),t}async getTransaction(){const t=await this.provider.getTransaction(this.transactionHash);return c(!!t,"failed to find transaction","UNKNOWN_ERROR",{}),t}async getTransactionReceipt(){const t=await this.provider.getTransactionReceipt(this.transactionHash);return c(!!t,"failed to find transaction receipt","UNKNOWN_ERROR",{}),t}removedEvent(){return{orphan:"drop-log",log:{transactionHash:(t=this).transactionHash,blockHash:t.blockHash,blockNumber:t.blockNumber,address:t.address,data:t.data,topics:Object.freeze(t.topics.slice()),index:t.index}};var t}}class fr{provider;to;from;contractAddress;hash;index;blockHash;blockNumber;logsBloom;gasUsed;blobGasUsed;cumulativeGasUsed;gasPrice;blobGasPrice;type;status;root;#Z;constructor(t,e){this.#Z=Object.freeze(t.logs.map((t=>new hr(t,e))));let n=ir;null!=t.effectiveGasPrice?n=t.effectiveGasPrice:null!=t.gasPrice&&(n=t.gasPrice),s(this,{provider:e,to:t.to,from:t.from,contractAddress:t.contractAddress,hash:t.hash,index:t.index,blockHash:t.blockHash,blockNumber:t.blockNumber,logsBloom:t.logsBloom,gasUsed:t.gasUsed,cumulativeGasUsed:t.cumulativeGasUsed,blobGasUsed:t.blobGasUsed,gasPrice:n,blobGasPrice:t.blobGasPrice,type:t.type,status:t.status,root:t.root})}get logs(){return this.#Z}toJSON(){const{to:t,from:e,contractAddress:n,hash:r,index:s,blockHash:i,blockNumber:a,logsBloom:o,logs:l,status:c,root:u}=this;return{_type:"TransactionReceipt",blockHash:i,blockNumber:a,contractAddress:n,cumulativeGasUsed:or(this.cumulativeGasUsed),from:e,gasPrice:or(this.gasPrice),blobGasUsed:or(this.blobGasUsed),blobGasPrice:or(this.blobGasPrice),gasUsed:or(this.gasUsed),hash:r,index:s,logs:l,logsBloom:o,root:u,status:c,to:t}}get length(){return this.logs.length}[Symbol.iterator](){let t=0;return{next:()=>t<this.length?{value:this.logs[t++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const t=await this.provider.getBlock(this.blockHash);if(null==t)throw new Error("TODO");return t}async getTransaction(){const t=await this.provider.getTransaction(this.hash);if(null==t)throw new Error("TODO");return t}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return gr(this)}reorderedEvent(t){return c(!t||t.isMined(),"unmined 'other' transction cannot be orphaned","UNSUPPORTED_OPERATION",{operation:"reorderedEvent(other)"}),pr(this,t)}}class dr{provider;blockNumber;blockHash;index;hash;type;to;from;nonce;gasLimit;gasPrice;maxPriorityFeePerGas;maxFeePerGas;maxFeePerBlobGas;data;value;chainId;signature;accessList;blobVersionedHashes;#Y;constructor(t,e){this.provider=e,this.blockNumber=null!=t.blockNumber?t.blockNumber:null,this.blockHash=null!=t.blockHash?t.blockHash:null,this.hash=t.hash,this.index=t.index,this.type=t.type,this.from=t.from,this.to=t.to||null,this.gasLimit=t.gasLimit,this.nonce=t.nonce,this.data=t.data,this.value=t.value,this.gasPrice=t.gasPrice,this.maxPriorityFeePerGas=null!=t.maxPriorityFeePerGas?t.maxPriorityFeePerGas:null,this.maxFeePerGas=null!=t.maxFeePerGas?t.maxFeePerGas:null,this.maxFeePerBlobGas=null!=t.maxFeePerBlobGas?t.maxFeePerBlobGas:null,this.chainId=t.chainId,this.signature=t.signature,this.accessList=null!=t.accessList?t.accessList:null,this.blobVersionedHashes=null!=t.blobVersionedHashes?t.blobVersionedHashes:null,this.#Y=-1}toJSON(){const{blockNumber:t,blockHash:e,index:n,hash:r,type:s,to:i,from:a,nonce:o,data:l,signature:c,accessList:u,blobVersionedHashes:h}=this;return{_type:"TransactionResponse",accessList:u,blockNumber:t,blockHash:e,blobVersionedHashes:h,chainId:or(this.chainId),data:l,from:a,gasLimit:or(this.gasLimit),gasPrice:or(this.gasPrice),hash:r,maxFeePerGas:or(this.maxFeePerGas),maxPriorityFeePerGas:or(this.maxPriorityFeePerGas),maxFeePerBlobGas:or(this.maxFeePerBlobGas),nonce:o,signature:c,to:i,index:n,type:s,value:or(this.value)}}async getBlock(){let t=this.blockNumber;if(null==t){const e=await this.getTransaction();e&&(t=e.blockNumber)}if(null==t)return null;const e=this.provider.getBlock(t);if(null==e)throw new Error("TODO");return e}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(null==this.blockNumber){const{tx:t,blockNumber:e}=await r({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return null==t||null==t.blockNumber?0:e-t.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(t,e){const n=null==t?1:t,s=null==e?0:e;let i=this.#Y,o=-1,u=-1===i;const h=async()=>{if(u)return null;const{blockNumber:t,nonce:e}=await r({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(e<this.nonce)return void(i=t);if(u)return null;const s=await this.getTransaction();if(!s||null==s.blockNumber)for(-1===o&&(o=i-3,o<this.#Y&&(o=this.#Y));o<=t;){if(u)return null;const e=await this.provider.getBlock(o,!0);if(null==e)return;for(const t of e)if(t===this.hash)return;for(let r=0;r<e.length;r++){const s=await e.getTransaction(r);if(s.from===this.from&&s.nonce===this.nonce){if(u)return null;const e=await this.provider.getTransactionReceipt(s.hash);if(null==e)return;if(t-e.blockNumber+1<n)return;let r="replaced";s.data===this.data&&s.to===this.to&&s.value===this.value?r="repriced":"0x"===s.data&&s.from===s.to&&s.value===ir&&(r="cancelled"),c(!1,"transaction was replaced","TRANSACTION_REPLACED",{cancelled:"replaced"===r||"cancelled"===r,reason:r,replacement:s.replaceableTransaction(i),hash:s.hash,receipt:e})}}o++}},f=t=>{if(null==t||0!==t.status)return t;c(!1,"transaction execution reverted","CALL_EXCEPTION",{action:"sendTransaction",data:null,reason:null,invocation:null,revert:null,transaction:{to:t.to,from:t.from,data:""},receipt:t})},d=await this.provider.getTransactionReceipt(this.hash);if(0===n)return f(d);if(d){if(await d.confirmations()>=n)return f(d)}else if(await h(),0===n)return null;const p=new Promise(((t,e)=>{const r=[],o=()=>{r.forEach((t=>t()))};if(r.push((()=>{u=!0})),s>0){const t=setTimeout((()=>{o(),e(l("wait for transaction timeout","TIMEOUT"))}),s);r.push((()=>{clearTimeout(t)}))}const c=async r=>{if(await r.confirmations()>=n){o();try{t(f(r))}catch(t){e(t)}}};if(r.push((()=>{this.provider.off(this.hash,c)})),this.provider.on(this.hash,c),i>=0){const t=async()=>{try{await h()}catch(t){if(a(t,"TRANSACTION_REPLACED"))return o(),void e(t)}u||this.provider.once("block",t)};r.push((()=>{this.provider.off("block",t)})),this.provider.once("block",t)}}));return await p}isMined(){return null!=this.blockHash}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}removedEvent(){return c(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),gr(this)}reorderedEvent(t){return c(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),c(!t||t.isMined(),"unmined 'other' transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),pr(this,t)}replaceableTransaction(t){u(Number.isInteger(t)&&t>=0,"invalid startBlock","startBlock",t);const e=new dr(this,this.provider);return e.#Y=t,e}}function pr(t,e){return{orphan:"reorder-transaction",tx:t,other:e}}function gr(t){return{orphan:"drop-transaction",tx:t}}class mr{filter;emitter;#_;constructor(t,e,n){this.#_=e,s(this,{emitter:t,filter:n})}async removeListener(){null!=this.#_&&await this.emitter.off(this.filter,this.#_)}}class yr extends hr{interface;fragment;args;constructor(t,e,n){super(t,t.provider),s(this,{args:e.decodeEventLog(n,t.data,t.topics),fragment:n,interface:e})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class wr extends hr{error;constructor(t,e){super(t,t.provider),s(this,{error:e})}}class br extends fr{#W;constructor(t,e,n){super(n,e),this.#W=t}get logs(){return super.logs.map((t=>{const e=t.topics.length?this.#W.getEvent(t.topics[0]):null;if(e)try{return new yr(t,this.#W,e)}catch(e){return new wr(t,e)}return t}))}}class Ar extends dr{#W;constructor(t,e,n){super(n,e),this.#W=t}async wait(t,e){const n=await super.wait(t,e);return null==n?null:new br(this.#W,this.provider,n)}}class vr extends mr{log;constructor(t,e,n,r){super(t,e,n),s(this,{log:r})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class Er extends vr{constructor(t,e,n,r,i){super(t,e,n,new yr(i,t.interface,r)),s(this,{args:t.interface.decodeEventLog(r,this.log.data,this.log.topics),fragment:r})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const kr=BigInt(0);function xr(t){return t&&"function"==typeof t.call}function Pr(t){return t&&"function"==typeof t.estimateGas}function Nr(t){return t&&"function"==typeof t.resolveName}function Br(t){return t&&"function"==typeof t.sendTransaction}function Ir(t){if(null!=t){if(Nr(t))return t;if(t.provider)return t.provider}}class Cr{#X;fragment;constructor(t,e,n){if(s(this,{fragment:e}),e.inputs.length<n.length)throw new Error("too many arguments");const r=Or(t.runner,"resolveName"),i=Nr(r)?r:null;this.#X=async function(){const r=await Promise.all(e.inputs.map(((t,e)=>null==n[e]?null:t.walkAsync(n[e],((t,e)=>"address"===t?Array.isArray(e)?Promise.all(e.map((t=>bn(t,i)))):bn(e,i):e)))));return t.interface.encodeFilterTopics(e,r)}()}getTopicFilter(){return this.#X}}function Or(t,e){return null==t?null:"function"==typeof t[e]?t:t.provider&&"function"==typeof t.provider[e]?t.provider:null}function Rr(t){return null==t?null:t.provider||null}async function Tr(t,e){const n=_t.dereference(t,"overrides");u("object"==typeof n,"invalid overrides parameter","overrides",t);const r=cr(n);return u(null==r.to||(e||[]).indexOf("to")>=0,"cannot override to","overrides.to",r.to),u(null==r.data||(e||[]).indexOf("data")>=0,"cannot override data","overrides.data",r.data),r.from&&(r.from=r.from),r}function Sr(t){const e=async function(e){const n=await Tr(e,["data"]);n.to=await t.getAddress(),n.from&&(n.from=await bn(n.from,Ir(t.runner)));const r=t.interface,s=T(n.value||kr,"overrides.value")===kr,i="0x"===(n.data||"0x");return!r.fallback||r.fallback.payable||!r.receive||i||s||u(!1,"cannot send data to receive or send value to non-payable fallback","overrides",e),u(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),u(r.receive||r.fallback&&r.fallback.payable||s,"cannot send value to non-payable fallback","overrides.value",n.value),u(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),n},n=async function(n){const r=t.runner;c(Br(r),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await r.sendTransaction(await e(n)),i=Rr(t.runner);return new Ar(t.interface,i,s)},r=async t=>await n(t);return s(r,{_contract:t,estimateGas:async function(n){const r=Or(t.runner,"estimateGas");return c(Pr(r),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await r.estimateGas(await e(n))},populateTransaction:e,send:n,staticCall:async function(n){const r=Or(t.runner,"call");c(xr(r),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const s=await e(n);try{return await r.call(s)}catch(e){if(o(e)&&e.data)throw t.interface.makeError(e.data,s);throw e}}}),r}const Fr=Symbol.for("_ethersInternal_contract"),Ur=new WeakMap;function Dr(t){return Ur.get(t[Fr])}async function Lr(t,e){let n,r=null;if(Array.isArray(e)){const r=function(e){if(y(e,32))return e;const n=t.interface.getEvent(e);return u(n,"unknown fragment","name",e),n.topicHash};n=e.map((t=>null==t?null:Array.isArray(t)?t.map(r):r(t)))}else"*"===e?n=[null]:"string"==typeof e?y(e,32)?n=[e]:(r=t.interface.getEvent(e),u(r,"unknown fragment","event",e),n=[r.topicHash]):(s=e)&&"object"==typeof s&&"getTopicFilter"in s&&"function"==typeof s.getTopicFilter&&s.fragment?n=await e.getTopicFilter():"fragment"in e?(r=e.fragment,n=[r.topicHash]):u(!1,"unknown event name","event",e);var s;return n=n.map((t=>{if(null==t)return null;if(Array.isArray(t)){const e=Array.from(new Set(t.map((t=>t.toLowerCase()))).values());return 1===e.length?e[0]:(e.sort(),e)}return t.toLowerCase()})),{fragment:r,tag:n.map((t=>null==t?"null":Array.isArray(t)?t.join("|"):t)).join("&"),topics:n}}async function Mr(t,e){const{subs:n}=Dr(t);return n.get((await Lr(t,e)).tag)||null}async function Gr(t,e,n){const r=Rr(t.runner);c(r,"contract runner does not support subscribing","UNSUPPORTED_OPERATION",{operation:e});const{fragment:s,tag:i,topics:a}=await Lr(t,n),{addr:o,subs:l}=Dr(t);let u=l.get(i);if(!u){const e={address:o||t,topics:a},c=e=>{let r=s;if(null==r)try{r=t.interface.getEvent(e.topics[0])}catch(t){}if(r){const i=r,a=s?t.interface.decodeEventLog(s,e.data,e.topics):[];Qr(t,n,a,(r=>new Er(t,r,n,i,e)))}else Qr(t,n,[],(r=>new vr(t,r,n,e)))};let h=[];u={tag:i,listeners:[],start:()=>{h.length||h.push(r.on(e,c))},stop:async()=>{if(0==h.length)return;let t=h;h=[],await Promise.all(t),r.off(e,c)}},l.set(i,u)}return u}let Hr=Promise.resolve();async function Qr(t,e,n,r){try{await Hr}catch(t){}const s=async function(t,e,n,r){await Hr;const s=await Mr(t,e);if(!s)return!1;const i=s.listeners.length;return s.listeners=s.listeners.filter((({listener:e,once:s})=>{const i=Array.from(n);r&&i.push(r(s?null:e));try{e.call(t,...i)}catch(t){}return!s})),0===s.listeners.length&&(s.stop(),Dr(t).subs.delete(s.tag)),i>0}(t,e,n,r);return Hr=s,await s}const Vr=["then"];class jr{target;interface;runner;filters;[Fr];fallback;constructor(t,e,n,r){u("string"==typeof t||yn(t),"invalid value for Contract target","target",t),null==n&&(n=null);const i=sr.from(e);let o;s(this,{target:t,runner:n,interface:i}),Object.defineProperty(this,Fr,{value:{}});let c=null,h=null;if(r){const t=Rr(n);h=new Ar(this.interface,t,r)}let f=new Map;if("string"==typeof t)if(y(t))c=t,o=Promise.resolve(t);else{const e=Or(n,"resolveName");if(!Nr(e))throw l("contract runner does not support name resolution","UNSUPPORTED_OPERATION",{operation:"resolveName"});o=e.resolveName(t).then((e=>{if(null==e)throw l("an ENS name used for a contract target must be correctly configured","UNCONFIGURED_NAME",{value:t});return Dr(this).addr=e,e}))}else o=t.getAddress().then((t=>{if(null==t)throw new Error("TODO");return Dr(this).addr=t,t}));var d;d={addrPromise:o,addr:c,deployTx:h,subs:f},Ur.set(this[Fr],d);const p=new Proxy({},{get:(t,e,n)=>{if("symbol"==typeof e||Vr.indexOf(e)>=0)return Reflect.get(t,e,n);try{return this.getEvent(e)}catch(t){if(!a(t,"INVALID_ARGUMENT")||"key"!==t.argument)throw t}},has:(t,e)=>Vr.indexOf(e)>=0?Reflect.has(t,e):Reflect.has(t,e)||this.interface.hasEvent(String(e))});return s(this,{filters:p}),s(this,{fallback:i.receive||i.fallback?Sr(this):null}),new Proxy(this,{get:(t,e,n)=>{if("symbol"==typeof e||e in t||Vr.indexOf(e)>=0)return Reflect.get(t,e,n);try{return t.getFunction(e)}catch(t){if(!a(t,"INVALID_ARGUMENT")||"key"!==t.argument)throw t}},has:(t,e)=>"symbol"==typeof e||e in t||Vr.indexOf(e)>=0?Reflect.has(t,e):t.interface.hasFunction(e)})}connect(t){return new jr(this.target,this.interface,t)}attach(t){return new jr(t,this.interface,this.runner)}async getAddress(){return await Dr(this).addrPromise}async getDeployedCode(){const t=Rr(this.runner);c(t,"runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"getDeployedCode"});const e=await t.getCode(await this.getAddress());return"0x"===e?null:e}async waitForDeployment(){const t=this.deploymentTransaction();if(t)return await t.wait(),this;if(null!=await this.getDeployedCode())return this;const e=Rr(this.runner);return c(null!=e,"contract runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"waitForDeployment"}),new Promise(((t,n)=>{const r=async()=>{try{if(null!=await this.getDeployedCode())return t(this);e.once("block",r)}catch(t){n(t)}};r()}))}deploymentTransaction(){return Dr(this).deployTx}getFunction(t){return"string"!=typeof t&&(t=t.format()),function(t,e){const n=function(...n){const r=t.interface.getFunction(e,n);return c(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:e,args:n}}),r},i=async function(...e){const s=n(...e);let i={};if(s.inputs.length+1===e.length&&(i=await Tr(e.pop()),i.from&&(i.from=await bn(i.from,Ir(t.runner)))),s.inputs.length!==e.length)throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");const a=await async function(t,e,n){const r=Or(t,"resolveName"),s=Nr(r)?r:null;return await Promise.all(e.map(((t,e)=>t.walkAsync(n[e],((t,e)=>(e=_t.dereference(e,t),"address"===t?bn(e,s):e))))))}(t.runner,s.inputs,e);return Object.assign({},i,await r({to:t.getAddress(),data:t.interface.encodeFunctionData(s,a)}))},a=async function(...t){const e=await u(...t);return 1===e.length?e[0]:e},l=async function(...e){const n=t.runner;c(Br(n),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const r=await n.sendTransaction(await i(...e)),s=Rr(t.runner);return new Ar(t.interface,s,r)},u=async function(...e){const r=Or(t.runner,"call");c(xr(r),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const s=await i(...e);let a="0x";try{a=await r.call(s)}catch(e){if(o(e)&&e.data)throw t.interface.makeError(e.data,s);throw e}const l=n(...e);return t.interface.decodeFunctionResult(l,a)},h=async(...t)=>n(...t).constant?await a(...t):await l(...t);return s(h,{name:t.interface.getFunctionName(e),_contract:t,_key:e,getFragment:n,estimateGas:async function(...e){const n=Or(t.runner,"estimateGas");return c(Pr(n),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await n.estimateGas(await i(...e))},populateTransaction:i,send:l,staticCall:a,staticCallResult:u}),Object.defineProperty(h,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=t.interface.getFunction(e);return c(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:e}}),n}}),h}(this,t)}getEvent(t){return"string"!=typeof t&&(t=t.format()),function(t,e){const n=function(...n){const r=t.interface.getEvent(e,n);return c(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:e,args:n}}),r},r=function(...e){return new Cr(t,n(...e),e)};return s(r,{name:t.interface.getEventName(e),_contract:t,_key:e,getFragment:n}),Object.defineProperty(r,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=t.interface.getEvent(e);return c(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:e}}),n}}),r}(this,t)}async queryTransaction(t){throw new Error("@TODO")}async queryFilter(t,e,n){null==e&&(e=0),null==n&&(n="latest");const{addr:r,addrPromise:s}=Dr(this),i=r||await s,{fragment:a,topics:o}=await Lr(this,t),l={address:i,topics:o,fromBlock:e,toBlock:n},u=Rr(this.runner);return c(u,"contract runner does not have a provider","UNSUPPORTED_OPERATION",{operation:"queryFilter"}),(await u.getLogs(l)).map((t=>{let e=a;if(null==e)try{e=this.interface.getEvent(t.topics[0])}catch(t){}if(e)try{return new yr(t,this.interface,e)}catch(e){return new wr(t,e)}return new hr(t,u)}))}async on(t,e){const n=await Gr(this,"on",t);return n.listeners.push({listener:e,once:!1}),n.start(),this}async once(t,e){const n=await Gr(this,"once",t);return n.listeners.push({listener:e,once:!0}),n.start(),this}async emit(t,...e){return await Qr(this,t,e,null)}async listenerCount(t){if(t){const e=await Mr(this,t);return e?e.listeners.length:0}const{subs:e}=Dr(this);let n=0;for(const{listeners:t}of e.values())n+=t.length;return n}async listeners(t){if(t){const e=await Mr(this,t);return e?e.listeners.map((({listener:t})=>t)):[]}const{subs:e}=Dr(this);let n=[];for(const{listeners:t}of e.values())n=n.concat(t.map((({listener:t})=>t)));return n}async off(t,e){const n=await Mr(this,t);if(!n)return this;if(e){const t=n.listeners.map((({listener:t})=>t)).indexOf(e);t>=0&&n.listeners.splice(t,1)}return null!=e&&0!==n.listeners.length||(n.stop(),Dr(this).subs.delete(n.tag)),this}async removeAllListeners(t){if(t){const e=await Mr(this,t);if(!e)return this;e.stop(),Dr(this).subs.delete(e.tag)}else{const{subs:t}=Dr(this);for(const{tag:e,stop:n}of t.values())n(),t.delete(e)}return this}async addListener(t,e){return await this.on(t,e)}async removeListener(t,e){return await this.off(t,e)}static buildClass(t){return class extends jr{constructor(e,n=null){super(e,t,n)}}}static from(t,e,n){return null==n&&(n=null),new this(t,e,n)}}class zr extends(function(){return jr}()){}const Jr=new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]);function Kr(t){return function(t){let e=0;return()=>t[e++]}(function(t){let e=0;function n(){return t[e++]<<8|t[e++]}let r=n(),s=1,i=[0,1];for(let t=1;t<r;t++)i.push(s+=n());let a=n(),o=e;e+=a;let l=0,c=0;function u(){return 0==l&&(c=c<<8|t[e++],l=8),c>>--l&1}const h=2**31,f=h>>>1,d=f>>1,p=h-1;let g=0;for(let t=0;t<31;t++)g=g<<1|u();let m=[],y=0,w=h;for(;;){let t=Math.floor(((g-y+1)*s-1)/w),e=0,n=r;for(;n-e>1;){let r=e+n>>>1;t<i[r]?n=r:e=r}if(0==e)break;m.push(e);let a=y+Math.floor(w*i[e]/s),o=y+Math.floor(w*i[e+1]/s)-1;for(;!((a^o)&f);)g=g<<1&p|u(),a=a<<1&p,o=o<<1&p|1;for(;a&~o&d;)g=g&f|g<<1&p>>>1|u(),a=a<<1^f,o=(o^f)<<1|f|1;y=a,w=1+o-a}let b=r-4;return m.map((e=>{switch(e-b){case 3:return b+65792+(t[o++]<<16|t[o++]<<8|t[o++]);case 2:return b+256+(t[o++]<<8|t[o++]);case 1:return b+t[o++];default:return e-1}}))}(function(t){let e=[];[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach(((t,n)=>e[t.charCodeAt(0)]=n));let n=t.length,r=new Uint8Array(6*n>>3);for(let s=0,i=0,a=0,o=0;s<n;s++)o=o<<6|e[t.charCodeAt(s)],a+=6,a>=8&&(r[i++]=o>>(a-=8));return r}(t)))}function qr(t){return 1&t?~t>>1:t>>1}function Zr(t,e){let n=Array(t);for(let r=0,s=0;r<t;r++)n[r]=s+=qr(e());return n}function Yr(t,e=0){let n=[];for(;;){let r=t(),s=t();if(!s)break;e+=r;for(let t=0;t<s;t++)n.push(e+t);e+=s+1}return n}function _r(t){return Xr((()=>{let e=Yr(t);if(e.length)return e}))}function Wr(t){let e=[];for(;;){let n=t();if(0==n)break;e.push(ts(n,t))}for(;;){let n=t()-1;if(n<0)break;e.push(es(n,t))}return e.flat()}function Xr(t){let e=[];for(;;){let n=t(e.length);if(!n)break;e.push(n)}return e}function $r(t,e,n){let r=Array(t).fill().map((()=>[]));for(let s=0;s<e;s++)Zr(t,n).forEach(((t,e)=>r[e].push(t)));return r}function ts(t,e){let n=1+e(),r=e(),s=Xr(e);return $r(s.length,1+t,e).flatMap(((t,e)=>{let[i,...a]=t;return Array(s[e]).fill().map(((t,e)=>{let s=e*r;return[i+e*n,a.map((t=>t+s))]}))}))}function es(t,e){return $r(1+e(),1+t,e).map((t=>[t[0],t.slice(1)]))}function ns(t){return`{${function(t){return t.toString(16).toUpperCase().padStart(2,"0")}(t)}}`}function rs(t){let e=t.length;if(e<4096)return String.fromCodePoint(...t);let n=[];for(let r=0;r<e;)n.push(String.fromCodePoint(...t.slice(r,r+=4096)));return n.join("")}function ss(t,e){let n=t.length,r=n-e.length;for(let s=0;0==r&&s<n;s++)r=t[s]-e[s];return r}const is=44032,as=4352,os=4449,ls=4519;function cs(t){return t>>24&255}function us(t){return 16777215&t}let hs,fs,ds,ps;function gs(t){return t>=is&&t<55204}function ms(t,e){if(t>=as&&t<4371&&e>=os&&e<4470)return is+588*(t-as)+28*(e-os);if(gs(t)&&e>ls&&e<4547&&(t-is)%28==0)return t+(e-ls);{let n=ps.get(t);return n&&(n=n.get(e),n)?n:-1}}function ys(t){hs||function(){let t=Kr("AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g");hs=new Map(_r(t).flatMap(((t,e)=>t.map((t=>[t,e+1<<24]))))),fs=new Set(Yr(t)),ds=new Map,ps=new Map;for(let[e,n]of Wr(t)){if(!fs.has(e)&&2==n.length){let[t,r]=n,s=ps.get(t);s||(s=new Map,ps.set(t,s)),s.set(r,e)}ds.set(e,n.reverse())}}();let e=[],n=[],r=!1;function s(t){let n=hs.get(t);n&&(r=!0,t|=n),e.push(t)}for(let r of t)for(;;){if(r<128)e.push(r);else if(gs(r)){let t=r-is,e=t%588/28|0,n=t%28;s(as+(t/588|0)),s(os+e),n>0&&s(ls+n)}else{let t=ds.get(r);t?n.push(...t):s(r)}if(!n.length)break;r=n.pop()}if(r&&e.length>1){let t=cs(e[0]);for(let n=1;n<e.length;n++){let r=cs(e[n]);if(0==r||t<=r){t=r;continue}let s=n-1;for(;;){let n=e[s+1];if(e[s+1]=e[s],e[s]=n,!s)break;if(t=cs(e[--s]),t<=r)break}t=cs(e[n])}}return e}function ws(t){return ys(t).map(us)}function bs(t){return function(t){let e=[],n=[],r=-1,s=0;for(let i of t){let t=cs(i),a=us(i);if(-1==r)0==t?r=a:e.push(a);else if(s>0&&s>=t)0==t?(e.push(r,...n),n.length=0,r=a):n.push(a),s=t;else{let i=ms(r,a);i>=0?r=i:0==s&&0==t?(e.push(r),r=a):(n.push(a),s=t)}}return r>=0&&e.push(r,...n),e}(ys(t))}const As=t=>Array.from(t);function vs(t,e){return t.P.has(e)||t.Q.has(e)}class Es extends Array{get is_emoji(){return!0}}let ks,xs,Ps,Ns,Bs,Is,Cs,Os,Rs,Ts,Ss,Fs;function Us(){if(ks)return;let t=Kr("");const e=()=>Yr(t),n=()=>new Set(e()),r=(t,e)=>e.forEach((e=>t.add(e)));ks=new Map(Wr(t)),xs=n(),Ps=e(),Ns=new Set(e().map((t=>Ps[t]))),Ps=new Set(Ps),Bs=n(),Is=n();let s=_r(t),i=t();const a=()=>{let t=new Set;return e().forEach((e=>r(t,s[e]))),r(t,e()),t};Cs=Xr((e=>{let n=Xr(t).map((t=>t+96));if(n.length){let r=e>=i;return n[0]-=32,n=rs(n),r&&(n=`Restricted[${n}]`),{N:n,P:a(),Q:a(),M:!t(),R:r}}})),Os=n(),Rs=new Map;let o=e().concat(As(Os)).sort(((t,e)=>t-e));o.forEach(((e,n)=>{let r=t(),s=o[n]=r?o[n-r]:{V:[],M:new Map};s.V.push(e),Os.has(e)||Rs.set(e,s)}));for(let{V:t,M:e}of new Set(Rs.values())){let n=[];for(let e of t){let t=Cs.filter((t=>vs(t,e))),s=n.find((({G:e})=>t.some((t=>e.has(t)))));s||(s={G:new Set,V:[]},n.push(s)),s.V.push(e),r(s.G,t)}let s=n.flatMap((t=>As(t.G)));for(let{G:t,V:r}of n){let n=new Set(s.filter((e=>!t.has(e))));for(let t of r)e.set(t,n)}}Ts=new Set;let l=new Set;const c=t=>Ts.has(t)?l.add(t):Ts.add(t);for(let t of Cs){for(let e of t.P)c(e);for(let e of t.Q)c(e)}for(let t of Ts)Rs.has(t)||l.has(t)||Rs.set(t,1);r(Ts,ws(Ts)),Ss=function(t){let e=[],n=Yr(t);return function t({S:n,B:r},s,i){if(!(4&n&&i===s[s.length-1])){2&n&&(i=s[s.length-1]),1&n&&e.push(s);for(let e of r)for(let n of e.Q)t(e,[...s,n],i)}}(function e(r){return{S:t(),B:Xr((()=>{let r=Yr(t).map((t=>n[t]));if(r.length)return e(r)})),Q:r}}([]),[]),e}(t).map((t=>Es.from(t))).sort(ss),Fs=new Map;for(let t of Ss){let e=[Fs];for(let n of t){let t=e.map((t=>{let e=t.get(n);return e||(e=new Map,t.set(n,e)),e}));65039===n?e.push(...t):e=t}for(let n of e)n.V=t}}function Ds(t){return(Gs(t)?"":`${Ls(Ms([t]))} `)+ns(t)}function Ls(t){return`"${t}"‎`}function Ms(t,e=1/0,n=ns){let r=[];var s;s=t[0],Us(),Ps.has(s)&&r.push("◌"),t.length>e&&(e>>=1,t=[...t.slice(0,e),8230,...t.slice(-e)]);let i=0,a=t.length;for(let e=0;e<a;e++){let s=t[e];Gs(s)&&(r.push(rs(t.slice(i,e))),r.push(n(s)),i=e+1)}return r.push(rs(t.slice(i,a))),r.join("")}function Gs(t){return Us(),Bs.has(t)}function Hs(t,e,n){if(!t)return[];Us();let r=0;return t.split(".").map((t=>{let s=function(t){let e=[];for(let n=0,r=t.length;n<r;){let r=t.codePointAt(n);n+=r<65536?1:2,e.push(r)}return e}(t),i={input:s,offset:r};r+=s.length+1;try{let t,r=i.tokens=function(t,e,n){let r=[],s=[];for(t=t.slice().reverse();t.length;){let i=Js(t);if(i)s.length&&(r.push(e(s)),s=[]),r.push(n(i));else{let e=t.pop();if(Ts.has(e))s.push(e);else{let t=ks.get(e);if(t)s.push(...t);else if(!xs.has(e))throw Qs(e)}}}return s.length&&r.push(e(s)),r}(s,e,n),a=r.length;if(!a)throw new Error("empty label");let o=i.output=r.flat();if(function(t){for(let e=t.lastIndexOf(95);e>0;)if(95!==t[--e])throw new Error("underscore allowed only at start")}(o),!(i.emoji=a>1||r[0].is_emoji)&&o.every((t=>t<128)))!function(t){if(t.length>=4&&45==t[2]&&45==t[3])throw new Error(`invalid label extension: "${rs(t.slice(0,4))}"`)}(o),t="ASCII";else{let e=r.flatMap((t=>t.is_emoji?[]:t));if(e.length){if(Ps.has(o[0]))throw js("leading combining mark");for(let t=1;t<a;t++){let e=r[t];if(!e.is_emoji&&Ps.has(e[0]))throw js(`emoji + combining mark: "${rs(r[t-1])} + ${Ms([e[0]])}"`)}!function(t){let e=t[0],n=Jr.get(e);if(n)throw js(`leading ${n}`);let r=t.length,s=-1;for(let i=1;i<r;i++){e=t[i];let r=Jr.get(e);if(r){if(s==i)throw js(`${n} + ${r}`);s=i+1,n=r}}if(s==r)throw js(`trailing ${n}`)}(o);let n=As(new Set(e)),[s]=function(t){let e=Cs;for(let n of t){let t=e.filter((t=>vs(t,n)));if(!t.length)throw Cs.some((t=>vs(t,n)))?Vs(e[0],n):Qs(n);if(e=t,1==t.length)break}return e}(n);!function(t,e){for(let n of e)if(!vs(t,n))throw Vs(t,n);if(t.M){let t=ws(e);for(let e=1,n=t.length;e<n;e++)if(Ns.has(t[e])){let r=e+1;for(let s;r<n&&Ns.has(s=t[r]);r++)for(let n=e;n<r;n++)if(t[n]==s)throw new Error(`duplicate non-spacing marks: ${Ds(s)}`);if(r-e>4)throw new Error(`excessive non-spacing marks: ${Ls(Ms(t.slice(e-1,r)))} (${r-e}/4)`);e=r}}}(s,e),function(t,e){let n,r=[];for(let t of e){let e=Rs.get(t);if(1===e)return;if(e){let r=e.M.get(t);if(n=n?n.filter((t=>r.has(t))):As(r),!n.length)return}else r.push(t)}if(n)for(let e of n)if(r.every((t=>vs(e,t))))throw new Error(`whole-script confusable: ${t.N}/${e.N}`)}(s,n),t=s.N}else t="Emoji"}i.type=t}catch(t){i.error=t}return i}))}function Qs(t){return new Error(`disallowed character: ${Ds(t)}`)}function Vs(t,e){let n=Ds(e),r=Cs.find((t=>t.P.has(e)));return r&&(n=`${r.N} ${n}`),new Error(`illegal mixture: ${t.N} + ${n}`)}function js(t){return new Error(`illegal placement: ${t}`)}function zs(t){return t.filter((t=>65039!=t))}function Js(t,e){let n,r=Fs,s=t.length;for(;s&&(r=r.get(t[--s]),r);){let{V:i}=r;i&&(n=i,e&&e.push(...t.slice(s).reverse()),t.length=s)}return n}const Ks=new Uint8Array(32);function qs(t){return u(0!==t.length,"invalid ENS name; empty component","comp",t),t}function Zs(t){const e=pe(function(t){try{if(0===t.length)throw new Error("empty label");return function(t){return function(t){return t.map((({input:e,error:n,output:r})=>{if(n){let r=n.message;throw new Error(1==t.length?r:`Invalid label ${Ls(Ms(e,63))}: ${r}`)}return rs(r)})).join(".")}(Hs(t,bs,zs))}(t)}catch(e){u(!1,`invalid ENS name (${e.message})`,"name",t)}}(t)),n=[];if(0===t.length)return n;let r=0;for(let t=0;t<e.length;t++)46===e[t]&&(n.push(qs(e.slice(r,t))),r=t+1);return u(r<e.length,"invalid ENS name; empty component","name",t),n.push(qs(e.slice(r))),n}function Ys(t){u("string"==typeof t,"invalid ENS name; not a string","name",t),u(t.length,"invalid ENS name (empty label)","name",t);let e=Ks;const n=Zs(t);for(;n.length;)e=Gt(v([e,Gt(n.pop())]));return A(e)}function _s(t,e){const n=null!=e?e:63;return u(n<=255,"DNS encoded label cannot exceed 255","length",n),A(v(Zs(t).map((e=>{u(e.length<=n,`label ${JSON.stringify(t)} exceeds ${n} bytes`,"name",t);const r=new Uint8Array(e.length+1);return r.set(e,1),r[0]=r.length-1,r}))))+"00"}Ks.fill(0);class Ws extends wt{constructor(t,e,n,r){super(),this.blockLen=t,this.outputLen=e,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=gt(this.buffer)}update(t){nt(this);const{view:e,buffer:n,blockLen:r}=this,s=(t=yt(t)).length;for(let i=0;i<s;){const a=Math.min(r-this.pos,s-i);if(a!==r)n.set(t.subarray(i,i+a),this.pos),this.pos+=a,i+=a,this.pos===r&&(this.process(e,0),this.pos=0);else{const e=gt(t);for(;r<=s-i;i+=r)this.process(e,i)}}return this.length+=t.length,this.roundClean(),this}digestInto(t){nt(this),rt(t,this),this.finished=!0;const{buffer:e,view:n,blockLen:r,isLE:s}=this;let{pos:i}=this;e[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(n,0),i=0);for(let t=i;t<r;t++)e[t]=0;!function(t,e,n,r){if("function"==typeof t.setBigUint64)return t.setBigUint64(e,n,r);const s=BigInt(32),i=BigInt(4294967295),a=Number(n>>s&i),o=Number(n&i),l=r?4:0,c=r?0:4;t.setUint32(e+l,a,r),t.setUint32(e+c,o,r)}(n,r-8,BigInt(8*this.length),s),this.process(n,0);const a=gt(t),o=this.outputLen;if(o%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const l=o/4,c=this.get();if(l>c.length)throw new Error("_sha2: outputLen bigger than state");for(let t=0;t<l;t++)a.setUint32(4*t,c[t],s)}digest(){const{buffer:t,outputLen:e}=this;this.digestInto(t);const n=t.slice(0,e);return this.destroy(),n}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:e,buffer:n,length:r,finished:s,destroyed:i,pos:a}=this;return t.length=r,t.pos=a,t.finished=s,t.destroyed=i,r%e&&t.buffer.set(n),t}}const Xs=(t,e,n)=>t&e^~t&n,$s=(t,e,n)=>t&e^t&n^e&n,ti=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),ei=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),ni=new Uint32Array(64);class ri extends Ws{constructor(){super(64,32,8,!1),this.A=0|ei[0],this.B=0|ei[1],this.C=0|ei[2],this.D=0|ei[3],this.E=0|ei[4],this.F=0|ei[5],this.G=0|ei[6],this.H=0|ei[7]}get(){const{A:t,B:e,C:n,D:r,E:s,F:i,G:a,H:o}=this;return[t,e,n,r,s,i,a,o]}set(t,e,n,r,s,i,a,o){this.A=0|t,this.B=0|e,this.C=0|n,this.D=0|r,this.E=0|s,this.F=0|i,this.G=0|a,this.H=0|o}process(t,e){for(let n=0;n<16;n++,e+=4)ni[n]=t.getUint32(e,!1);for(let t=16;t<64;t++){const e=ni[t-15],n=ni[t-2],r=mt(e,7)^mt(e,18)^e>>>3,s=mt(n,17)^mt(n,19)^n>>>10;ni[t]=s+ni[t-7]+r+ni[t-16]|0}let{A:n,B:r,C:s,D:i,E:a,F:o,G:l,H:c}=this;for(let t=0;t<64;t++){const e=c+(mt(a,6)^mt(a,11)^mt(a,25))+Xs(a,o,l)+ti[t]+ni[t]|0,u=(mt(n,2)^mt(n,13)^mt(n,22))+$s(n,r,s)|0;c=l,l=o,o=a,a=i+e|0,i=s,s=r,r=n,n=e+u|0}n=n+this.A|0,r=r+this.B|0,s=s+this.C|0,i=i+this.D|0,a=a+this.E|0,o=o+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(n,r,s,i,a,o,l,c)}roundClean(){ni.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const si=bt((()=>new ri)),[ii,ai]=(()=>ft.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((t=>BigInt(t)))))(),oi=new Uint32Array(80),li=new Uint32Array(80);class ci extends Ws{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:t,Al:e,Bh:n,Bl:r,Ch:s,Cl:i,Dh:a,Dl:o,Eh:l,El:c,Fh:u,Fl:h,Gh:f,Gl:d,Hh:p,Hl:g}=this;return[t,e,n,r,s,i,a,o,l,c,u,h,f,d,p,g]}set(t,e,n,r,s,i,a,o,l,c,u,h,f,d,p,g){this.Ah=0|t,this.Al=0|e,this.Bh=0|n,this.Bl=0|r,this.Ch=0|s,this.Cl=0|i,this.Dh=0|a,this.Dl=0|o,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|h,this.Gh=0|f,this.Gl=0|d,this.Hh=0|p,this.Hl=0|g}process(t,e){for(let n=0;n<16;n++,e+=4)oi[n]=t.getUint32(e),li[n]=t.getUint32(e+=4);for(let t=16;t<80;t++){const e=0|oi[t-15],n=0|li[t-15],r=ft.rotrSH(e,n,1)^ft.rotrSH(e,n,8)^ft.shrSH(e,n,7),s=ft.rotrSL(e,n,1)^ft.rotrSL(e,n,8)^ft.shrSL(e,n,7),i=0|oi[t-2],a=0|li[t-2],o=ft.rotrSH(i,a,19)^ft.rotrBH(i,a,61)^ft.shrSH(i,a,6),l=ft.rotrSL(i,a,19)^ft.rotrBL(i,a,61)^ft.shrSL(i,a,6),c=ft.add4L(s,l,li[t-7],li[t-16]),u=ft.add4H(c,r,o,oi[t-7],oi[t-16]);oi[t]=0|u,li[t]=0|c}let{Ah:n,Al:r,Bh:s,Bl:i,Ch:a,Cl:o,Dh:l,Dl:c,Eh:u,El:h,Fh:f,Fl:d,Gh:p,Gl:g,Hh:m,Hl:y}=this;for(let t=0;t<80;t++){const e=ft.rotrSH(u,h,14)^ft.rotrSH(u,h,18)^ft.rotrBH(u,h,41),w=ft.rotrSL(u,h,14)^ft.rotrSL(u,h,18)^ft.rotrBL(u,h,41),b=u&f^~u&p,A=h&d^~h&g,v=ft.add5L(y,w,A,ai[t],li[t]),E=ft.add5H(v,m,e,b,ii[t],oi[t]),k=0|v,x=ft.rotrSH(n,r,28)^ft.rotrBH(n,r,34)^ft.rotrBH(n,r,39),P=ft.rotrSL(n,r,28)^ft.rotrBL(n,r,34)^ft.rotrBL(n,r,39),N=n&s^n&a^s&a,B=r&i^r&o^i&o;m=0|p,y=0|g,p=0|f,g=0|d,f=0|u,d=0|h,({h:u,l:h}=ft.add(0|l,0|c,0|E,0|k)),l=0|a,c=0|o,a=0|s,o=0|i,s=0|n,i=0|r;const I=ft.add3L(k,P,B);n=ft.add3H(I,E,x,N),r=0|I}({h:n,l:r}=ft.add(0|this.Ah,0|this.Al,0|n,0|r)),({h:s,l:i}=ft.add(0|this.Bh,0|this.Bl,0|s,0|i)),({h:a,l:o}=ft.add(0|this.Ch,0|this.Cl,0|a,0|o)),({h:l,l:c}=ft.add(0|this.Dh,0|this.Dl,0|l,0|c)),({h:u,l:h}=ft.add(0|this.Eh,0|this.El,0|u,0|h)),({h:f,l:d}=ft.add(0|this.Fh,0|this.Fl,0|f,0|d)),({h:p,l:g}=ft.add(0|this.Gh,0|this.Gl,0|p,0|g)),({h:m,l:y}=ft.add(0|this.Hh,0|this.Hl,0|m,0|y)),this.set(n,r,s,i,a,o,l,c,u,h,f,d,p,g,m,y)}roundClean(){oi.fill(0),li.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const ui=bt((()=>new ci)),hi=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();function fi(t){switch(t){case"sha256":return si.create();case"sha512":return ui.create()}u(!1,"invalid hashing algorithm name","algorithm",t)}hi.crypto||hi.msCrypto;const di=function(t){return fi("sha256").update(t).digest()},pi=function(t){return fi("sha512").update(t).digest()};let gi=di,mi=pi,yi=!1,wi=!1;function bi(t){const e=g(t,"data");return A(gi(e))}function Ai(t){const e=g(t,"data");return A(mi(e))}bi._=di,bi.lock=function(){yi=!0},bi.register=function(t){if(yi)throw new Error("sha256 is locked");gi=t},Object.freeze(bi),Ai._=pi,Ai.lock=function(){wi=!0},Ai.register=function(t){if(wi)throw new Error("sha512 is locked");mi=t},Object.freeze(bi);const vi="0x0000000000000000000000000000000000000000000000000000000000000000",Ei=BigInt(0),ki=BigInt(1),xi=BigInt(2),Pi=BigInt(27),Ni=BigInt(28),Bi=BigInt(35),Ii={};function Ci(t){return P(M(t),32)}class Oi{#$;#tt;#et;#nt;get r(){return this.#$}set r(t){u(32===E(t),"invalid r","value",t),this.#$=A(t)}get s(){return this.#tt}set s(t){u(32===E(t),"invalid s","value",t);const e=A(t);u(parseInt(e.substring(0,3))<8,"non-canonical s","value",e),this.#tt=e}get v(){return this.#et}set v(t){const e=D(t,"value");u(27===e||28===e,"invalid v","v",t),this.#et=e}get networkV(){return this.#nt}get legacyChainId(){const t=this.networkV;return null==t?null:Oi.getChainId(t)}get yParity(){return 27===this.v?0:1}get yParityAndS(){const t=g(this.s);return this.yParity&&(t[0]|=128),A(t)}get compactSerialized(){return v([this.r,this.yParityAndS])}get serialized(){return v([this.r,this.s,this.yParity?"0x1c":"0x1b"])}constructor(t,e,n,r){d(t,Ii,"Signature"),this.#$=e,this.#tt=n,this.#et=r,this.#nt=null}[Symbol.for("nodejs.util.inspect.custom")](){return`Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const t=new Oi(Ii,this.r,this.s,this.v);return this.networkV&&(t.#nt=this.networkV),t}toJSON(){const t=this.networkV;return{_type:"signature",networkV:null!=t?t.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(t){const e=T(t,"v");return e==Pi||e==Ni?Ei:(u(e>=Bi,"invalid EIP-155 v","v",t),(e-Bi)/xi)}static getChainIdV(t,e){return T(t)*xi+BigInt(35+e-27)}static getNormalizedV(t){const e=T(t);return e===Ei||e===Pi?27:e===ki||e===Ni?28:(u(e>=Bi,"invalid v","v",t),e&ki?27:28)}static from(t){function e(e,n){u(e,n,"signature",t)}if(null==t)return new Oi(Ii,vi,vi,27);if("string"==typeof t){const n=g(t,"signature");if(64===n.length){const t=A(n.slice(0,32)),e=n.slice(32,64),r=128&e[0]?28:27;return e[0]&=127,new Oi(Ii,t,A(e),r)}if(65===n.length){const t=A(n.slice(0,32)),r=n.slice(32,64);e(!(128&r[0]),"non-canonical s");const s=Oi.getNormalizedV(n[64]);return new Oi(Ii,t,A(r),s)}e(!1,"invalid raw signature length")}if(t instanceof Oi)return t.clone();const n=t.r;e(null!=n,"missing r");const r=Ci(n),s=function(t,n){if(null!=t)return Ci(t);if(null!=n){e(y(n,32),"invalid yParityAndS");const t=g(n);return t[0]&=127,A(t)}e(!1,"missing s")}(t.s,t.yParityAndS);e(!(128&g(s)[0]),"non-canonical s");const{networkV:i,v:a}=function(t,n,r){if(null!=t){const e=T(t);return{networkV:e>=Bi?e:void 0,v:Oi.getNormalizedV(e)}}if(null!=n)return e(y(n,32),"invalid yParityAndS"),{v:128&g(n)[0]?28:27};if(null!=r){switch(D(r,"sig.yParity")){case 0:return{v:27};case 1:return{v:28}}e(!1,"invalid yParity")}e(!1,"missing v")}(t.v,t.yParityAndS,t.yParity),o=new Oi(Ii,r,s,a);return i&&(o.#nt=i),e(null==t.yParity||D(t.yParity,"sig.yParity")===o.yParity,"yParity mismatch"),e(null==t.yParityAndS||t.yParityAndS===o.yParityAndS,"yParityAndS mismatch"),o}}BigInt(0);const Ri=BigInt(1),Ti=BigInt(2),Si=t=>t instanceof Uint8Array,Fi=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,"0")));function Ui(t){if(!Si(t))throw new Error("Uint8Array expected");let e="";for(let n=0;n<t.length;n++)e+=Fi[t[n]];return e}function Di(t){if("string"!=typeof t)throw new Error("hex string expected, got "+typeof t);return BigInt(""===t?"0":`0x${t}`)}function Li(t){if("string"!=typeof t)throw new Error("hex string expected, got "+typeof t);const e=t.length;if(e%2)throw new Error("padded hex string expected, got unpadded hex of length "+e);const n=new Uint8Array(e/2);for(let e=0;e<n.length;e++){const r=2*e,s=t.slice(r,r+2),i=Number.parseInt(s,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");n[e]=i}return n}function Mi(t){return Di(Ui(t))}function Gi(t){if(!Si(t))throw new Error("Uint8Array expected");return Di(Ui(Uint8Array.from(t).reverse()))}function Hi(t,e){return Li(t.toString(16).padStart(2*e,"0"))}function Qi(t,e){return Hi(t,e).reverse()}function Vi(t,e,n){let r;if("string"==typeof e)try{r=Li(e)}catch(n){throw new Error(`${t} must be valid hex string, got "${e}". Cause: ${n}`)}else{if(!Si(e))throw new Error(`${t} must be hex string or Uint8Array`);r=Uint8Array.from(e)}const s=r.length;if("number"==typeof n&&s!==n)throw new Error(`${t} expected ${n} bytes, got ${s}`);return r}function ji(...t){const e=new Uint8Array(t.reduce(((t,e)=>t+e.length),0));let n=0;return t.forEach((t=>{if(!Si(t))throw new Error("Uint8Array expected");e.set(t,n),n+=t.length})),e}const zi=t=>(Ti<<BigInt(t-1))-Ri,Ji=t=>new Uint8Array(t),Ki=t=>Uint8Array.from(t);function qi(t,e,n){if("number"!=typeof t||t<2)throw new Error("hashLen must be a number");if("number"!=typeof e||e<2)throw new Error("qByteLen must be a number");if("function"!=typeof n)throw new Error("hmacFn must be a function");let r=Ji(t),s=Ji(t),i=0;const a=()=>{r.fill(1),s.fill(0),i=0},o=(...t)=>n(s,r,...t),l=(t=Ji())=>{s=o(Ki([0]),t),r=o(),0!==t.length&&(s=o(Ki([1]),t),r=o())},c=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let t=0;const n=[];for(;t<e;){r=o();const e=r.slice();n.push(e),t+=r.length}return ji(...n)};return(t,e)=>{let n;for(a(),l(t);!(n=e(c()));)l();return a(),n}}const Zi={bigint:t=>"bigint"==typeof t,function:t=>"function"==typeof t,boolean:t=>"boolean"==typeof t,string:t=>"string"==typeof t,stringOrUint8Array:t=>"string"==typeof t||t instanceof Uint8Array,isSafeInteger:t=>Number.isSafeInteger(t),array:t=>Array.isArray(t),field:(t,e)=>e.Fp.isValid(t),hash:t=>"function"==typeof t&&Number.isSafeInteger(t.outputLen)};function Yi(t,e,n={}){const r=(e,n,r)=>{const s=Zi[n];if("function"!=typeof s)throw new Error(`Invalid validator "${n}", expected function`);const i=t[e];if(!(r&&void 0===i||s(i,t)))throw new Error(`Invalid param ${String(e)}=${i} (${typeof i}), expected ${n}`)};for(const[t,n]of Object.entries(e))r(t,n,!1);for(const[t,e]of Object.entries(n))r(t,e,!0);return t}const _i=BigInt(0),Wi=BigInt(1),Xi=BigInt(2),$i=BigInt(3),ta=BigInt(4),ea=BigInt(5),na=BigInt(8);function ra(t,e){const n=t%e;return n>=_i?n:e+n}function sa(t,e,n){if(n<=_i||e<_i)throw new Error("Expected power/modulo > 0");if(n===Wi)return _i;let r=Wi;for(;e>_i;)e&Wi&&(r=r*t%n),t=t*t%n,e>>=Wi;return r}function ia(t,e,n){let r=t;for(;e-- >_i;)r*=r,r%=n;return r}function aa(t,e){if(t===_i||e<=_i)throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);let n=ra(t,e),r=e,s=_i,i=Wi,a=Wi,o=_i;for(;n!==_i;){const t=r/n,e=r%n,l=s-a*t,c=i-o*t;r=n,n=e,s=a,i=o,a=l,o=c}if(r!==Wi)throw new Error("invert: does not exist");return ra(s,e)}BigInt(9),BigInt(16);const oa=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function la(t,e){const n=void 0!==e?e:t.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function ca(t){if("bigint"!=typeof t)throw new Error("field order must be bigint");const e=t.toString(2).length;return Math.ceil(e/8)}function ua(t){const e=ca(t);return e+Math.ceil(e/2)}class ha extends wt{constructor(t,e){super(),this.finished=!1,this.destroyed=!1,function(t){if("function"!=typeof t||"function"!=typeof t.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");tt(t.outputLen),tt(t.blockLen)}(t);const n=yt(e);if(this.iHash=t.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const r=this.blockLen,s=new Uint8Array(r);s.set(n.length>r?t.create().update(n).digest():n);for(let t=0;t<s.length;t++)s[t]^=54;this.iHash.update(s),this.oHash=t.create();for(let t=0;t<s.length;t++)s[t]^=106;this.oHash.update(s),s.fill(0)}update(t){return nt(this),this.iHash.update(t),this}digestInto(t){nt(this),et(t,this.outputLen),this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:n,finished:r,destroyed:s,blockLen:i,outputLen:a}=this;return t.finished=r,t.destroyed=s,t.blockLen=i,t.outputLen=a,t.oHash=e._cloneInto(t.oHash),t.iHash=n._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const fa=(t,e,n)=>new ha(t,e).update(n).digest();fa.create=(t,e)=>new ha(t,e);const da=BigInt(0),pa=BigInt(1);function ga(t){return Yi(t.Fp,oa.reduce(((t,e)=>(t[e]="function",t)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),Yi(t,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...la(t.n,t.nBitLength),...t,p:t.Fp.ORDER})}const{Ph:ma,aT:ya}=e,wa={Err:class extends Error{constructor(t=""){super(t)}},_parseInt(t){const{Err:e}=wa;if(t.length<2||2!==t[0])throw new e("Invalid signature integer tag");const n=t[1],r=t.subarray(2,n+2);if(!n||r.length!==n)throw new e("Invalid signature integer: wrong length");if(128&r[0])throw new e("Invalid signature integer: negative");if(0===r[0]&&!(128&r[1]))throw new e("Invalid signature integer: unnecessary leading zero");return{d:ma(r),l:t.subarray(n+2)}},toSig(t){const{Err:e}=wa,n="string"==typeof t?ya(t):t;if(!(n instanceof Uint8Array))throw new Error("ui8a expected");let r=n.length;if(r<2||48!=n[0])throw new e("Invalid signature tag");if(n[1]!==r-2)throw new e("Invalid signature: incorrect length");const{d:s,l:i}=wa._parseInt(n.subarray(2)),{d:a,l:o}=wa._parseInt(i);if(o.length)throw new e("Invalid signature: left bytes after parsing");return{r:s,s:a}},hexFromSig(t){const e=t=>8&Number.parseInt(t[0],16)?"00"+t:t,n=t=>{const e=t.toString(16);return 1&e.length?`0${e}`:e},r=e(n(t.s)),s=e(n(t.r)),i=r.length/2,a=s.length/2,o=n(i),l=n(a);return`30${n(a+i+4)}02${l}${s}02${o}${r}`}},ba=BigInt(0),Aa=BigInt(1),va=(BigInt(2),BigInt(3));function Ea(t){const e=function(t){const e=ga(t);return Yi(e,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...e})}(t),{Fp:n,n:r}=e,s=n.BYTES+1,i=2*n.BYTES+1;function a(t){return ra(t,r)}function o(t){return aa(t,r)}const{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:u,isWithinCurveOrder:h}=function(t){const e=function(t){const e=ga(t);Yi(e,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:n,Fp:r,a:s}=e;if(n){if(!r.eql(s,r.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof n||"bigint"!=typeof n.beta||"function"!=typeof n.splitScalar)throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...e})}(t),{Fp:n}=e,r=e.toBytes||((t,e,r)=>{const s=e.toAffine();return ji(Uint8Array.from([4]),n.toBytes(s.x),n.toBytes(s.y))}),s=e.fromBytes||(t=>{const e=t.subarray(1);return{x:n.fromBytes(e.subarray(0,n.BYTES)),y:n.fromBytes(e.subarray(n.BYTES,2*n.BYTES))}});function i(t){const{a:r,b:s}=e,i=n.sqr(t),a=n.mul(i,t);return n.add(n.add(a,n.mul(t,r)),s)}if(!n.eql(n.sqr(e.Gy),i(e.Gx)))throw new Error("bad generator point: equation left != right");function a(t){return"bigint"==typeof t&&ba<t&&t<e.n}function o(t){if(!a(t))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function l(t){const{allowedPrivateKeyLengths:n,nByteLength:r,wrapPrivateKey:s,n:i}=e;if(n&&"bigint"!=typeof t){if(t instanceof Uint8Array&&(t=Ui(t)),"string"!=typeof t||!n.includes(t.length))throw new Error("Invalid key");t=t.padStart(2*r,"0")}let a;try{a="bigint"==typeof t?t:Mi(Vi("private key",t,r))}catch(e){throw new Error(`private key must be ${r} bytes, hex or bigint, not ${typeof t}`)}return s&&(a=ra(a,i)),o(a),a}const c=new Map;function u(t){if(!(t instanceof h))throw new Error("ProjectivePoint expected")}class h{constructor(t,e,r){if(this.px=t,this.py=e,this.pz=r,null==t||!n.isValid(t))throw new Error("x required");if(null==e||!n.isValid(e))throw new Error("y required");if(null==r||!n.isValid(r))throw new Error("z required")}static fromAffine(t){const{x:e,y:r}=t||{};if(!t||!n.isValid(e)||!n.isValid(r))throw new Error("invalid affine point");if(t instanceof h)throw new Error("projective point not allowed");const s=t=>n.eql(t,n.ZERO);return s(e)&&s(r)?h.ZERO:new h(e,r,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(t){const e=n.invertBatch(t.map((t=>t.pz)));return t.map(((t,n)=>t.toAffine(e[n]))).map(h.fromAffine)}static fromHex(t){const e=h.fromAffine(s(Vi("pointHex",t)));return e.assertValidity(),e}static fromPrivateKey(t){return h.BASE.multiply(l(t))}_setWindowSize(t){this._WINDOW_SIZE=t,c.delete(this)}assertValidity(){if(this.is0()){if(e.allowInfinityPoint&&!n.is0(this.py))return;throw new Error("bad point: ZERO")}const{x:t,y:r}=this.toAffine();if(!n.isValid(t)||!n.isValid(r))throw new Error("bad point: x or y not FE");const s=n.sqr(r),a=i(t);if(!n.eql(s,a))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y:t}=this.toAffine();if(n.isOdd)return!n.isOdd(t);throw new Error("Field doesn't support isOdd")}equals(t){u(t);const{px:e,py:r,pz:s}=this,{px:i,py:a,pz:o}=t,l=n.eql(n.mul(e,o),n.mul(i,s)),c=n.eql(n.mul(r,o),n.mul(a,s));return l&&c}negate(){return new h(this.px,n.neg(this.py),this.pz)}double(){const{a:t,b:r}=e,s=n.mul(r,va),{px:i,py:a,pz:o}=this;let l=n.ZERO,c=n.ZERO,u=n.ZERO,f=n.mul(i,i),d=n.mul(a,a),p=n.mul(o,o),g=n.mul(i,a);return g=n.add(g,g),u=n.mul(i,o),u=n.add(u,u),l=n.mul(t,u),c=n.mul(s,p),c=n.add(l,c),l=n.sub(d,c),c=n.add(d,c),c=n.mul(l,c),l=n.mul(g,l),u=n.mul(s,u),p=n.mul(t,p),g=n.sub(f,p),g=n.mul(t,g),g=n.add(g,u),u=n.add(f,f),f=n.add(u,f),f=n.add(f,p),f=n.mul(f,g),c=n.add(c,f),p=n.mul(a,o),p=n.add(p,p),f=n.mul(p,g),l=n.sub(l,f),u=n.mul(p,d),u=n.add(u,u),u=n.add(u,u),new h(l,c,u)}add(t){u(t);const{px:r,py:s,pz:i}=this,{px:a,py:o,pz:l}=t;let c=n.ZERO,f=n.ZERO,d=n.ZERO;const p=e.a,g=n.mul(e.b,va);let m=n.mul(r,a),y=n.mul(s,o),w=n.mul(i,l),b=n.add(r,s),A=n.add(a,o);b=n.mul(b,A),A=n.add(m,y),b=n.sub(b,A),A=n.add(r,i);let v=n.add(a,l);return A=n.mul(A,v),v=n.add(m,w),A=n.sub(A,v),v=n.add(s,i),c=n.add(o,l),v=n.mul(v,c),c=n.add(y,w),v=n.sub(v,c),d=n.mul(p,A),c=n.mul(g,w),d=n.add(c,d),c=n.sub(y,d),d=n.add(y,d),f=n.mul(c,d),y=n.add(m,m),y=n.add(y,m),w=n.mul(p,w),A=n.mul(g,A),y=n.add(y,w),w=n.sub(m,w),w=n.mul(p,w),A=n.add(A,w),m=n.mul(y,A),f=n.add(f,m),m=n.mul(v,A),c=n.mul(b,c),c=n.sub(c,m),m=n.mul(b,y),d=n.mul(v,d),d=n.add(d,m),new h(c,f,d)}subtract(t){return this.add(t.negate())}is0(){return this.equals(h.ZERO)}wNAF(t){return d.wNAFCached(this,c,t,(t=>{const e=n.invertBatch(t.map((t=>t.pz)));return t.map(((t,n)=>t.toAffine(e[n]))).map(h.fromAffine)}))}multiplyUnsafe(t){const r=h.ZERO;if(t===ba)return r;if(o(t),t===Aa)return this;const{endo:s}=e;if(!s)return d.unsafeLadder(this,t);let{k1neg:i,k1:a,k2neg:l,k2:c}=s.splitScalar(t),u=r,f=r,p=this;for(;a>ba||c>ba;)a&Aa&&(u=u.add(p)),c&Aa&&(f=f.add(p)),p=p.double(),a>>=Aa,c>>=Aa;return i&&(u=u.negate()),l&&(f=f.negate()),f=new h(n.mul(f.px,s.beta),f.py,f.pz),u.add(f)}multiply(t){o(t);let r,s,i=t;const{endo:a}=e;if(a){const{k1neg:t,k1:e,k2neg:o,k2:l}=a.splitScalar(i);let{p:c,f:u}=this.wNAF(e),{p:f,f:p}=this.wNAF(l);c=d.constTimeNegate(t,c),f=d.constTimeNegate(o,f),f=new h(n.mul(f.px,a.beta),f.py,f.pz),r=c.add(f),s=u.add(p)}else{const{p:t,f:e}=this.wNAF(i);r=t,s=e}return h.normalizeZ([r,s])[0]}multiplyAndAddUnsafe(t,e,n){const r=h.BASE,s=(t,e)=>e!==ba&&e!==Aa&&t.equals(r)?t.multiply(e):t.multiplyUnsafe(e),i=s(this,e).add(s(t,n));return i.is0()?void 0:i}toAffine(t){const{px:e,py:r,pz:s}=this,i=this.is0();null==t&&(t=i?n.ONE:n.inv(s));const a=n.mul(e,t),o=n.mul(r,t),l=n.mul(s,t);if(i)return{x:n.ZERO,y:n.ZERO};if(!n.eql(l,n.ONE))throw new Error("invZ was invalid");return{x:a,y:o}}isTorsionFree(){const{h:t,isTorsionFree:n}=e;if(t===Aa)return!0;if(n)return n(h,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:t,clearCofactor:n}=e;return t===Aa?this:n?n(h,this):this.multiplyUnsafe(e.h)}toRawBytes(t=!0){return this.assertValidity(),r(h,this,t)}toHex(t=!0){return Ui(this.toRawBytes(t))}}h.BASE=new h(e.Gx,e.Gy,n.ONE),h.ZERO=new h(n.ZERO,n.ONE,n.ZERO);const f=e.nBitLength,d=function(t,e){const n=(t,e)=>{const n=e.negate();return t?n:e},r=t=>({windows:Math.ceil(e/t)+1,windowSize:2**(t-1)});return{constTimeNegate:n,unsafeLadder(e,n){let r=t.ZERO,s=e;for(;n>da;)n&pa&&(r=r.add(s)),s=s.double(),n>>=pa;return r},precomputeWindow(t,e){const{windows:n,windowSize:s}=r(e),i=[];let a=t,o=a;for(let t=0;t<n;t++){o=a,i.push(o);for(let t=1;t<s;t++)o=o.add(a),i.push(o);a=o.double()}return i},wNAF(e,s,i){const{windows:a,windowSize:o}=r(e);let l=t.ZERO,c=t.BASE;const u=BigInt(2**e-1),h=2**e,f=BigInt(e);for(let t=0;t<a;t++){const e=t*o;let r=Number(i&u);i>>=f,r>o&&(r-=h,i+=pa);const a=e,d=e+Math.abs(r)-1,p=t%2!=0,g=r<0;0===r?c=c.add(n(p,s[a])):l=l.add(n(g,s[d]))}return{p:l,f:c}},wNAFCached(t,e,n,r){const s=t._WINDOW_SIZE||1;let i=e.get(t);return i||(i=this.precomputeWindow(t,s),1!==s&&e.set(t,r(i))),this.wNAF(s,i,n)}}}(h,e.endo?Math.ceil(f/2):f);return{CURVE:e,ProjectivePoint:h,normPrivateKeyToScalar:l,weierstrassEquation:i,isWithinCurveOrder:a}}({...e,toBytes(t,e,r){const s=e.toAffine(),i=n.toBytes(s.x),a=ji;return r?a(Uint8Array.from([e.hasEvenY()?2:3]),i):a(Uint8Array.from([4]),i,n.toBytes(s.y))},fromBytes(t){const e=t.length,r=t[0],a=t.subarray(1);if(e!==s||2!==r&&3!==r){if(e===i&&4===r)return{x:n.fromBytes(a.subarray(0,n.BYTES)),y:n.fromBytes(a.subarray(n.BYTES,2*n.BYTES))};throw new Error(`Point of length ${e} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`)}{const t=Mi(a);if(!(ba<(o=t)&&o<n.ORDER))throw new Error("Point is not on curve");const e=u(t);let s=n.sqrt(e);return!(1&~r)!=((s&Aa)===Aa)&&(s=n.neg(s)),{x:t,y:s}}var o}}),f=t=>Ui(Hi(t,e.nByteLength));function d(t){return t>r>>Aa}const p=(t,e,n)=>Mi(t.slice(e,n));class g{constructor(t,e,n){this.r=t,this.s=e,this.recovery=n,this.assertValidity()}static fromCompact(t){const n=e.nByteLength;return t=Vi("compactSignature",t,2*n),new g(p(t,0,n),p(t,n,2*n))}static fromDER(t){const{r:e,s:n}=wa.toSig(Vi("DER",t));return new g(e,n)}assertValidity(){if(!h(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!h(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(t){return new g(this.r,this.s,t)}recoverPublicKey(t){const{r,s,recovery:i}=this,c=b(Vi("msgHash",t));if(null==i||![0,1,2,3].includes(i))throw new Error("recovery id invalid");const u=2===i||3===i?r+e.n:r;if(u>=n.ORDER)throw new Error("recovery id 2 or 3 invalid");const h=1&i?"03":"02",d=l.fromHex(h+f(u)),p=o(u),g=a(-c*p),m=a(s*p),y=l.BASE.multiplyAndAddUnsafe(d,g,m);if(!y)throw new Error("point at infinify");return y.assertValidity(),y}hasHighS(){return d(this.s)}normalizeS(){return this.hasHighS()?new g(this.r,a(-this.s),this.recovery):this}toDERRawBytes(){return Li(this.toDERHex())}toDERHex(){return wa.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return Li(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}const m={isValidPrivateKey(t){try{return c(t),!0}catch(t){return!1}},normPrivateKeyToScalar:c,randomPrivateKey:()=>{const t=ua(e.n);return function(t,e,n=!1){const r=t.length,s=ca(e),i=ua(e);if(r<16||r<i||r>1024)throw new Error(`expected ${i}-1024 bytes of input, got ${r}`);const a=ra(n?Mi(t):Gi(t),e-Wi)+Wi;return n?Qi(a,s):Hi(a,s)}(e.randomBytes(t),e.n)},precompute:(t=8,e=l.BASE)=>(e._setWindowSize(t),e.multiply(BigInt(3)),e)};function y(t){const e=t instanceof Uint8Array,n="string"==typeof t,r=(e||n)&&t.length;return e?r===s||r===i:n?r===2*s||r===2*i:t instanceof l}const w=e.bits2int||function(t){const n=Mi(t),r=8*t.length-e.nBitLength;return r>0?n>>BigInt(r):n},b=e.bits2int_modN||function(t){return a(w(t))},A=zi(e.nBitLength);function v(t){if("bigint"!=typeof t)throw new Error("bigint expected");if(!(ba<=t&&t<A))throw new Error(`bigint expected < 2^${e.nBitLength}`);return Hi(t,e.nByteLength)}const E={lowS:e.lowS,prehash:!1},k={lowS:e.lowS,prehash:!1};return l.BASE._setWindowSize(8),{CURVE:e,getPublicKey:function(t,e=!0){return l.fromPrivateKey(t).toRawBytes(e)},getSharedSecret:function(t,e,n=!0){if(y(t))throw new Error("first arg must be private key");if(!y(e))throw new Error("second arg must be public key");return l.fromHex(e).multiply(c(t)).toRawBytes(n)},sign:function(t,r,s=E){const{seed:i,k2sig:u}=function(t,r,s=E){if(["recovered","canonical"].some((t=>t in s)))throw new Error("sign() legacy options not supported");const{hash:i,randomBytes:u}=e;let{lowS:f,prehash:p,extraEntropy:m}=s;null==f&&(f=!0),t=Vi("msgHash",t),p&&(t=Vi("prehashed msgHash",i(t)));const y=b(t),A=c(r),k=[v(A),v(y)];if(null!=m){const t=!0===m?u(n.BYTES):m;k.push(Vi("extraEntropy",t))}const x=ji(...k),P=y;return{seed:x,k2sig:function(t){const e=w(t);if(!h(e))return;const n=o(e),r=l.BASE.multiply(e).toAffine(),s=a(r.x);if(s===ba)return;const i=a(n*a(P+s*A));if(i===ba)return;let c=(r.x===s?0:2)|Number(r.y&Aa),u=i;return f&&d(i)&&(u=function(t){return d(t)?a(-t):t}(i),c^=1),new g(s,u,c)}}}(t,r,s),f=e;return qi(f.hash.outputLen,f.nByteLength,f.hmac)(i,u)},verify:function(t,n,r,s=k){const i=t;if(n=Vi("msgHash",n),r=Vi("publicKey",r),"strict"in s)throw new Error("options.strict was renamed to lowS");const{lowS:c,prehash:u}=s;let h,f;try{if("string"==typeof i||i instanceof Uint8Array)try{h=g.fromDER(i)}catch(t){if(!(t instanceof wa.Err))throw t;h=g.fromCompact(i)}else{if("object"!=typeof i||"bigint"!=typeof i.r||"bigint"!=typeof i.s)throw new Error("PARSE");{const{r:t,s:e}=i;h=new g(t,e)}}f=l.fromHex(r)}catch(t){if("PARSE"===t.message)throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(c&&h.hasHighS())return!1;u&&(n=e.hash(n));const{r:d,s:p}=h,m=b(n),y=o(p),w=a(m*y),A=a(d*y),v=l.BASE.multiplyAndAddUnsafe(f,w,A)?.toAffine();return!!v&&a(v.x)===d},ProjectivePoint:l,Signature:g,utils:m}}function ka(t){return{hash:t,hmac:(e,...n)=>fa(t,e,function(...t){const e=new Uint8Array(t.reduce(((t,e)=>t+e.length),0));let n=0;return t.forEach((t=>{if(!pt(t))throw new Error("Uint8Array expected");e.set(t,n),n+=t.length})),e}(...n)),randomBytes:At}}BigInt(4);const xa=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),Pa=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Na=BigInt(1),Ba=BigInt(2),Ia=(t,e)=>(t+e/Ba)/e;const Ca=function(t,e,n=!1,r={}){if(t<=_i)throw new Error(`Expected Field ORDER > 0, got ${t}`);const{nBitLength:s,nByteLength:i}=la(t,e);if(i>2048)throw new Error("Field lengths over 2048 bytes are not supported");const a=function(t){if(t%ta===$i){const e=(t+Wi)/ta;return function(t,n){const r=t.pow(n,e);if(!t.eql(t.sqr(r),n))throw new Error("Cannot find square root");return r}}if(t%na===ea){const e=(t-ea)/na;return function(t,n){const r=t.mul(n,Xi),s=t.pow(r,e),i=t.mul(n,s),a=t.mul(t.mul(i,Xi),s),o=t.mul(i,t.sub(a,t.ONE));if(!t.eql(t.sqr(o),n))throw new Error("Cannot find square root");return o}}return function(t){const e=(t-Wi)/Xi;let n,r,s;for(n=t-Wi,r=0;n%Xi===_i;n/=Xi,r++);for(s=Xi;s<t&&sa(s,e,t)!==t-Wi;s++);if(1===r){const e=(t+Wi)/ta;return function(t,n){const r=t.pow(n,e);if(!t.eql(t.sqr(r),n))throw new Error("Cannot find square root");return r}}const i=(n+Wi)/Xi;return function(t,a){if(t.pow(a,e)===t.neg(t.ONE))throw new Error("Cannot find square root");let o=r,l=t.pow(t.mul(t.ONE,s),n),c=t.pow(a,i),u=t.pow(a,n);for(;!t.eql(u,t.ONE);){if(t.eql(u,t.ZERO))return t.ZERO;let e=1;for(let n=t.sqr(u);e<o&&!t.eql(n,t.ONE);e++)n=t.sqr(n);const n=t.pow(l,Wi<<BigInt(o-e-1));l=t.sqr(n),c=t.mul(c,n),u=t.mul(u,l),o=e}return c}}(t)}(t),o=Object.freeze({ORDER:t,BITS:s,BYTES:i,MASK:zi(s),ZERO:_i,ONE:Wi,create:e=>ra(e,t),isValid:e=>{if("bigint"!=typeof e)throw new Error("Invalid field element: expected bigint, got "+typeof e);return _i<=e&&e<t},is0:t=>t===_i,isOdd:t=>(t&Wi)===Wi,neg:e=>ra(-e,t),eql:(t,e)=>t===e,sqr:e=>ra(e*e,t),add:(e,n)=>ra(e+n,t),sub:(e,n)=>ra(e-n,t),mul:(e,n)=>ra(e*n,t),pow:(t,e)=>function(t,e,n){if(n<_i)throw new Error("Expected power > 0");if(n===_i)return t.ONE;if(n===Wi)return e;let r=t.ONE,s=e;for(;n>_i;)n&Wi&&(r=t.mul(r,s)),s=t.sqr(s),n>>=Wi;return r}(o,t,e),div:(e,n)=>ra(e*aa(n,t),t),sqrN:t=>t*t,addN:(t,e)=>t+e,subN:(t,e)=>t-e,mulN:(t,e)=>t*e,inv:e=>aa(e,t),sqrt:r.sqrt||(t=>a(o,t)),invertBatch:t=>function(t,e){const n=new Array(e.length),r=e.reduce(((e,r,s)=>t.is0(r)?e:(n[s]=e,t.mul(e,r))),t.ONE),s=t.inv(r);return e.reduceRight(((e,r,s)=>t.is0(r)?e:(n[s]=t.mul(e,n[s]),t.mul(e,r))),s),n}(o,t),cmov:(t,e,n)=>n?e:t,toBytes:t=>n?Qi(t,i):Hi(t,i),fromBytes:t=>{if(t.length!==i)throw new Error(`Fp.fromBytes: expected ${i}, got ${t.length}`);return n?Gi(t):Mi(t)}});return Object.freeze(o)}(xa,void 0,void 0,{sqrt:function(t){const e=xa,n=BigInt(3),r=BigInt(6),s=BigInt(11),i=BigInt(22),a=BigInt(23),o=BigInt(44),l=BigInt(88),c=t*t*t%e,u=c*c*t%e,h=ia(u,n,e)*u%e,f=ia(h,n,e)*u%e,d=ia(f,Ba,e)*c%e,p=ia(d,s,e)*d%e,g=ia(p,i,e)*p%e,m=ia(g,o,e)*g%e,y=ia(m,l,e)*m%e,w=ia(y,o,e)*g%e,b=ia(w,n,e)*u%e,A=ia(b,a,e)*p%e,v=ia(A,r,e)*c%e,E=ia(v,Ba,e);if(!Ca.eql(Ca.sqr(E),t))throw new Error("Cannot find square root");return E}}),Oa=function(t,e){const n=e=>Ea({...t,...ka(e)});return Object.freeze({...n(e),create:n})}({a:BigInt(0),b:BigInt(7),Fp:Ca,n:Pa,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:t=>{const e=Pa,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-Na*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),s=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,a=BigInt("0x100000000000000000000000000000000"),o=Ia(i*t,e),l=Ia(-r*t,e);let c=ra(t-o*n-l*s,e),u=ra(-o*r-l*i,e);const h=c>a,f=u>a;if(h&&(c=e-c),f&&(u=e-u),c>a||u>a)throw new Error("splitScalar: Endomorphism failed, k="+t);return{k1neg:h,k1:c,k2neg:f,k2:u}}}},si);BigInt(0),Oa.ProjectivePoint;class Ra{#rt;constructor(t){u(32===E(t),"invalid private key","privateKey","[REDACTED]"),this.#rt=A(t)}get privateKey(){return this.#rt}get publicKey(){return Ra.computePublicKey(this.#rt)}get compressedPublicKey(){return Ra.computePublicKey(this.#rt,!0)}sign(t){u(32===E(t),"invalid digest length","digest",t);const e=Oa.sign(m(t),m(this.#rt),{lowS:!0});return Oi.from({r:L(e.r,32),s:L(e.s,32),v:e.recovery?28:27})}computeSharedSecret(t){const e=Ra.computePublicKey(t);return A(Oa.getSharedSecret(m(this.#rt),g(e),!1))}static computePublicKey(t,e){let n=g(t,"key");if(32===n.length)return A(Oa.getPublicKey(n,!!e));if(64===n.length){const t=new Uint8Array(65);t[0]=4,t.set(n,1),n=t}return A(Oa.ProjectivePoint.fromHex(n).toRawBytes(e))}static recoverPublicKey(t,e){u(32===E(t),"invalid digest length","digest",t);const n=Oi.from(e);let r=Oa.Signature.fromCompact(m(v([n.r,n.s])));r=r.addRecoveryBit(n.yParity);const s=r.recoverPublicKey(m(t));return u(null!=s,"invalid signautre for digest","signature",e),"0x"+s.toHex(!1)}static addPoints(t,e,n){const r=Oa.ProjectivePoint.fromHex(Ra.computePublicKey(t).substring(2)),s=Oa.ProjectivePoint.fromHex(Ra.computePublicKey(e).substring(2));return"0x"+r.add(s).toHex(!!n)}}function Ta(t){let e=t.toString(16);for(;e.length<2;)e="0"+e;return"0x"+e}function Sa(t,e,n){let r=0;for(let s=0;s<n;s++)r=256*r+t[e+s];return r}function Fa(t,e,n,r){const s=[];for(;n<e+1+r;){const i=Ua(t,n);s.push(i.result),c((n+=i.consumed)<=e+1+r,"child data too short","BUFFER_OVERRUN",{buffer:t,length:r,offset:e})}return{consumed:1+r,result:s}}function Ua(t,e){c(0!==t.length,"data too short","BUFFER_OVERRUN",{buffer:t,length:0,offset:1});const n=e=>{c(e<=t.length,"data short segment too short","BUFFER_OVERRUN",{buffer:t,length:t.length,offset:e})};if(t[e]>=248){const r=t[e]-247;n(e+1+r);const s=Sa(t,e+1,r);return n(e+1+r+s),Fa(t,e,e+1+r,r+s)}if(t[e]>=192){const r=t[e]-192;return n(e+1+r),Fa(t,e,e+1,r)}if(t[e]>=184){const r=t[e]-183;n(e+1+r);const s=Sa(t,e+1,r);return n(e+1+r+s),{consumed:1+r+s,result:A(t.slice(e+1+r,e+1+r+s))}}if(t[e]>=128){const r=t[e]-128;return n(e+1+r),{consumed:1+r,result:A(t.slice(e+1,e+1+r))}}return{consumed:1,result:Ta(t[e])}}function Da(t){const e=g(t,"data"),n=Ua(e,0);return u(n.consumed===e.length,"unexpected junk after rlp payload","data",t),n.result}function La(t){const e=[];for(;t;)e.unshift(255&t),t>>=8;return e}function Ma(t){if(Array.isArray(t)){let e=[];if(t.forEach((function(t){e=e.concat(Ma(t))})),e.length<=55)return e.unshift(192+e.length),e;const n=La(e.length);return n.unshift(247+n.length),n.concat(e)}const e=Array.prototype.slice.call(g(t,"object"));if(1===e.length&&e[0]<=127)return e;if(e.length<=55)return e.unshift(128+e.length),e;const n=La(e.length);return n.unshift(183+n.length),n.concat(e)}const Ga="0123456789abcdef";function Ha(t){let e="0x";for(const n of Ma(t))e+=Ga[n>>4],e+=Ga[15&n];return e}const Qa=BigInt(0),Va=BigInt(2),ja=BigInt(27),za=BigInt(28),Ja=BigInt(35),Ka=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),qa=131072;function Za(t,e){let n=t.toString(16);for(;n.length<2;)n="0"+n;return n+=bi(e).substring(4),"0x"+n}function Ya(t){return"0x"===t?null:Jt(t)}function _a(t,e){try{return Dn(t)}catch(n){u(!1,n.message,e,t)}}function Wa(t,e){return"0x"===t?0:D(t,e)}function Xa(t,e){if("0x"===t)return Qa;const n=T(t,e);return u(n<=Ka,"value exceeds uint size",e,n),n}function $a(t,e){const n=T(t,"value"),r=M(n);return u(r.length<=32,"value too large",`tx.${e}`,n),r}function to(t){return Dn(t).map((t=>[t.address,t.storageKeys]))}function eo(t,e){u(Array.isArray(t),`invalid ${e}`,"value",t);for(let e=0;e<t.length;e++)u(y(t[e],32),"invalid ${ param } hash",`value[${e}]`,t[e]);return t}function no(t,e){let n;try{if(n=Wa(e[0],"yParity"),0!==n&&1!==n)throw new Error("bad yParity")}catch(t){u(!1,"invalid yParity","yParity",e[0])}const r=P(e[1],32),s=P(e[2],32),i=Oi.from({r,s,yParity:n});t.signature=i}class ro{#st;#it;#e;#at;#ot;#lt;#ct;#ut;#ht;#ft;#dt;#pt;#gt;#mt;#yt;#wt;get type(){return this.#st}set type(t){switch(t){case null:this.#st=null;break;case 0:case"legacy":this.#st=0;break;case 1:case"berlin":case"eip-2930":this.#st=1;break;case 2:case"london":case"eip-1559":this.#st=2;break;case 3:case"cancun":case"eip-4844":this.#st=3;break;default:u(!1,"unsupported transaction type","type",t)}}get typeName(){switch(this.type){case 0:return"legacy";case 1:return"eip-2930";case 2:return"eip-1559";case 3:return"eip-4844"}return null}get to(){const t=this.#it;return null==t&&3===this.type?Wn:t}set to(t){this.#it=null==t?null:Jt(t)}get nonce(){return this.#at}set nonce(t){this.#at=D(t,"value")}get gasLimit(){return this.#ot}set gasLimit(t){this.#ot=T(t)}get gasPrice(){const t=this.#lt;return null!=t||0!==this.type&&1!==this.type?t:Qa}set gasPrice(t){this.#lt=null==t?null:T(t,"gasPrice")}get maxPriorityFeePerGas(){const t=this.#ct;return null==t?2===this.type||3===this.type?Qa:null:t}set maxPriorityFeePerGas(t){this.#ct=null==t?null:T(t,"maxPriorityFeePerGas")}get maxFeePerGas(){const t=this.#ut;return null==t?2===this.type||3===this.type?Qa:null:t}set maxFeePerGas(t){this.#ut=null==t?null:T(t,"maxFeePerGas")}get data(){return this.#e}set data(t){this.#e=A(t)}get value(){return this.#ht}set value(t){this.#ht=T(t,"value")}get chainId(){return this.#ft}set chainId(t){this.#ft=T(t)}get signature(){return this.#dt||null}set signature(t){this.#dt=null==t?null:Oi.from(t)}get accessList(){const t=this.#pt||null;return null==t?1===this.type||2===this.type||3===this.type?[]:null:t}set accessList(t){this.#pt=null==t?null:Dn(t)}get maxFeePerBlobGas(){const t=this.#gt;return null==t&&3===this.type?Qa:t}set maxFeePerBlobGas(t){this.#gt=null==t?null:T(t,"maxFeePerBlobGas")}get blobVersionedHashes(){let t=this.#mt;return null==t&&3===this.type?[]:t}set blobVersionedHashes(t){if(null!=t){u(Array.isArray(t),"blobVersionedHashes must be an Array","value",t),t=t.slice();for(let e=0;e<t.length;e++)u(y(t[e],32),"invalid blobVersionedHash",`value[${e}]`,t[e])}this.#mt=t}get blobs(){return null==this.#wt?null:this.#wt.map((t=>Object.assign({},t)))}set blobs(t){if(null==t)return void(this.#wt=null);const e=[],n=[];for(let r=0;r<t.length;r++){const s=t[r];if(w(s)){c(this.#yt,"adding a raw blob requires a KZG library","UNSUPPORTED_OPERATION",{operation:"set blobs()"});let t=g(s);if(u(t.length<=qa,"blob is too large",`blobs[${r}]`,s),t.length!==qa){const e=new Uint8Array(qa);e.set(t),t=e}const i=this.#yt.blobToKzgCommitment(t),a=A(this.#yt.computeBlobKzgProof(t,i));e.push({data:A(t),commitment:A(i),proof:a}),n.push(Za(1,i))}else{const t=A(s.commitment);e.push({data:A(s.data),commitment:t,proof:A(s.proof)}),n.push(Za(1,t))}}this.#wt=e,this.#mt=n}get kzg(){return this.#yt}set kzg(t){this.#yt=t}constructor(){this.#st=null,this.#it=null,this.#at=0,this.#ot=Qa,this.#lt=null,this.#ct=null,this.#ut=null,this.#e="0x",this.#ht=Qa,this.#ft=Qa,this.#dt=null,this.#pt=null,this.#gt=null,this.#mt=null,this.#wt=null,this.#yt=null}get hash(){return null==this.signature?null:Gt(this.#bt(!0,!1))}get unsignedHash(){return Gt(this.unsignedSerialized)}get from(){return null==this.signature?null:(t=this.unsignedHash,e=this.signature,function(t){let e;return e="string"==typeof t?Ra.computePublicKey(t,!1):t.publicKey,Jt(Gt("0x"+e.substring(4)).substring(26))}(Ra.recoverPublicKey(t,e)));var t,e}get fromPublicKey(){return null==this.signature?null:Ra.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return null!=this.signature}#bt(t,e){c(!t||null!=this.signature,"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized","UNSUPPORTED_OPERATION",{operation:".serialized"});const n=t?this.signature:null;switch(this.inferType()){case 0:return function(t,e){const n=[$a(t.nonce,"nonce"),$a(t.gasPrice||0,"gasPrice"),$a(t.gasLimit,"gasLimit"),t.to||"0x",$a(t.value,"value"),t.data];let r=Qa;if(t.chainId!=Qa)r=T(t.chainId,"tx.chainId"),u(!e||null==e.networkV||e.legacyChainId===r,"tx.chainId/sig.v mismatch","sig",e);else if(t.signature){const e=t.signature.legacyChainId;null!=e&&(r=e)}if(!e)return r!==Qa&&(n.push(M(r)),n.push("0x"),n.push("0x")),Ha(n);let s=BigInt(27+e.yParity);return r!==Qa?s=Oi.getChainIdV(r,e.v):BigInt(e.v)!==s&&u(!1,"tx.chainId/sig.v mismatch","sig",e),n.push(M(s)),n.push(M(e.r)),n.push(M(e.s)),Ha(n)}(this,n);case 1:return function(t,e){const n=[$a(t.chainId,"chainId"),$a(t.nonce,"nonce"),$a(t.gasPrice||0,"gasPrice"),$a(t.gasLimit,"gasLimit"),t.to||"0x",$a(t.value,"value"),t.data,to(t.accessList||[])];return e&&(n.push($a(e.yParity,"recoveryParam")),n.push(M(e.r)),n.push(M(e.s))),v(["0x01",Ha(n)])}(this,n);case 2:return function(t,e){const n=[$a(t.chainId,"chainId"),$a(t.nonce,"nonce"),$a(t.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),$a(t.maxFeePerGas||0,"maxFeePerGas"),$a(t.gasLimit,"gasLimit"),t.to||"0x",$a(t.value,"value"),t.data,to(t.accessList||[])];return e&&(n.push($a(e.yParity,"yParity")),n.push(M(e.r)),n.push(M(e.s))),v(["0x02",Ha(n)])}(this,n);case 3:return function(t,e,n){const r=[$a(t.chainId,"chainId"),$a(t.nonce,"nonce"),$a(t.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),$a(t.maxFeePerGas||0,"maxFeePerGas"),$a(t.gasLimit,"gasLimit"),t.to||Wn,$a(t.value,"value"),t.data,to(t.accessList||[]),$a(t.maxFeePerBlobGas||0,"maxFeePerBlobGas"),eo(t.blobVersionedHashes||[],"blobVersionedHashes")];return e&&(r.push($a(e.yParity,"yParity")),r.push(M(e.r)),r.push(M(e.s)),n)?v(["0x03",Ha([r,n.map((t=>t.data)),n.map((t=>t.commitment)),n.map((t=>t.proof))])]):v(["0x03",Ha(r)])}(this,n,e?this.blobs:null)}c(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".serialized"})}get serialized(){return this.#bt(!0,!0)}get unsignedSerialized(){return this.#bt(!1,!1)}inferType(){const t=this.inferTypes();return t.indexOf(2)>=0?2:t.pop()}inferTypes(){const t=null!=this.gasPrice,e=null!=this.maxFeePerGas||null!=this.maxPriorityFeePerGas,n=null!=this.accessList,r=null!=this.#gt||this.#mt;null!=this.maxFeePerGas&&null!=this.maxPriorityFeePerGas&&c(this.maxFeePerGas>=this.maxPriorityFeePerGas,"priorityFee cannot be more than maxFee","BAD_DATA",{value:this}),c(!e||0!==this.type&&1!==this.type,"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas","BAD_DATA",{value:this}),c(0!==this.type||!n,"legacy transaction cannot have accessList","BAD_DATA",{value:this});const s=[];return null!=this.type?s.push(this.type):e?s.push(2):t?(s.push(1),n||s.push(0)):n?(s.push(1),s.push(2)):(r&&this.to||(s.push(0),s.push(1),s.push(2)),s.push(3)),s.sort(),s}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}clone(){return ro.from(this)}toJSON(){const t=t=>null==t?null:t.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:t(this.gasLimit),gasPrice:t(this.gasPrice),maxPriorityFeePerGas:t(this.maxPriorityFeePerGas),maxFeePerGas:t(this.maxFeePerGas),value:t(this.value),chainId:t(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(t){if(null==t)return new ro;if("string"==typeof t){const e=g(t);if(e[0]>=127)return ro.from(function(t){const e=Da(t);u(Array.isArray(e)&&(9===e.length||6===e.length),"invalid field count for legacy transaction","data",t);const n={type:0,nonce:Wa(e[0],"nonce"),gasPrice:Xa(e[1],"gasPrice"),gasLimit:Xa(e[2],"gasLimit"),to:Ya(e[3]),value:Xa(e[4],"value"),data:A(e[5]),chainId:Qa};if(6===e.length)return n;const r=Xa(e[6],"v"),s=Xa(e[7],"r"),i=Xa(e[8],"s");if(s===Qa&&i===Qa)n.chainId=r;else{let t=(r-Ja)/Va;t<Qa&&(t=Qa),n.chainId=t,u(t!==Qa||r===ja||r===za,"non-canonical legacy v","v",e[6]),n.signature=Oi.from({r:P(e[7],32),s:P(e[8],32),v:r})}return n}(e));switch(e[0]){case 1:return ro.from(function(t){const e=Da(g(t).slice(1));u(Array.isArray(e)&&(8===e.length||11===e.length),"invalid field count for transaction type: 1","data",A(t));const n={type:1,chainId:Xa(e[0],"chainId"),nonce:Wa(e[1],"nonce"),gasPrice:Xa(e[2],"gasPrice"),gasLimit:Xa(e[3],"gasLimit"),to:Ya(e[4]),value:Xa(e[5],"value"),data:A(e[6]),accessList:_a(e[7],"accessList")};return 8===e.length||no(n,e.slice(8)),n}(e));case 2:return ro.from(function(t){const e=Da(g(t).slice(1));u(Array.isArray(e)&&(9===e.length||12===e.length),"invalid field count for transaction type: 2","data",A(t));const n={type:2,chainId:Xa(e[0],"chainId"),nonce:Wa(e[1],"nonce"),maxPriorityFeePerGas:Xa(e[2],"maxPriorityFeePerGas"),maxFeePerGas:Xa(e[3],"maxFeePerGas"),gasPrice:null,gasLimit:Xa(e[4],"gasLimit"),to:Ya(e[5]),value:Xa(e[6],"value"),data:A(e[7]),accessList:_a(e[8],"accessList")};return 9===e.length||no(n,e.slice(9)),n}(e));case 3:return ro.from(function(t){let e=Da(g(t).slice(1)),n="3",r=null;if(4===e.length&&Array.isArray(e[0])){n="3 (network format)";const t=e[1],s=e[2],i=e[3];u(Array.isArray(t),"invalid network format: blobs not an array","fields[1]",t),u(Array.isArray(s),"invalid network format: commitments not an array","fields[2]",s),u(Array.isArray(i),"invalid network format: proofs not an array","fields[3]",i),u(t.length===s.length,"invalid network format: blobs/commitments length mismatch","fields",e),u(t.length===i.length,"invalid network format: blobs/proofs length mismatch","fields",e),r=[];for(let n=0;n<e[1].length;n++)r.push({data:t[n],commitment:s[n],proof:i[n]});e=e[0]}u(Array.isArray(e)&&(11===e.length||14===e.length),`invalid field count for transaction type: ${n}`,"data",A(t));const s={type:3,chainId:Xa(e[0],"chainId"),nonce:Wa(e[1],"nonce"),maxPriorityFeePerGas:Xa(e[2],"maxPriorityFeePerGas"),maxFeePerGas:Xa(e[3],"maxFeePerGas"),gasPrice:null,gasLimit:Xa(e[4],"gasLimit"),to:Ya(e[5]),value:Xa(e[6],"value"),data:A(e[7]),accessList:_a(e[8],"accessList"),maxFeePerBlobGas:Xa(e[9],"maxFeePerBlobGas"),blobVersionedHashes:e[10]};r&&(s.blobs=r),u(null!=s.to,`invalid address for transaction type: ${n}`,"data",t),u(Array.isArray(s.blobVersionedHashes),"invalid blobVersionedHashes: must be an array","data",t);for(let e=0;e<s.blobVersionedHashes.length;e++)u(y(s.blobVersionedHashes[e],32),`invalid blobVersionedHash at index ${e}: must be length 32`,"data",t);return 11===e.length||no(s,e.slice(11)),s}(e))}c(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:"from"})}const e=new ro;return null!=t.type&&(e.type=t.type),null!=t.to&&(e.to=t.to),null!=t.nonce&&(e.nonce=t.nonce),null!=t.gasLimit&&(e.gasLimit=t.gasLimit),null!=t.gasPrice&&(e.gasPrice=t.gasPrice),null!=t.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas),null!=t.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null!=t.maxFeePerBlobGas&&(e.maxFeePerBlobGas=t.maxFeePerBlobGas),null!=t.data&&(e.data=t.data),null!=t.value&&(e.value=t.value),null!=t.chainId&&(e.chainId=t.chainId),null!=t.signature&&(e.signature=Oi.from(t.signature)),null!=t.accessList&&(e.accessList=t.accessList),null!=t.blobVersionedHashes&&(e.blobVersionedHashes=t.blobVersionedHashes),null!=t.kzg&&(e.kzg=t.kzg),null!=t.blobs&&(e.blobs=t.blobs),null!=t.hash&&(u(e.isSigned(),"unsigned transaction cannot define '.hash'","tx",t),u(e.hash===t.hash,"hash mismatch","tx",t)),null!=t.from&&(u(e.isSigned(),"unsigned transaction cannot define '.from'","tx",t),u(e.from.toLowerCase()===(t.from||"").toLowerCase(),"from mismatch","tx",t)),e}}const so="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";BigInt(0);const io=BigInt(58);function ao(t){return t.match(/^ipfs:\/\/ipfs\//i)?t=t.substring(12):t.match(/^ipfs:\/\//i)?t=t.substring(7):u(!1,"unsupported IPFS format","link",t),`https://gateway.ipfs.io/ipfs/${t}`}class oo{name;constructor(t){s(this,{name:t})}connect(t){return this}supportsCoinType(t){return!1}async encodeAddress(t,e){throw new Error("unsupported coin")}async decodeAddress(t,e){throw new Error("unsupported coin")}}const lo=new RegExp("^(ipfs)://(.*)$","i"),co=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),lo,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];class uo{provider;address;name;#At;#vt;constructor(t,e,n){s(this,{provider:t,address:e,name:n}),this.#At=null,this.#vt=new zr(e,["function supportsInterface(bytes4) view returns (bool)","function resolve(bytes, bytes) view returns (bytes)","function addr(bytes32) view returns (address)","function addr(bytes32, uint) view returns (bytes)","function text(bytes32, string) view returns (string)","function contenthash(bytes32) view returns (bytes)"],t)}async supportsWildcard(){return null==this.#At&&(this.#At=(async()=>{try{return await this.#vt.supportsInterface("0x9061b923")}catch(t){if(a(t,"CALL_EXCEPTION"))return!1;throw this.#At=null,t}})()),await this.#At}async#Et(t,e){e=(e||[]).slice();const n=this.#vt.interface;e.unshift(Ys(this.name));let r=null;await this.supportsWildcard()&&(r=n.getFunction(t),c(r,"missing fragment","UNKNOWN_ERROR",{info:{funcName:t}}),e=[_s(this.name,255),n.encodeFunctionData(r,e)],t="resolve(bytes,bytes)"),e.push({enableCcipRead:!0});try{const s=await this.#vt[t](...e);return r?n.decodeFunctionResult(r,s)[0]:s}catch(t){if(!a(t,"CALL_EXCEPTION"))throw t}return null}async getAddress(t){if(null==t&&(t=60),60===t)try{const t=await this.#Et("addr(bytes32)");return null==t||t===Wn?null:t}catch(t){if(a(t,"CALL_EXCEPTION"))return null;throw t}if(t>=0&&t<2147483648){let e=t+2147483648;const n=await this.#Et("addr(bytes32,uint)",[e]);if(y(n,20))return Jt(n)}let e=null;for(const n of this.provider.plugins)if(n instanceof oo&&n.supportsCoinType(t)){e=n;break}if(null==e)return null;const n=await this.#Et("addr(bytes32,uint)",[t]);if(null==n||"0x"===n)return null;const r=await e.decodeAddress(t,n);if(null!=r)return r;c(!1,"invalid coin data","UNSUPPORTED_OPERATION",{operation:`getAddress(${t})`,info:{coinType:t,data:n}})}async getText(t){const e=await this.#Et("text(bytes32,string)",[t]);return null==e||"0x"===e?null:e}async getContentHash(){const t=await this.#Et("contenthash(bytes32)");if(null==t||"0x"===t)return null;const e=t.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(e){const t="e3010170"===e[1]?"ipfs":"ipns",n=parseInt(e[4],16);if(e[5].length===2*n)return`${t}://${function(t){const e=g(t);let n=U(e),r="";for(;n;)r=so[Number(n%io)]+r,n/=io;for(let t=0;t<e.length&&!e[t];t++)r=so[0]+r;return r}("0x"+e[2])}`}const n=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return`bzz://${n[1]}`;c(!1,"invalid or unsupported content hash data","UNSUPPORTED_OPERATION",{operation:"getContentHash()",info:{data:t}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const t=[{type:"name",value:this.name}];try{const e=await this.getText("avatar");if(null==e)return t.push({type:"!avatar",value:""}),{url:null,linkage:t};t.push({type:"avatar",value:e});for(let n=0;n<co.length;n++){const r=e.match(co[n]);if(null==r)continue;const s=r[1].toLowerCase();switch(s){case"https":case"data":return t.push({type:"url",value:e}),{linkage:t,url:e};case"ipfs":{const n=ao(e);return t.push({type:"ipfs",value:e}),t.push({type:"url",value:n}),{linkage:t,url:n}}case"erc721":case"erc1155":{const n="erc721"===s?"tokenURI(uint256)":"uri(uint256)";t.push({type:s,value:e});const i=await this.getAddress();if(null==i)return t.push({type:"!owner",value:""}),{url:null,linkage:t};const a=(r[2]||"").split("/");if(2!==a.length)return t.push({type:`!${s}caip`,value:r[2]||""}),{url:null,linkage:t};const o=a[1],l=new zr(a[0],["function tokenURI(uint) view returns (string)","function ownerOf(uint) view returns (address)","function uri(uint) view returns (string)","function balanceOf(address, uint256) view returns (uint)"],this.provider);if("erc721"===s){const e=await l.ownerOf(o);if(i!==e)return t.push({type:"!owner",value:e}),{url:null,linkage:t};t.push({type:"owner",value:e})}else if("erc1155"===s){const e=await l.balanceOf(i,o);if(!e)return t.push({type:"!balance",value:"0"}),{url:null,linkage:t};t.push({type:"balance",value:e.toString()})}let c=await l[n](o);if(null==c||"0x"===c)return t.push({type:"!metadata-url",value:""}),{url:null,linkage:t};t.push({type:"metadata-url-base",value:c}),"erc1155"===s&&(c=c.replace("{id}",L(o,32).substring(2)),t.push({type:"metadata-url-expanded",value:c})),c.match(/^ipfs:/i)&&(c=ao(c)),t.push({type:"metadata-url",value:c});let u={};const h=await new Zn(c).send();h.assertOk();try{u=h.bodyJson}catch(e){try{t.push({type:"!metadata",value:h.bodyText})}catch(e){const n=h.body;return n&&t.push({type:"!metadata",value:A(n)}),{url:null,linkage:t}}return{url:null,linkage:t}}if(!u)return t.push({type:"!metadata",value:""}),{url:null,linkage:t};t.push({type:"metadata",value:JSON.stringify(u)});let f=u.image;if("string"!=typeof f)return t.push({type:"!imageUrl",value:""}),{url:null,linkage:t};if(f.match(/^(https:\/\/|data:)/i));else{if(null==f.match(lo))return t.push({type:"!imageUrl-ipfs",value:f}),{url:null,linkage:t};t.push({type:"imageUrl-ipfs",value:f}),f=ao(f)}return t.push({type:"url",value:f}),{linkage:t,url:f}}}}}catch(t){}return{linkage:t,url:null}}static async getEnsAddress(t){const e=await t.getNetwork(),n=e.getPlugin("org.ethers.plugins.network.Ens");return c(n,"network does not support ENS","UNSUPPORTED_OPERATION",{operation:"getEnsAddress",info:{network:e}}),n.address}static async#kt(t,e){const n=await uo.getEnsAddress(t);try{const r=new zr(n,["function resolver(bytes32) view returns (address)"],t),s=await r.resolver(Ys(e),{enableCcipRead:!0});return s===Wn?null:s}catch(t){throw t}return null}static async fromName(t,e){let n=e;for(;;){if(""===n||"."===n)return null;if("eth"!==e&&"eth"===n)return null;const r=await uo.#kt(t,n);if(null!=r){const s=new uo(t,r,e);return n===e||await s.supportsWildcard()?s:null}n=n.split(".").slice(1).join(".")}}}const ho=BigInt(0);function fo(t,e){return function(n){return null==n?e:t(n)}}function po(t,e){return n=>{if(e&&null==n)return null;if(!Array.isArray(n))throw new Error("not an array");return n.map((e=>t(e)))}}function go(t,e){return n=>{const r={};for(const s in t){let i=s;if(e&&s in e&&!(i in n))for(const t of e[s])if(t in n){i=t;break}try{const e=t[s](n[i]);void 0!==e&&(r[s]=e)}catch(t){c(!1,`invalid value for value.${s} (${t instanceof Error?t.message:"not-an-error"})`,"BAD_DATA",{value:n})}}return r}}function mo(t){return u(y(t,!0),"invalid data","value",t),t}function yo(t){return u(y(t,32),"invalid hash","value",t),t}const wo=go({address:Jt,blockHash:yo,blockNumber:D,data:mo,index:D,removed:fo((function(t){switch(t){case!0:case"true":return!0;case!1:case"false":return!1}u(!1,`invalid boolean; ${JSON.stringify(t)}`,"value",t)}),!1),topics:po(yo),transactionHash:yo,transactionIndex:D},{index:["logIndex"]}),bo=go({hash:fo(yo),parentHash:yo,parentBeaconBlockRoot:fo(yo,null),number:D,timestamp:D,nonce:fo(mo),difficulty:T,gasLimit:T,gasUsed:T,stateRoot:fo(yo,null),receiptsRoot:fo(yo,null),blobGasUsed:fo(T,null),excessBlobGas:fo(T,null),miner:fo(Jt),prevRandao:fo(yo,null),extraData:mo,baseFeePerGas:fo(T)},{prevRandao:["mixHash"]}),Ao=go({transactionIndex:D,blockNumber:D,transactionHash:yo,address:Jt,topics:po(yo),data:mo,index:D,blockHash:yo},{index:["logIndex"]}),vo=go({to:fo(Jt,null),from:fo(Jt,null),contractAddress:fo(Jt,null),index:D,root:fo(A),gasUsed:T,blobGasUsed:fo(T,null),logsBloom:fo(mo),blockHash:yo,hash:yo,logs:po((function(t){return Ao(t)})),blockNumber:D,cumulativeGasUsed:T,effectiveGasPrice:fo(T),blobGasPrice:fo(T,null),status:fo(D),type:fo(D,0)},{effectiveGasPrice:["gasPrice"],hash:["transactionHash"],index:["transactionIndex"]});function Eo(t){t.to&&T(t.to)===ho&&(t.to="0x0000000000000000000000000000000000000000");const e=go({hash:yo,index:fo(D,void 0),type:t=>"0x"===t||null==t?0:D(t),accessList:fo(Dn,null),blobVersionedHashes:fo(po(yo,!0),null),blockHash:fo(yo,null),blockNumber:fo(D,null),transactionIndex:fo(D,null),from:Jt,gasPrice:fo(T),maxPriorityFeePerGas:fo(T),maxFeePerGas:fo(T),maxFeePerBlobGas:fo(T,null),gasLimit:T,to:fo(Jt,null),value:T,nonce:D,data:mo,creates:fo(Jt,null),chainId:fo(T,null)},{data:["input"],gasLimit:["gas"],index:["transactionIndex"]})(t);if(null==e.to&&null==e.creates&&(e.creates=function(t){const e=Jt(t.from);let n=T(t.nonce,"tx.nonce").toString(16);return n="0"===n?"0x":n.length%2?"0x0"+n:"0x"+n,Jt(k(Gt(Ha([e,n])),12))}(e)),1!==t.type&&2!==t.type||null!=t.accessList||(e.accessList=[]),t.signature?e.signature=Oi.from(t.signature):e.signature=Oi.from(t),null==e.chainId){const t=e.signature.legacyChainId;null!=t&&(e.chainId=t)}return e.blockHash&&T(e.blockHash)===ho&&(e.blockHash=null),e}class ko{name;constructor(t){s(this,{name:t})}clone(){return new ko(this.name)}}class xo extends ko{effectiveBlock;txBase;txCreate;txDataZero;txDataNonzero;txAccessListStorageKey;txAccessListAddress;constructor(t,e){null==t&&(t=0),super(`org.ethers.network.plugins.GasCost#${t||0}`);const n={effectiveBlock:t};function r(t,r){let s=(e||{})[t];null==s&&(s=r),u("number"==typeof s,`invalud value for ${t}`,"costs",e),n[t]=s}r("txBase",21e3),r("txCreate",32e3),r("txDataZero",4),r("txDataNonzero",16),r("txAccessListStorageKey",1900),r("txAccessListAddress",2400),s(this,n)}clone(){return new xo(this.effectiveBlock,this)}}class Po extends ko{address;targetNetwork;constructor(t,e){super("org.ethers.plugins.network.Ens"),s(this,{address:t||"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",targetNetwork:null==e?1:e})}clone(){return new Po(this.address,this.targetNetwork)}}class No extends ko{#N;#xt;get url(){return this.#N}get processFunc(){return this.#xt}constructor(t,e){super("org.ethers.plugins.network.FetchUrlFeeDataPlugin"),this.#N=t,this.#xt=e}clone(){return this}}const Bo=new Map;class Io{#Pt;#ft;#Nt;constructor(t,e){this.#Pt=t,this.#ft=T(e),this.#Nt=new Map}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return this.#Pt}set name(t){this.#Pt=t}get chainId(){return this.#ft}set chainId(t){this.#ft=T(t,"chainId")}matches(t){if(null==t)return!1;if("string"==typeof t){try{return this.chainId===T(t)}catch(t){}return this.name===t}if("number"==typeof t||"bigint"==typeof t){try{return this.chainId===T(t)}catch(t){}return!1}if("object"==typeof t){if(null!=t.chainId){try{return this.chainId===T(t.chainId)}catch(t){}return!1}return null!=t.name&&this.name===t.name}return!1}get plugins(){return Array.from(this.#Nt.values())}attachPlugin(t){if(this.#Nt.get(t.name))throw new Error(`cannot replace existing plugin: ${t.name} `);return this.#Nt.set(t.name,t.clone()),this}getPlugin(t){return this.#Nt.get(t)||null}getPlugins(t){return this.plugins.filter((e=>e.name.split("#")[0]===t))}clone(){const t=new Io(this.name,this.chainId);return this.plugins.forEach((e=>{t.attachPlugin(e.clone())})),t}computeIntrinsicGas(t){const e=this.getPlugin("org.ethers.plugins.network.GasCost")||new xo;let n=e.txBase;if(null==t.to&&(n+=e.txCreate),t.data)for(let r=2;r<t.data.length;r+=2)"00"===t.data.substring(r,r+2)?n+=e.txDataZero:n+=e.txDataNonzero;if(t.accessList){const r=Dn(t.accessList);for(const t in r)n+=e.txAccessListAddress+e.txAccessListStorageKey*r[t].storageKeys.length}return n}static from(t){if(function(){function t(t,e,n){const r=function(){const r=new Io(t,e);return null!=n.ensNetwork&&r.attachPlugin(new Po(null,n.ensNetwork)),r.attachPlugin(new xo),(n.plugins||[]).forEach((t=>{r.attachPlugin(t)})),r};Io.register(t,r),Io.register(e,r),n.altNames&&n.altNames.forEach((t=>{Io.register(t,r)}))}Ro||(Ro=!0,t("mainnet",1,{ensNetwork:1,altNames:["homestead"]}),t("ropsten",3,{ensNetwork:3}),t("rinkeby",4,{ensNetwork:4}),t("goerli",5,{ensNetwork:5}),t("kovan",42,{ensNetwork:42}),t("sepolia",11155111,{ensNetwork:11155111}),t("holesky",17e3,{ensNetwork:17e3}),t("classic",61,{}),t("classicKotti",6,{}),t("arbitrum",42161,{ensNetwork:1}),t("arbitrum-goerli",421613,{}),t("arbitrum-sepolia",421614,{}),t("base",8453,{ensNetwork:1}),t("base-goerli",84531,{}),t("base-sepolia",84532,{}),t("bnb",56,{ensNetwork:1}),t("bnbt",97,{}),t("linea",59144,{ensNetwork:1}),t("linea-goerli",59140,{}),t("linea-sepolia",59141,{}),t("matic",137,{ensNetwork:1,plugins:[Oo("https://gasstation.polygon.technology/v2")]}),t("matic-amoy",80002,{}),t("matic-mumbai",80001,{altNames:["maticMumbai","maticmum"],plugins:[Oo("https://gasstation-testnet.polygon.technology/v2")]}),t("optimism",10,{ensNetwork:1,plugins:[]}),t("optimism-goerli",420,{}),t("optimism-sepolia",11155420,{}),t("xdai",100,{ensNetwork:1}))}(),null==t)return Io.from("mainnet");if("number"==typeof t&&(t=BigInt(t)),"string"==typeof t||"bigint"==typeof t){const e=Bo.get(t);if(e)return e();if("bigint"==typeof t)return new Io("unknown",t);u(!1,"unknown network","network",t)}if("function"==typeof t.clone)return t.clone();if("object"==typeof t){u("string"==typeof t.name&&"number"==typeof t.chainId,"invalid network object name or chainId","network",t);const e=new Io(t.name,t.chainId);return(t.ensAddress||null!=t.ensNetwork)&&e.attachPlugin(new Po(t.ensAddress,t.ensNetwork)),e}u(!1,"invalid network","network",t)}static register(t,e){"number"==typeof t&&(t=BigInt(t));const n=Bo.get(t);n&&u(!1,`conflicting network for ${JSON.stringify(n.name)}`,"nameOrChainId",t),Bo.set(t,e)}}function Co(t,e){const n=String(t);if(!n.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${t}`);const r=n.split(".");if(1===r.length&&r.push(""),2!==r.length)throw new Error(`invalid gwei value: ${t}`);for(;r[1].length<e;)r[1]+="0";if(r[1].length>9){let t=BigInt(r[1].substring(0,9));r[1].substring(9).match(/^0+$/)||t++,r[1]=t.toString()}return BigInt(r[0]+r[1])}function Oo(t){return new No(t,(async(t,e,n)=>{let r;n.setHeader("User-Agent","ethers");try{const[e,s]=await Promise.all([n.send(),t()]);r=e;const i=r.bodyJson.standard;return{gasPrice:s.gasPrice,maxFeePerGas:Co(i.maxFee,9),maxPriorityFeePerGas:Co(i.maxPriorityFee,9)}}catch(t){c(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,"SERVER_ERROR",{request:n,response:r,error:t})}}))}let Ro=!1;function To(t){return JSON.parse(JSON.stringify(t))}class So{#Bt;#It;#Ct;#Ot;constructor(t){this.#Bt=t,this.#It=null,this.#Ct=4e3,this.#Ot=-2}get pollingInterval(){return this.#Ct}set pollingInterval(t){this.#Ct=t}async#Rt(){try{const t=await this.#Bt.getBlockNumber();if(-2===this.#Ot)return void(this.#Ot=t);if(t!==this.#Ot){for(let e=this.#Ot+1;e<=t;e++){if(null==this.#It)return;await this.#Bt.emit("block",e)}this.#Ot=t}}catch(t){}null!=this.#It&&(this.#It=this.#Bt._setTimeout(this.#Rt.bind(this),this.#Ct))}start(){this.#It||(this.#It=this.#Bt._setTimeout(this.#Rt.bind(this),this.#Ct),this.#Rt())}stop(){this.#It&&(this.#Bt._clearTimeout(this.#It),this.#It=null)}pause(t){this.stop(),t&&(this.#Ot=-2)}resume(){this.start()}}class Fo{#Bt;#Rt;#Tt;constructor(t){this.#Bt=t,this.#Tt=!1,this.#Rt=t=>{this._poll(t,this.#Bt)}}async _poll(t,e){throw new Error("sub-classes must override this")}start(){this.#Tt||(this.#Tt=!0,this.#Rt(-2),this.#Bt.on("block",this.#Rt))}stop(){this.#Tt&&(this.#Tt=!1,this.#Bt.off("block",this.#Rt))}pause(t){this.stop()}resume(){this.start()}}class Uo extends Fo{#St;#Ft;constructor(t,e){super(t),this.#St=e,this.#Ft=-2}pause(t){t&&(this.#Ft=-2),super.pause(t)}async _poll(t,e){const n=await e.getBlock(this.#St);null!=n&&(-2===this.#Ft?this.#Ft=n.number:n.number>this.#Ft&&(e.emit(this.#St,n.number),this.#Ft=n.number))}}class Do extends Fo{#X;constructor(t,e){super(t),this.#X=To(e)}async _poll(t,e){throw new Error("@TODO")}}class Lo extends Fo{#Ut;constructor(t,e){super(t),this.#Ut=e}async _poll(t,e){const n=await e.getTransactionReceipt(this.#Ut);n&&e.emit(this.#Ut,n)}}class Mo{#Bt;#X;#It;#Tt;#Ot;constructor(t,e){this.#Bt=t,this.#X=To(e),this.#It=this.#Rt.bind(this),this.#Tt=!1,this.#Ot=-2}async#Rt(t){if(-2===this.#Ot)return;const e=To(this.#X);e.fromBlock=this.#Ot+1,e.toBlock=t;const n=await this.#Bt.getLogs(e);if(0!==n.length)for(const t of n)this.#Bt.emit(this.#X,t),this.#Ot=t.blockNumber;else this.#Ot<t-60&&(this.#Ot=t-60)}start(){this.#Tt||(this.#Tt=!0,-2===this.#Ot&&this.#Bt.getBlockNumber().then((t=>{this.#Ot=t})),this.#Bt.on("block",this.#It))}stop(){this.#Tt&&(this.#Tt=!1,this.#Bt.off("block",this.#It))}pause(t){this.stop(),t&&(this.#Ot=-2)}resume(){this.start()}}const Go=BigInt(2);function Ho(t){return t&&"function"==typeof t.then}function Qo(t,e){return t+":"+JSON.stringify(e,((t,e)=>{if(null==e)return"null";if("bigint"==typeof e)return`bigint:${e.toString()}`;if("string"==typeof e)return e.toLowerCase();if("object"==typeof e&&!Array.isArray(e)){const t=Object.keys(e);return t.sort(),t.reduce(((t,n)=>(t[n]=e[n],t)),{})}return e}))}class Vo{name;constructor(t){s(this,{name:t})}start(){}stop(){}pause(t){}resume(){}}function jo(t){return(t=Array.from(new Set(t).values())).sort(),t}async function zo(t,e){if(null==t)throw new Error("invalid event");if(Array.isArray(t)&&(t={topics:t}),"string"==typeof t)switch(t){case"block":case"debug":case"error":case"finalized":case"network":case"pending":case"safe":return{type:t,tag:t}}if(y(t,32)){const e=t.toLowerCase();return{type:"transaction",tag:Qo("tx",{hash:e}),hash:e}}if(t.orphan){const e=t;return{type:"orphan",tag:Qo("orphan",e),filter:(n=e,JSON.parse(JSON.stringify(n)))}}var n;if(t.address||t.topics){const n=t,r={topics:(n.topics||[]).map((t=>null==t?null:Array.isArray(t)?jo(t.map((t=>t.toLowerCase()))):t.toLowerCase()))};if(n.address){const t=[],s=[],i=n=>{y(n)?t.push(n):s.push((async()=>{t.push(await bn(n,e))})())};Array.isArray(n.address)?n.address.forEach(i):i(n.address),s.length&&await Promise.all(s),r.address=jo(t.map((t=>t.toLowerCase())))}return{filter:r,tag:Qo("event",r),type:"event"}}u(!1,"unknown ProviderEvent","event",t)}function Jo(){return(new Date).getTime()}const Ko={cacheTimeout:250,pollingInterval:4e3};class qo{#Dt;#Nt;#Lt;#Mt;#Gt;#Ht;#Qt;#Vt;#jt;#zt;#Jt;#u;constructor(t,e){if(this.#u=Object.assign({},Ko,e||{}),"any"===t)this.#Ht=!0,this.#Gt=null;else if(t){const e=Io.from(t);this.#Ht=!1,this.#Gt=Promise.resolve(e),setTimeout((()=>{this.emit("network",e,null)}),0)}else this.#Ht=!1,this.#Gt=null;this.#Vt=-1,this.#Qt=new Map,this.#Dt=new Map,this.#Nt=new Map,this.#Lt=null,this.#Mt=!1,this.#jt=1,this.#zt=new Map,this.#Jt=!1}get pollingInterval(){return this.#u.pollingInterval}get provider(){return this}get plugins(){return Array.from(this.#Nt.values())}attachPlugin(t){if(this.#Nt.get(t.name))throw new Error(`cannot replace existing plugin: ${t.name} `);return this.#Nt.set(t.name,t.connect(this)),this}getPlugin(t){return this.#Nt.get(t)||null}get disableCcipRead(){return this.#Jt}set disableCcipRead(t){this.#Jt=!!t}async#Kt(t){const e=this.#u.cacheTimeout;if(e<0)return await this._perform(t);const n=Qo(t.method,t);let r=this.#Qt.get(n);return r||(r=this._perform(t),this.#Qt.set(n,r),setTimeout((()=>{this.#Qt.get(n)===r&&this.#Qt.delete(n)}),e)),await r}async ccipReadFetch(t,e,n){if(this.disableCcipRead||0===n.length||null==t.to)return null;const r=t.to.toLowerCase(),s=e.toLowerCase(),i=[];for(let e=0;e<n.length;e++){const a=n[e],o=a.replace("{sender}",r).replace("{data}",s),l=new Zn(o);-1===a.indexOf("{data}")&&(l.body={data:s,sender:r}),this.emit("debug",{action:"sendCcipReadFetchRequest",request:l,index:e,urls:n});let u,h="unknown error";try{u=await l.send()}catch(t){i.push(t.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:{error:t}});continue}try{const t=u.bodyJson;if(t.data)return this.emit("debug",{action:"receiveCcipReadFetchResult",request:l,result:t}),t.data;t.message&&(h=t.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:t})}catch(t){}c(u.statusCode<400||u.statusCode>=500,`response not found during CCIP fetch: ${h}`,"OFFCHAIN_FAULT",{reason:"404_MISSING_RESOURCE",transaction:t,info:{url:a,errorMessage:h}}),i.push(h)}c(!1,`error encountered during CCIP fetch: ${i.map((t=>JSON.stringify(t))).join(", ")}`,"OFFCHAIN_FAULT",{reason:"500_SERVER_ERROR",transaction:t,info:{urls:n,errorMessages:i}})}_wrapBlock(t,e){return new ur(function(t){const e=bo(t);return e.transactions=t.transactions.map((t=>"string"==typeof t?t:Eo(t))),e}(t),this)}_wrapLog(t,e){return new hr(function(t){return wo(t)}(t),this)}_wrapTransactionReceipt(t,e){return new fr(function(t){return vo(t)}(t),this)}_wrapTransactionResponse(t,e){return new dr(Eo(t),this)}_detectNetwork(){c(!1,"sub-classes must implement this","UNSUPPORTED_OPERATION",{operation:"_detectNetwork"})}async _perform(t){c(!1,`unsupported method: ${t.method}`,"UNSUPPORTED_OPERATION",{operation:t.method,info:t})}async getBlockNumber(){const t=D(await this.#Kt({method:"getBlockNumber"}),"%response");return this.#Vt>=0&&(this.#Vt=t),t}_getAddress(t){return bn(t,this)}_getBlockTag(t){if(null==t)return"latest";switch(t){case"earliest":return"0x0";case"finalized":case"latest":case"pending":case"safe":return t}return y(t)?y(t,32)?t:G(t):("bigint"==typeof t&&(t=D(t,"blockTag")),"number"==typeof t?t>=0?G(t):this.#Vt>=0?G(this.#Vt+t):this.getBlockNumber().then((e=>G(e+t))):void u(!1,"invalid blockTag","blockTag",t))}_getFilter(t){const e=(t.topics||[]).map((t=>null==t?null:Array.isArray(t)?jo(t.map((t=>t.toLowerCase()))):t.toLowerCase())),n="blockHash"in t?t.blockHash:void 0,r=(t,r,s)=>{let i;switch(t.length){case 0:break;case 1:i=t[0];break;default:t.sort(),i=t}if(n&&(null!=r||null!=s))throw new Error("invalid filter");const a={};return i&&(a.address=i),e.length&&(a.topics=e),r&&(a.fromBlock=r),s&&(a.toBlock=s),n&&(a.blockHash=n),a};let s,i,a=[];if(t.address)if(Array.isArray(t.address))for(const e of t.address)a.push(this._getAddress(e));else a.push(this._getAddress(t.address));return"fromBlock"in t&&(s=this._getBlockTag(t.fromBlock)),"toBlock"in t&&(i=this._getBlockTag(t.toBlock)),a.filter((t=>"string"!=typeof t)).length||null!=s&&"string"!=typeof s||null!=i&&"string"!=typeof i?Promise.all([Promise.all(a),s,i]).then((t=>r(t[0],t[1],t[2]))):r(a,s,i)}_getTransactionRequest(t){const e=cr(t),n=[];if(["to","from"].forEach((t=>{if(null==e[t])return;const r=bn(e[t],this);Ho(r)?n.push(async function(){e[t]=await r}()):e[t]=r})),null!=e.blockTag){const t=this._getBlockTag(e.blockTag);Ho(t)?n.push(async function(){e.blockTag=await t}()):e.blockTag=t}return n.length?async function(){return await Promise.all(n),e}():e}async getNetwork(){if(null==this.#Gt){const t=(async()=>{try{const t=await this._detectNetwork();return this.emit("network",t,null),t}catch(e){throw this.#Gt===t&&(this.#Gt=null),e}})();return this.#Gt=t,(await t).clone()}const t=this.#Gt,[e,n]=await Promise.all([t,this._detectNetwork()]);return e.chainId!==n.chainId&&(this.#Ht?(this.emit("network",n,e),this.#Gt===t&&(this.#Gt=Promise.resolve(n))):c(!1,`network changed: ${e.chainId} => ${n.chainId} `,"NETWORK_ERROR",{event:"changed"})),e.clone()}async getFeeData(){const t=await this.getNetwork(),e=async()=>{const{_block:e,gasPrice:n,priorityFee:s}=await r({_block:this.#qt("latest",!1),gasPrice:(async()=>{try{return T(await this.#Kt({method:"getGasPrice"}),"%response")}catch(t){}return null})(),priorityFee:(async()=>{try{return T(await this.#Kt({method:"getPriorityFee"}),"%response")}catch(t){}return null})()});let i=null,a=null;const o=this._wrapBlock(e,t);return o&&o.baseFeePerGas&&(a=null!=s?s:BigInt("1000000000"),i=o.baseFeePerGas*Go+a),new lr(n,i,a)},n=t.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");if(n){const t=new Zn(n.url),r=await n.processFunc(e,this,t);return new lr(r.gasPrice,r.maxFeePerGas,r.maxPriorityFeePerGas)}return await e()}async estimateGas(t){let e=this._getTransactionRequest(t);return Ho(e)&&(e=await e),T(await this.#Kt({method:"estimateGas",transaction:e}),"%response")}async#Zt(t,e,n){c(n<10,"CCIP read exceeded maximum redirections","OFFCHAIN_FAULT",{reason:"TOO_MANY_REDIRECTS",transaction:Object.assign({},t,{blockTag:e,enableCcipRead:!0})});const r=cr(t);try{return A(await this._perform({method:"call",transaction:r,blockTag:e}))}catch(t){if(!this.disableCcipRead&&o(t)&&t.data&&n>=0&&"latest"===e&&null!=r.to&&"0x556f1830"===k(t.data,0,4)){const s=t.data,i=await bn(r.to,this);let a;try{a=function(t){const e={sender:"",urls:[],calldata:"",selector:"",extraData:"",errorArgs:[]};c(E(t)>=160,"insufficient OffchainLookup data","OFFCHAIN_FAULT",{reason:"insufficient OffchainLookup data"});const n=k(t,0,32);c(k(n,0,12)===k(tl,0,12),"corrupt OffchainLookup sender","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup sender"}),e.sender=k(n,12);try{const n=[],r=D(k(t,32,64)),s=D(k(t,r,r+32)),i=k(t,r+32);for(let t=0;t<s;t++){const e=Zo(i,32*t);if(null==e)throw new Error("abort");n.push(e)}e.urls=n}catch(t){c(!1,"corrupt OffchainLookup urls","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup urls"})}try{const n=Yo(t,64);if(null==n)throw new Error("abort");e.calldata=n}catch(t){c(!1,"corrupt OffchainLookup calldata","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup calldata"})}c(k(t,100,128)===k(tl,0,28),"corrupt OffchainLookup callbaackSelector","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup callbaackSelector"}),e.selector=k(t,96,100);try{const n=Yo(t,128);if(null==n)throw new Error("abort");e.extraData=n}catch(t){c(!1,"corrupt OffchainLookup extraData","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup extraData"})}return e.errorArgs="sender,urls,calldata,selector,extraData".split(/,/).map((t=>e[t])),e}(k(t.data,4))}catch(t){c(!1,t.message,"OFFCHAIN_FAULT",{reason:"BAD_DATA",transaction:r,info:{data:s}})}c(a.sender.toLowerCase()===i.toLowerCase(),"CCIP Read sender mismatch","CALL_EXCEPTION",{action:"call",data:s,reason:"OffchainLookup",transaction:r,invocation:null,revert:{signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",name:"OffchainLookup",args:a.errorArgs}});const o=await this.ccipReadFetch(r,a.calldata,a.urls);c(null!=o,"CCIP Read failed to fetch data","OFFCHAIN_FAULT",{reason:"FETCH_FAILED",transaction:r,info:{data:t.data,errorArgs:a.errorArgs}});const l={to:i,data:v([a.selector,$o([o,a.extraData])])};this.emit("debug",{action:"sendCcipReadCall",transaction:l});try{const t=await this.#Zt(l,e,n+1);return this.emit("debug",{action:"receiveCcipReadCallResult",transaction:Object.assign({},l),result:t}),t}catch(t){throw this.emit("debug",{action:"receiveCcipReadCallError",transaction:Object.assign({},l),error:t}),t}}throw t}}async#Yt(t){const{value:e}=await r({network:this.getNetwork(),value:t});return e}async call(t){const{tx:e,blockTag:n}=await r({tx:this._getTransactionRequest(t),blockTag:this._getBlockTag(t.blockTag)});return await this.#Yt(this.#Zt(e,n,t.enableCcipRead?0:-1))}async#_t(t,e,n){let r=this._getAddress(e),s=this._getBlockTag(n);return"string"==typeof r&&"string"==typeof s||([r,s]=await Promise.all([r,s])),await this.#Yt(this.#Kt(Object.assign(t,{address:r,blockTag:s})))}async getBalance(t,e){return T(await this.#_t({method:"getBalance"},t,e),"%response")}async getTransactionCount(t,e){return D(await this.#_t({method:"getTransactionCount"},t,e),"%response")}async getCode(t,e){return A(await this.#_t({method:"getCode"},t,e))}async getStorage(t,e,n){const r=T(e,"position");return A(await this.#_t({method:"getStorage",position:r},t,n))}async broadcastTransaction(t){const{blockNumber:e,hash:n,network:s}=await r({blockNumber:this.getBlockNumber(),hash:this._perform({method:"broadcastTransaction",signedTransaction:t}),network:this.getNetwork()}),i=ro.from(t);if(i.hash!==n)throw new Error("@TODO: the returned hash did not match");return this._wrapTransactionResponse(i,s).replaceableTransaction(e)}async#qt(t,e){if(y(t,32))return await this.#Kt({method:"getBlock",blockHash:t,includeTransactions:e});let n=this._getBlockTag(t);return"string"!=typeof n&&(n=await n),await this.#Kt({method:"getBlock",blockTag:n,includeTransactions:e})}async getBlock(t,e){const{network:n,params:s}=await r({network:this.getNetwork(),params:this.#qt(t,!!e)});return null==s?null:this._wrapBlock(s,n)}async getTransaction(t){const{network:e,params:n}=await r({network:this.getNetwork(),params:this.#Kt({method:"getTransaction",hash:t})});return null==n?null:this._wrapTransactionResponse(n,e)}async getTransactionReceipt(t){const{network:e,params:n}=await r({network:this.getNetwork(),params:this.#Kt({method:"getTransactionReceipt",hash:t})});if(null==n)return null;if(null==n.gasPrice&&null==n.effectiveGasPrice){const e=await this.#Kt({method:"getTransaction",hash:t});if(null==e)throw new Error("report this; could not find tx or effectiveGasPrice");n.effectiveGasPrice=e.gasPrice}return this._wrapTransactionReceipt(n,e)}async getTransactionResult(t){const{result:e}=await r({network:this.getNetwork(),result:this.#Kt({method:"getTransactionResult",hash:t})});return null==e?null:A(e)}async getLogs(t){let e=this._getFilter(t);Ho(e)&&(e=await e);const{network:n,params:s}=await r({network:this.getNetwork(),params:this.#Kt({method:"getLogs",filter:e})});return s.map((t=>this._wrapLog(t,n)))}_getProvider(t){c(!1,"provider cannot connect to target network","UNSUPPORTED_OPERATION",{operation:"_getProvider()"})}async getResolver(t){return await uo.fromName(this,t)}async getAvatar(t){const e=await this.getResolver(t);return e?await e.getAvatar():null}async resolveName(t){const e=await this.getResolver(t);return e?await e.getAddress():null}async lookupAddress(t){const e=Ys((t=Jt(t)).substring(2).toLowerCase()+".addr.reverse");try{const n=await uo.getEnsAddress(this),r=new zr(n,["function resolver(bytes32) view returns (address)"],this),s=await r.resolver(e);if(null==s||s===Wn)return null;const i=new zr(s,["function name(bytes32) view returns (string)"],this),a=await i.name(e);return await this.resolveName(a)!==t?null:a}catch(t){if(a(t,"BAD_DATA")&&"0x"===t.value)return null;if(a(t,"CALL_EXCEPTION"))return null;throw t}return null}async waitForTransaction(t,e,n){const r=null!=e?e:1;return 0===r?this.getTransactionReceipt(t):new Promise((async(e,s)=>{let i=null;const a=async n=>{try{const s=await this.getTransactionReceipt(t);if(null!=s&&n-s.blockNumber+1>=r)return e(s),void(i&&(clearTimeout(i),i=null))}catch(t){console.log("EEE",t)}this.once("block",a)};null!=n&&(i=setTimeout((()=>{null!=i&&(i=null,this.off("block",a),s(l("timeout","TIMEOUT",{reason:"timeout"})))}),n)),a(await this.getBlockNumber())}))}async waitForBlock(t){c(!1,"not implemented yet","NOT_IMPLEMENTED",{operation:"waitForBlock"})}_clearTimeout(t){const e=this.#zt.get(t);e&&(e.timer&&clearTimeout(e.timer),this.#zt.delete(t))}_setTimeout(t,e){null==e&&(e=0);const n=this.#jt++,r=()=>{this.#zt.delete(n),t()};if(this.paused)this.#zt.set(n,{timer:null,func:r,time:e});else{const t=setTimeout(r,e);this.#zt.set(n,{timer:t,func:r,time:Jo()})}return n}_forEachSubscriber(t){for(const e of this.#Dt.values())t(e.subscriber)}_getSubscriber(t){switch(t.type){case"debug":case"error":case"network":return new Vo(t.type);case"block":{const t=new So(this);return t.pollingInterval=this.pollingInterval,t}case"safe":case"finalized":return new Uo(this,t.type);case"event":return new Mo(this,t.filter);case"transaction":return new Lo(this,t.hash);case"orphan":return new Do(this,t.filter)}throw new Error(`unsupported event: ${t.type}`)}_recoverSubscriber(t,e){for(const n of this.#Dt.values())if(n.subscriber===t){n.started&&n.subscriber.stop(),n.subscriber=e,n.started&&e.start(),null!=this.#Lt&&e.pause(this.#Lt);break}}async#Wt(t,e){let n=await zo(t,this);return"event"===n.type&&e&&e.length>0&&!0===e[0].removed&&(n=await zo({orphan:"drop-log",log:e[0]},this)),this.#Dt.get(n.tag)||null}async#Xt(t){const e=await zo(t,this),n=e.tag;let r=this.#Dt.get(n);return r||(r={subscriber:this._getSubscriber(e),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},this.#Dt.set(n,r)),r}async on(t,e){const n=await this.#Xt(t);return n.listeners.push({listener:e,once:!1}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Lt&&n.subscriber.pause(this.#Lt)),this}async once(t,e){const n=await this.#Xt(t);return n.listeners.push({listener:e,once:!0}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Lt&&n.subscriber.pause(this.#Lt)),this}async emit(t,...e){const n=await this.#Wt(t,e);if(!n||0===n.listeners.length)return!1;const r=n.listeners.length;return n.listeners=n.listeners.filter((({listener:n,once:r})=>{const s=new mr(this,r?null:n,t);try{n.call(this,...e,s)}catch(t){}return!r})),0===n.listeners.length&&(n.started&&n.subscriber.stop(),this.#Dt.delete(n.tag)),r>0}async listenerCount(t){if(t){const e=await this.#Wt(t);return e?e.listeners.length:0}let e=0;for(const{listeners:t}of this.#Dt.values())e+=t.length;return e}async listeners(t){if(t){const e=await this.#Wt(t);return e?e.listeners.map((({listener:t})=>t)):[]}let e=[];for(const{listeners:t}of this.#Dt.values())e=e.concat(t.map((({listener:t})=>t)));return e}async off(t,e){const n=await this.#Wt(t);if(!n)return this;if(e){const t=n.listeners.map((({listener:t})=>t)).indexOf(e);t>=0&&n.listeners.splice(t,1)}return e&&0!==n.listeners.length||(n.started&&n.subscriber.stop(),this.#Dt.delete(n.tag)),this}async removeAllListeners(t){if(t){const{tag:e,started:n,subscriber:r}=await this.#Xt(t);n&&r.stop(),this.#Dt.delete(e)}else for(const[t,{started:e,subscriber:n}]of this.#Dt)e&&n.stop(),this.#Dt.delete(t);return this}async addListener(t,e){return await this.on(t,e)}async removeListener(t,e){return this.off(t,e)}get destroyed(){return this.#Mt}destroy(){this.removeAllListeners();for(const t of this.#zt.keys())this._clearTimeout(t);this.#Mt=!0}get paused(){return null!=this.#Lt}set paused(t){!!t!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(t){if(this.#Vt=-1,null!=this.#Lt){if(this.#Lt==!!t)return;c(!1,"cannot change pause type; resume first","UNSUPPORTED_OPERATION",{operation:"pause"})}this._forEachSubscriber((e=>e.pause(t))),this.#Lt=!!t;for(const t of this.#zt.values())t.timer&&clearTimeout(t.timer),t.time=Jo()-t.time}resume(){if(null!=this.#Lt){this._forEachSubscriber((t=>t.resume())),this.#Lt=null;for(const t of this.#zt.values()){let e=t.time;e<0&&(e=0),t.time=Jo(),setTimeout(t.func,e)}}}}function Zo(t,e){try{const n=Yo(t,e);if(n)return ge(n)}catch(t){}return null}function Yo(t,e){if("0x"===t)return null;try{const n=D(k(t,e,e+32)),r=D(k(t,n,n+32));return k(t,n+32,n+32+r)}catch(t){}return null}function _o(t){const e=M(t);if(e.length>32)throw new Error("internal; should not happen");const n=new Uint8Array(32);return n.set(e,32-e.length),n}function Wo(t){if(t.length%32==0)return t;const e=new Uint8Array(32*Math.ceil(t.length/32));return e.set(t),e}const Xo=new Uint8Array([]);function $o(t){const e=[];let n=0;for(let r=0;r<t.length;r++)e.push(Xo),n+=32;for(let r=0;r<t.length;r++){const s=g(t[r]);e[r]=_o(n),e.push(_o(s.length)),e.push(Wo(s)),n+=32+32*Math.ceil(s.length/32)}return v(e)}const tl="0x0000000000000000000000000000000000000000000000000000000000000000";function el(t,e){if(t.provider)return t.provider;c(!1,"missing provider","UNSUPPORTED_OPERATION",{operation:e})}async function nl(t,e){let n=cr(e);if(null!=n.to&&(n.to=bn(n.to,t)),null!=n.from){const e=n.from;n.from=Promise.all([t.getAddress(),bn(e,t)]).then((([t,e])=>(u(t.toLowerCase()===e.toLowerCase(),"transaction from mismatch","tx.from",e),t)))}else n.from=t.getAddress();return await r(n)}class rl{provider;constructor(t){s(this,{provider:t||null})}async getNonce(t){return el(this,"getTransactionCount").getTransactionCount(await this.getAddress(),t)}async populateCall(t){return await nl(this,t)}async populateTransaction(t){const e=el(this,"populateTransaction"),n=await nl(this,t);null==n.nonce&&(n.nonce=await this.getNonce("pending")),null==n.gasLimit&&(n.gasLimit=await this.estimateGas(n));const s=await this.provider.getNetwork();null!=n.chainId?u(T(n.chainId)===s.chainId,"transaction chainId mismatch","tx.chainId",t.chainId):n.chainId=s.chainId;const i=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas;if(null==n.gasPrice||2!==n.type&&!i?0!==n.type&&1!==n.type||!i||u(!1,"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","tx",t):u(!1,"eip-1559 transaction do not support gasPrice","tx",t),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas)if(0===n.type||1===n.type){const t=await e.getFeeData();c(null!=t.gasPrice,"network does not support gasPrice","UNSUPPORTED_OPERATION",{operation:"getGasPrice"}),null==n.gasPrice&&(n.gasPrice=t.gasPrice)}else{const t=await e.getFeeData();if(null==n.type)if(null!=t.maxFeePerGas&&null!=t.maxPriorityFeePerGas)if(n.type=2,null!=n.gasPrice){const t=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=t,n.maxPriorityFeePerGas=t}else null==n.maxFeePerGas&&(n.maxFeePerGas=t.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=t.maxPriorityFeePerGas);else null!=t.gasPrice?(c(!i,"network does not support EIP-1559","UNSUPPORTED_OPERATION",{operation:"populateTransaction"}),null==n.gasPrice&&(n.gasPrice=t.gasPrice),n.type=0):c(!1,"failed to get consistent fee data","UNSUPPORTED_OPERATION",{operation:"signer.getFeeData"});else 2!==n.type&&3!==n.type||(null==n.maxFeePerGas&&(n.maxFeePerGas=t.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=t.maxPriorityFeePerGas))}else n.type=2;return await r(n)}async estimateGas(t){return el(this,"estimateGas").estimateGas(await this.populateCall(t))}async call(t){return el(this,"call").call(await this.populateCall(t))}async resolveName(t){const e=el(this,"resolveName");return await e.resolveName(t)}async sendTransaction(t){const e=el(this,"sendTransaction"),n=await this.populateTransaction(t);delete n.from;const r=ro.from(n);return await e.broadcastTransaction(await this.signTransaction(r))}}class sl{#Bt;#$t;#It;#Tt;#te;#ee;constructor(t){this.#Bt=t,this.#$t=null,this.#It=this.#Rt.bind(this),this.#Tt=!1,this.#te=null,this.#ee=!1}_subscribe(t){throw new Error("subclasses must override this")}_emitResults(t,e){throw new Error("subclasses must override this")}_recover(t){throw new Error("subclasses must override this")}async#Rt(t){try{null==this.#$t&&(this.#$t=this._subscribe(this.#Bt));let t=null;try{t=await this.#$t}catch(t){if(!a(t,"UNSUPPORTED_OPERATION")||"eth_newFilter"!==t.operation)throw t}if(null==t)return this.#$t=null,void this.#Bt._recoverSubscriber(this,this._recover(this.#Bt));const e=await this.#Bt.getNetwork();if(this.#te||(this.#te=e),this.#te.chainId!==e.chainId)throw new Error("chaid changed");if(this.#ee)return;const n=await this.#Bt.send("eth_getFilterChanges",[t]);await this._emitResults(this.#Bt,n)}catch(t){console.log("@TODO",t)}this.#Bt.once("block",this.#It)}#ne(){const t=this.#$t;t&&(this.#$t=null,t.then((t=>{this.#Bt.destroyed||this.#Bt.send("eth_uninstallFilter",[t])})))}start(){this.#Tt||(this.#Tt=!0,this.#Rt(-2))}stop(){this.#Tt&&(this.#Tt=!1,this.#ee=!0,this.#ne(),this.#Bt.off("block",this.#It))}pause(t){t&&this.#ne(),this.#Bt.off("block",this.#It)}resume(){this.start()}}class il extends sl{#re;constructor(t,e){var n;super(t),this.#re=(n=e,JSON.parse(JSON.stringify(n)))}_recover(t){return new Mo(t,this.#re)}async _subscribe(t){return await t.send("eth_newFilter",[this.#re])}async _emitResults(t,e){for(const n of e)t.emit(this.#re,t._wrapLog(n,t._network))}}class al extends sl{async _subscribe(t){return await t.send("eth_newPendingTransactionFilter",[])}async _emitResults(t,e){for(const n of e)t.emit("pending",n)}}const ol="bigint,boolean,function,number,string,symbol".split(/,/g);function ll(t){if(null==t||ol.indexOf(typeof t)>=0)return t;if("function"==typeof t.getAddress)return t;if(Array.isArray(t))return t.map(ll);if("object"==typeof t)return Object.keys(t).reduce(((e,n)=>(e[n]=t[n],e)),{});throw new Error(`should not happen: ${t} (${typeof t})`)}function cl(t){return new Promise((e=>{setTimeout(e,t)}))}function ul(t){return t?t.toLowerCase():t}function hl(t){return t&&"number"==typeof t.pollingInterval}const fl={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class dl extends rl{address;constructor(t,e){super(t),s(this,{address:e=Jt(e)})}connect(t){c(!1,"cannot reconnect JsonRpcSigner","UNSUPPORTED_OPERATION",{operation:"signer.connect"})}async getAddress(){return this.address}async populateTransaction(t){return await this.populateCall(t)}async sendUncheckedTransaction(t){const e=ll(t),n=[];if(e.from){const r=e.from;n.push((async()=>{const n=await bn(r,this.provider);u(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",t),e.from=n})())}else e.from=this.address;if(null==e.gasLimit&&n.push((async()=>{e.gasLimit=await this.provider.estimateGas({...e,from:this.address})})()),null!=e.to){const t=e.to;n.push((async()=>{e.to=await bn(t,this.provider)})())}n.length&&await Promise.all(n);const r=this.provider.getRpcTransaction(e);return this.provider.send("eth_sendTransaction",[r])}async sendTransaction(t){const e=await this.provider.getBlockNumber(),n=await this.sendUncheckedTransaction(t);return await new Promise(((t,r)=>{const s=[1e3,100];let i=0;const o=async()=>{try{const r=await this.provider.getTransaction(n);if(null!=r)return void t(r.replaceableTransaction(e))}catch(t){if(a(t,"CANCELLED")||a(t,"BAD_DATA")||a(t,"NETWORK_ERROR")||a(t,"UNSUPPORTED_OPERATION"))return null==t.info&&(t.info={}),t.info.sendTransactionHash=n,void r(t);if(a(t,"INVALID_ARGUMENT")&&(i++,null==t.info&&(t.info={}),t.info.sendTransactionHash=n,i>10))return void r(t);this.provider.emit("error",l("failed to fetch transation after sending (will try again)","UNKNOWN_ERROR",{error:t}))}this.provider._setTimeout((()=>{o()}),s.pop()||4e3)};o()}))}async signTransaction(t){const e=ll(t);if(e.from){const n=await bn(e.from,this.provider);u(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",t),e.from=n}else e.from=this.address;const n=this.provider.getRpcTransaction(e);return await this.provider.send("eth_signTransaction",[n])}async signMessage(t){const e="string"==typeof t?pe(t):t;return await this.provider.send("personal_sign",[A(e),this.address.toLowerCase()])}async signTypedData(t,e,n){const r=ll(n),s=await Fn.resolveNames(t,e,r,(async t=>{const e=await bn(t);return u(null!=e,"TypedData does not support null address","value",t),e}));return await this.provider.send("eth_signTypedData_v4",[this.address.toLowerCase(),JSON.stringify(Fn.getPayload(s.domain,e,s.value))])}async unlock(t){return this.provider.send("personal_unlockAccount",[this.address.toLowerCase(),t,null])}async _legacySignMessage(t){const e="string"==typeof t?pe(t):t;return await this.provider.send("eth_sign",[this.address.toLowerCase(),A(e)])}}class pl extends qo{#u;#se;#ie;#ae;#oe;#te;#le;#ce(){if(this.#ae)return;const t=1===this._getOption("batchMaxCount")?0:this._getOption("batchStallTime");this.#ae=setTimeout((()=>{this.#ae=null;const t=this.#ie;for(this.#ie=[];t.length;){const e=[t.shift()];for(;t.length&&e.length!==this.#u.batchMaxCount;)if(e.push(t.shift()),JSON.stringify(e.map((t=>t.payload))).length>this.#u.batchMaxSize){t.unshift(e.pop());break}(async()=>{const t=1===e.length?e[0].payload:e.map((t=>t.payload));this.emit("debug",{action:"sendRpcPayload",payload:t});try{const n=await this._send(t);this.emit("debug",{action:"receiveRpcResult",result:n});for(const{resolve:t,reject:r,payload:s}of e){if(this.destroyed){r(l("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:s.method}));continue}const e=n.filter((t=>t.id===s.id))[0];if(null!=e)"error"in e?r(this.getRpcError(s,e)):t(e.result);else{const t=l("missing response for request","BAD_DATA",{value:n,info:{payload:s}});this.emit("error",t),r(t)}}}catch(t){this.emit("debug",{action:"receiveRpcError",error:t});for(const{reject:n}of e)n(t)}})()}}),t)}constructor(t,e){super(t,e),this.#se=1,this.#u=Object.assign({},fl,e||{}),this.#ie=[],this.#ae=null,this.#te=null,this.#le=null;{let t=null;const e=new Promise((e=>{t=e}));this.#oe={promise:e,resolve:t}}const n=this._getOption("staticNetwork");"boolean"==typeof n?(u(!n||"any"!==t,"staticNetwork cannot be used on special network 'any'","options",e),n&&null!=t&&(this.#te=Io.from(t))):n&&(u(null==t||n.matches(t),"staticNetwork MUST match network object","options",e),this.#te=n)}_getOption(t){return this.#u[t]}get _network(){return c(this.#te,"network is not available yet","NETWORK_ERROR"),this.#te}async _perform(t){if("call"===t.method||"estimateGas"===t.method){let e=t.transaction;if(e&&null!=e.type&&T(e.type)&&null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas){const n=await this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&(t=Object.assign({},t,{transaction:Object.assign({},e,{type:void 0})}))}}const e=this.getRpcRequest(t);return null!=e?await this.send(e.method,e.args):super._perform(t)}async _detectNetwork(){const t=this._getOption("staticNetwork");if(t){if(!0!==t)return t;if(this.#te)return this.#te}return this.#le?await this.#le:this.ready?(this.#le=(async()=>{try{const t=Io.from(T(await this.send("eth_chainId",[])));return this.#le=null,t}catch(t){throw this.#le=null,t}})(),await this.#le):(this.#le=(async()=>{const t={id:this.#se++,method:"eth_chainId",params:[],jsonrpc:"2.0"};let e;this.emit("debug",{action:"sendRpcPayload",payload:t});try{e=(await this._send(t))[0],this.#le=null}catch(t){throw this.#le=null,this.emit("debug",{action:"receiveRpcError",error:t}),t}if(this.emit("debug",{action:"receiveRpcResult",result:e}),"result"in e)return Io.from(T(e.result));throw this.getRpcError(t,e)})(),await this.#le)}_start(){null!=this.#oe&&null!=this.#oe.resolve&&(this.#oe.resolve(),this.#oe=null,(async()=>{for(;null==this.#te&&!this.destroyed;)try{this.#te=await this._detectNetwork()}catch(t){if(this.destroyed)break;console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"),this.emit("error",l("failed to bootstrap network detection","NETWORK_ERROR",{event:"initial-network-discovery",info:{error:t}})),await cl(1e3)}this.#ce()})())}async _waitUntilReady(){if(null!=this.#oe)return await this.#oe.promise}_getSubscriber(t){return"pending"===t.type?new al(this):"event"===t.type?this._getOption("polling")?new Mo(this,t.filter):new il(this,t.filter):"orphan"===t.type&&"drop-log"===t.filter.orphan?new Vo("orphan"):super._getSubscriber(t)}get ready(){return null==this.#oe}getRpcTransaction(t){const e={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((n=>{if(null==t[n])return;let r=n;"gasLimit"===n&&(r="gas"),e[r]=G(T(t[n],`tx.${n}`))})),["from","to","data"].forEach((n=>{null!=t[n]&&(e[n]=A(t[n]))})),t.accessList&&(e.accessList=Dn(t.accessList)),t.blobVersionedHashes&&(e.blobVersionedHashes=t.blobVersionedHashes.map((t=>t.toLowerCase()))),e}getRpcRequest(t){switch(t.method){case"chainId":return{method:"eth_chainId",args:[]};case"getBlockNumber":return{method:"eth_blockNumber",args:[]};case"getGasPrice":return{method:"eth_gasPrice",args:[]};case"getPriorityFee":return{method:"eth_maxPriorityFeePerGas",args:[]};case"getBalance":return{method:"eth_getBalance",args:[ul(t.address),t.blockTag]};case"getTransactionCount":return{method:"eth_getTransactionCount",args:[ul(t.address),t.blockTag]};case"getCode":return{method:"eth_getCode",args:[ul(t.address),t.blockTag]};case"getStorage":return{method:"eth_getStorageAt",args:[ul(t.address),"0x"+t.position.toString(16),t.blockTag]};case"broadcastTransaction":return{method:"eth_sendRawTransaction",args:[t.signedTransaction]};case"getBlock":if("blockTag"in t)return{method:"eth_getBlockByNumber",args:[t.blockTag,!!t.includeTransactions]};if("blockHash"in t)return{method:"eth_getBlockByHash",args:[t.blockHash,!!t.includeTransactions]};break;case"getTransaction":return{method:"eth_getTransactionByHash",args:[t.hash]};case"getTransactionReceipt":return{method:"eth_getTransactionReceipt",args:[t.hash]};case"call":return{method:"eth_call",args:[this.getRpcTransaction(t.transaction),t.blockTag]};case"estimateGas":return{method:"eth_estimateGas",args:[this.getRpcTransaction(t.transaction)]};case"getLogs":return t.filter&&null!=t.filter.address&&(Array.isArray(t.filter.address)?t.filter.address=t.filter.address.map(ul):t.filter.address=ul(t.filter.address)),{method:"eth_getLogs",args:[t.filter]}}return null}getRpcError(t,e){const{method:n}=t,{error:r}=e;if("eth_estimateGas"===n&&r.message){const e=r.message;if(!e.match(/revert/i)&&e.match(/insufficient funds/i))return l("insufficient funds","INSUFFICIENT_FUNDS",{transaction:t.params[0],info:{payload:t,error:r}})}if("eth_call"===n||"eth_estimateGas"===n){const e=yl(r),s=mn.getBuiltinCallException("eth_call"===n?"call":"estimateGas",t.params[0],e?e.data:null);return s.info={error:r,payload:t},s}const s=JSON.stringify(function(t){const e=[];return wl(t,e),e}(r));if("string"==typeof r.message&&r.message.match(/user denied|ethers-user-denied/i))return l("user rejected action","ACTION_REJECTED",{action:{eth_sign:"signMessage",personal_sign:"signMessage",eth_signTypedData_v4:"signTypedData",eth_signTransaction:"signTransaction",eth_sendTransaction:"sendTransaction",eth_requestAccounts:"requestAccess",wallet_requestAccounts:"requestAccess"}[n]||"unknown",reason:"rejected",info:{payload:t,error:r}});if("eth_sendRawTransaction"===n||"eth_sendTransaction"===n){const e=t.params[0];if(s.match(/insufficient funds|base fee exceeds gas limit/i))return l("insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:e,info:{error:r}});if(s.match(/nonce/i)&&s.match(/too low/i))return l("nonce has already been used","NONCE_EXPIRED",{transaction:e,info:{error:r}});if(s.match(/replacement transaction/i)&&s.match(/underpriced/i))return l("replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:e,info:{error:r}});if(s.match(/only replay-protected/i))return l("legacy pre-eip-155 transactions not supported","UNSUPPORTED_OPERATION",{operation:n,info:{transaction:e,info:{error:r}}})}let i=!!s.match(/the method .* does not exist/i);return i||r&&r.details&&r.details.startsWith("Unauthorized method:")&&(i=!0),i?l("unsupported operation","UNSUPPORTED_OPERATION",{operation:t.method,info:{error:r,payload:t}}):l("could not coalesce error","UNKNOWN_ERROR",{error:r,payload:t})}send(t,e){if(this.destroyed)return Promise.reject(l("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:t}));const n=this.#se++,r=new Promise(((r,s)=>{this.#ie.push({resolve:r,reject:s,payload:{method:t,params:e,id:n,jsonrpc:"2.0"}})}));return this.#ce(),r}async getSigner(t){null==t&&(t=0);const e=this.send("eth_accounts",[]);if("number"==typeof t){const n=await e;if(t>=n.length)throw new Error("no such account");return new dl(this,n[t])}const{accounts:n}=await r({network:this.getNetwork(),accounts:e});t=Jt(t);for(const e of n)if(Jt(e)===t)return new dl(this,t);throw new Error("invalid account")}async listAccounts(){return(await this.send("eth_accounts",[])).map((t=>new dl(this,t)))}destroy(){this.#ae&&(clearTimeout(this.#ae),this.#ae=null);for(const{payload:t,reject:e}of this.#ie)e(l("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:t.method}));this.#ie=[],super.destroy()}}class gl extends pl{#ue;constructor(t,e){super(t,e);let n=this._getOption("pollingInterval");null==n&&(n=fl.pollingInterval),this.#ue=n}_getSubscriber(t){const e=super._getSubscriber(t);return hl(e)&&(e.pollingInterval=this.#ue),e}get pollingInterval(){return this.#ue}set pollingInterval(t){if(!Number.isInteger(t)||t<0)throw new Error("invalid interval");this.#ue=t,this._forEachSubscriber((t=>{hl(t)&&(t.pollingInterval=this.#ue)}))}}class ml extends gl{#he;constructor(t,e,n){null==t&&(t="http://localhost:8545"),super(e,n),this.#he="string"==typeof t?new Zn(t):t.clone()}_getConnection(){return this.#he.clone()}async send(t,e){return await this._start(),await super.send(t,e)}async _send(t){const e=this._getConnection();e.body=JSON.stringify(t),e.setHeader("content-type","application/json");const n=await e.send();n.assertOk();let r=n.bodyJson;return Array.isArray(r)||(r=[r]),r}}function yl(t){if(null==t)return null;if("string"==typeof t.message&&t.message.match(/revert/i)&&y(t.data))return{message:t.message,data:t.data};if("object"==typeof t){for(const e in t){const n=yl(t[e]);if(n)return n}return null}if("string"==typeof t)try{return yl(JSON.parse(t))}catch(t){}return null}function wl(t,e){if(null!=t){if("string"==typeof t.message&&e.push(t.message),"object"==typeof t)for(const n in t)wl(t[n],e);if("string"==typeof t)try{return wl(JSON.parse(t),e)}catch(t){}}}const bl={value:{min:2,max:2},price:{min:2,max:2},amount:{min:0,max:2},default:{min:0,max:2},precise:{min:0,max:8}},Al=["value","price"],vl=t=>t?"$":"",El=(t,e,n,r,s)=>{const i=t.toFixed(16),[a,o]=i.split("."),l=o.slice(0,n),c=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!t.includes("."))return t;let n=t;for(;n.endsWith("0")&&(!e||n.length-1-n.indexOf(".")>e);)n=n.slice(0,-1);return n.endsWith(".")&&(n=n.slice(0,-1)),n}(`${Number(a).toLocaleString("en-US",{maximumFractionDigits:0})}.${l}`,s?bl[s].min:void 0);return`${r}${vl(e)}${c}`},kl=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";const n=Al.includes(e||"");if(0===t)return"amount"===e?`${vl(n)}0`:`${vl(n)}0.00`;if(!t||Number.isNaN(t))return`${vl(n)}-`;const r=Math.abs(t),s=t<0?"-":"";if("value"===e)return r<.01?`${s}<$0.01`:El(r,n,2,s,e);if("amount"===e&&r<1e-5)return`${s}<0.00001`;if("precise"===e)return El(t,n,bl[e].max,s,e);const i=((t,e)=>{const n=t.toFixed(t<1?16:2).toString(),r=n.indexOf(".");if(-1===r)return 0;const s=n.slice(r+1).split("").findIndex((t=>"0"!==t));return-1===s?bl[e].min:s})(t,e),a=i+bl[e].max;return El(r,n,a,s,e)},xl=BigInt(-1),Pl=BigInt(0),Nl=BigInt(1),Bl=BigInt(5),Il={};let Cl="0000";for(;Cl.length<80;)Cl+=Cl;function Ol(t){let e=Cl;for(;e.length<t;)e+=e;return BigInt("1"+e.substring(0,t))}function Rl(t,e,n){const r=BigInt(e.width);if(e.signed){const e=Nl<<r-Nl;c(null==n||t>=-e&&t<e,"overflow","NUMERIC_FAULT",{operation:n,fault:"overflow",value:t}),t=t>Pl?C(R(t,r),r):-C(R(-t,r),r)}else{const e=Nl<<r;c(null==n||t>=0&&t<e,"overflow","NUMERIC_FAULT",{operation:n,fault:"overflow",value:t}),t=(t%e+e)%e&e-Nl}return t}function Tl(t){"number"==typeof t&&(t=`fixed128x${t}`);let e=!0,n=128,r=18;if("string"==typeof t)if("fixed"===t);else if("ufixed"===t)e=!1;else{const s=t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);u(s,"invalid fixed format","format",t),e="u"!==s[1],n=parseInt(s[2]),r=parseInt(s[3])}else if(t){const s=t,i=(t,e,n)=>null==s[t]?n:(u(typeof s[t]===e,"invalid fixed format ("+t+" not "+e+")","format."+t,s[t]),s[t]);e=i("signed","boolean",e),n=i("width","number",n),r=i("decimals","number",r)}return u(n%8==0,"invalid FixedNumber width (not byte aligned)","format.width",n),u(r<=80,"invalid FixedNumber decimals (too large)","format.decimals",r),{signed:e,width:n,decimals:r,name:(e?"":"u")+"fixed"+String(n)+"x"+String(r)}}class Sl{format;#fe;#de;#pe;_value;constructor(t,e,n){d(t,Il,"FixedNumber"),this.#de=e,this.#fe=n;const r=function(t,e){let n="";t<Pl&&(n="-",t*=xl);let r=t.toString();if(0===e)return n+r;for(;r.length<=e;)r=Cl+r;const s=r.length-e;for(r=r.substring(0,s)+"."+r.substring(s);"0"===r[0]&&"."!==r[1];)r=r.substring(1);for(;"0"===r[r.length-1]&&"."!==r[r.length-2];)r=r.substring(0,r.length-1);return n+r}(e,n.decimals);s(this,{format:n.name,_value:r}),this.#pe=Ol(n.decimals)}get signed(){return this.#fe.signed}get width(){return this.#fe.width}get decimals(){return this.#fe.decimals}get value(){return this.#de}#ge(t){u(this.format===t.format,"incompatible format; use fixedNumber.toFormat","other",t)}#me(t,e){return t=Rl(t,this.#fe,e),new Sl(Il,t,this.#fe)}#ye(t,e){return this.#ge(t),this.#me(this.#de+t.#de,e)}addUnsafe(t){return this.#ye(t)}add(t){return this.#ye(t,"add")}#we(t,e){return this.#ge(t),this.#me(this.#de-t.#de,e)}subUnsafe(t){return this.#we(t)}sub(t){return this.#we(t,"sub")}#be(t,e){return this.#ge(t),this.#me(this.#de*t.#de/this.#pe,e)}mulUnsafe(t){return this.#be(t)}mul(t){return this.#be(t,"mul")}mulSignal(t){this.#ge(t);const e=this.#de*t.#de;return c(e%this.#pe===Pl,"precision lost during signalling mul","NUMERIC_FAULT",{operation:"mulSignal",fault:"underflow",value:this}),this.#me(e/this.#pe,"mulSignal")}#Ae(t,e){return c(t.#de!==Pl,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#ge(t),this.#me(this.#de*this.#pe/t.#de,e)}divUnsafe(t){return this.#Ae(t)}div(t){return this.#Ae(t,"div")}divSignal(t){c(t.#de!==Pl,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#ge(t);const e=this.#de*this.#pe;return c(e%t.#de===Pl,"precision lost during signalling div","NUMERIC_FAULT",{operation:"divSignal",fault:"underflow",value:this}),this.#me(e/t.#de,"divSignal")}cmp(t){let e=this.value,n=t.value;const r=this.decimals-t.decimals;return r>0?n*=Ol(r):r<0&&(e*=Ol(-r)),e<n?-1:e>n?1:0}eq(t){return 0===this.cmp(t)}lt(t){return this.cmp(t)<0}lte(t){return this.cmp(t)<=0}gt(t){return this.cmp(t)>0}gte(t){return this.cmp(t)>=0}floor(){let t=this.#de;return this.#de<Pl&&(t-=this.#pe-Nl),t=this.#de/this.#pe*this.#pe,this.#me(t,"floor")}ceiling(){let t=this.#de;return this.#de>Pl&&(t+=this.#pe-Nl),t=this.#de/this.#pe*this.#pe,this.#me(t,"ceiling")}round(t){if(null==t&&(t=0),t>=this.decimals)return this;const e=this.decimals-t,n=Bl*Ol(e-1);let r=this.value+n;const s=Ol(e);return r=r/s*s,Rl(r,this.#fe,"round"),new Sl(Il,r,this.#fe)}isZero(){return this.#de===Pl}isNegative(){return this.#de<Pl}toString(){return this._value}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(t){return Sl.fromString(this.toString(),t)}static fromValue(t,e,n){const r=null==e?0:D(e),s=Tl(n);let i=T(t,"value");const a=r-s.decimals;if(a>0){const e=Ol(a);c(i%e===Pl,"value loses precision for format","NUMERIC_FAULT",{operation:"fromValue",fault:"underflow",value:t}),i/=e}else a<0&&(i*=Ol(-a));return Rl(i,s,"fromValue"),new Sl(Il,i,s)}static fromString(t,e){const n=t.match(/^(-?)([0-9]*)\.?([0-9]*)$/);u(n&&n[2].length+n[3].length>0,"invalid FixedNumber string value","value",t);const r=Tl(e);let s=n[2]||"0",i=n[3]||"";for(;i.length<r.decimals;)i+=Cl;c(i.substring(r.decimals).match(/^0*$/),"too many decimals for format","NUMERIC_FAULT",{operation:"fromString",fault:"underflow",value:t}),i=i.substring(0,r.decimals);const a=BigInt(n[1]+s+i);return Rl(a,r,"fromString"),new Sl(Il,a,r)}static fromBytes(t,e){let n=U(g(t,"value"));const r=Tl(e);return r.signed&&(n=C(n,r.width)),Rl(n,r,"fromBytes"),new Sl(Il,n,r)}}const Fl=["wei","kwei","mwei","gwei","szabo","finney","ether"];function Ul(t,e){let n=18;if("string"==typeof e){const t=Fl.indexOf(e);u(t>=0,"invalid unit","unit",e),n=3*t}else null!=e&&(n=D(e,"unit"));return Sl.fromValue(t,n,{decimals:n,width:512}).toString()}async function Dl(){await chrome.storage.local.set({"last-heartbeat":(new Date).getTime()})}!async function(){Dl().then((()=>{setInterval(Dl,2e4)}))}(),(async()=>{const t=new ml("https://eth-mainnet.g.alchemy.com/v2/XqYEVNd8CVHFp_U2sLXA-gWuxq58d4BB"),e=async()=>{const n=await(async(t,e)=>{const n=new zr("0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2",["function getUserAccountData(address) view returns (uint256 totalCollateralETH, uint256 totalDebtETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor)"],e),r=await n.getUserAccountData("0x4F3c11ac6f552E36211661d161360e4A7677C683");return{totalCollateralETH:kl(parseFloat(Ul(r.totalCollateralETH,8)),"price"),totalDebtETH:kl(parseFloat(Ul(r.totalDebtETH,8)),"price"),availableBorrowsETH:kl(parseFloat(Ul(r.availableBorrowsETH,8)),"price"),currentLiquidationThreshold:Number(r.currentLiquidationThreshold)/100+"%",ltv:Number(r.ltv)/100+"%",healthFactor:kl(parseFloat(Ul(r.healthFactor,18)))}})(0,t);Number(n.healthFactor)<2.5&&await chrome.notifications.create(Math.random().toString(),{type:"basic",iconUrl:chrome.runtime.getURL("assets/icon@96.png"),title:"Health Factor Alert",message:`You are at risk. You health factor is ${n.healthFactor}`}),setTimeout((()=>{e()}),15e3)};e()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,